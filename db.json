{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/algolia.svg","path":"img/algolia.svg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":0},{"_id":"source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":0},{"_id":"source/img/home_page_background.png","path":"img/home_page_background.png","modified":0,"renderable":0},{"_id":"source/images/ggt-coder/menu-title.png","path":"images/ggt-coder/menu-title.png","modified":0,"renderable":0},{"_id":"source/images/ggt-coder/module_content.png","path":"images/ggt-coder/module_content.png","modified":0,"renderable":0},{"_id":"source/images/ggt-coder/project_content.png","path":"images/ggt-coder/project_content.png","modified":0,"renderable":0},{"_id":"source/images/golang/CompiledLanguageComputationOfMultiplication01.png","path":"images/golang/CompiledLanguageComputationOfMultiplication01.png","modified":0,"renderable":0},{"_id":"source/images/golang/CompiledLanguageComputationOfMultiplication02.png","path":"images/golang/CompiledLanguageComputationOfMultiplication02.png","modified":0,"renderable":0},{"_id":"source/images/golang/GolangCover.jpg","path":"images/golang/GolangCover.jpg","modified":0,"renderable":0},{"_id":"source/images/golang/golang-top-image.jpg","path":"images/golang/golang-top-image.jpg","modified":0,"renderable":0},{"_id":"source/images/laravel/laravel-top-image.png","path":"images/laravel/laravel-top-image.png","modified":0,"renderable":0},{"_id":"source/images/mysql/mysql-top-image.png","path":"images/mysql/mysql-top-image.png","modified":0,"renderable":0},{"_id":"source/images/php/DisplacementEfficiencyComparison01.png","path":"images/php/DisplacementEfficiencyComparison01.png","modified":0,"renderable":0},{"_id":"source/images/php/DisplacementEfficiencyComparison02.png","path":"images/php/DisplacementEfficiencyComparison02.png","modified":0,"renderable":0},{"_id":"source/images/php/PhpCover.png","path":"images/php/PhpCover.png","modified":0,"renderable":0},{"_id":"source/images/php/PhpExpandsPositiveIntegersByAFactorOf1000-image01.png","path":"images/php/PhpExpandsPositiveIntegersByAFactorOf1000-image01.png","modified":0,"renderable":0},{"_id":"source/images/php/php-top-image.png","path":"images/php/php-top-image.png","modified":0,"renderable":0},{"_id":"source/images/tripartite/AgoraRecordTestReport01.png","path":"images/tripartite/AgoraRecordTestReport01.png","modified":0,"renderable":0},{"_id":"source/images/tripartite/AgoraRecordTestReport02.png","path":"images/tripartite/AgoraRecordTestReport02.png","modified":0,"renderable":0},{"_id":"source/images/tripartite/AgoraRecordTestReport03.png","path":"images/tripartite/AgoraRecordTestReport03.png","modified":0,"renderable":0},{"_id":"source/images/tripartite/AgoraRecordTestReport04.png","path":"images/tripartite/AgoraRecordTestReport04.png","modified":0,"renderable":0},{"_id":"source/images/tripartite/AgoraRecordTestReport05.png","path":"images/tripartite/AgoraRecordTestReport05.png","modified":0,"renderable":0},{"_id":"source/images/tripartite/AgoraRecordTestReport06.png","path":"images/tripartite/AgoraRecordTestReport06.png","modified":0,"renderable":0},{"_id":"source/images/tripartite/AgoraRecordTestReport07.png","path":"images/tripartite/AgoraRecordTestReport07.png","modified":0,"renderable":0},{"_id":"source/images/tripartite/AgoraRecordTestReport08.png","path":"images/tripartite/AgoraRecordTestReport08.png","modified":0,"renderable":0},{"_id":"source/images/tripartite/AgoraRecordTestReport09.png","path":"images/tripartite/AgoraRecordTestReport09.png","modified":0,"renderable":0},{"_id":"source/images/tripartite/AgoraRecordTestReport10.png","path":"images/tripartite/AgoraRecordTestReport10.png","modified":0,"renderable":0},{"_id":"source/images/tripartite/AgoraRecordTestReport11.png","path":"images/tripartite/AgoraRecordTestReport11.png","modified":0,"renderable":0},{"_id":"source/images/tripartite/AgoraRecordTestReport12.png","path":"images/tripartite/AgoraRecordTestReport12.png","modified":0,"renderable":0},{"_id":"source/images/tripartite/AgoraRecordTestReport13.png","path":"images/tripartite/AgoraRecordTestReport13.png","modified":0,"renderable":0},{"_id":"source/images/tripartite/AgoraRecordTestReport14.png","path":"images/tripartite/AgoraRecordTestReport14.png","modified":0,"renderable":0},{"_id":"source/images/tripartite/AgoraRecordTestReport15.png","path":"images/tripartite/AgoraRecordTestReport15.png","modified":0,"renderable":0},{"_id":"source/images/ubuntu/ubuntu-top-image.png","path":"images/ubuntu/ubuntu-top-image.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/manifest.json","hash":"e09bee62d9836a09452457de91d7ffd5b7ebb34d","modified":1628747423816},{"_id":"source/categories/index.md","hash":"37aa1b8eb3e4a820cfa6d3e10d88a2c4730ea6fd","modified":1628654310091},{"_id":"source/link/index.md","hash":"ee6d32372a3afd2ac2f1aecbf84a826008a37bc0","modified":1628654593841},{"_id":"source/tags/index.md","hash":"9300253d04807c55516bcbcadca071d635bad7d7","modified":1628654336092},{"_id":"source/_posts/go/CompiledLanguageComputationOfMultiplication.md","hash":"9f060155e66cbbb9cfca90135aea67213169ef5a","modified":1628762006310},{"_id":"source/_posts/go/GolangStringIntInterconversion.md","hash":"47e791d592444d102763fecdfef4f138235498dc","modified":1628762018766},{"_id":"source/_posts/go/Random.md","hash":"90e8914abb0a9215763791d55068d6d989ec838b","modified":1628761201272},{"_id":"source/_posts/go/StartGolang.md","hash":"8f0bf58b0fe89af243581cb17d2a822f395f00c1","modified":1628761157358},{"_id":"source/_posts/php/DisplacementEfficiencyComparison.md","hash":"09f45c93068c5aa4e1ba4979a82487acc372d4da","modified":1628761998825},{"_id":"source/_posts/php/ExpandsPositiveIntegersByAFactorOf1000.md","hash":"101690f8cc7c073e6da7da3b3c39a8847612de2d","modified":1628762027072},{"_id":"source/img/favicon.png","hash":"2a3bc4b58ff26c14fdd61070d4c8bd666de9db14","modified":1628585095269},{"_id":"source/images/ggt-coder/project_content.png","hash":"09c542d2d1c1a71bc58ab16265298a1c880ed79c","modified":1628757124121},{"_id":"source/images/golang/CompiledLanguageComputationOfMultiplication01.png","hash":"402a8ae3357d34f807b7e5742219e610dc03504e","modified":1628757124122},{"_id":"source/images/golang/CompiledLanguageComputationOfMultiplication02.png","hash":"dc33261d172a05cd49f64766cb05cf8adddcdbca","modified":1628757124123},{"_id":"source/images/golang/golang-top-image.jpg","hash":"1311580d3501beb3dd5c0809ba008a2c83af4041","modified":1628760132735},{"_id":"source/images/mysql/mysql-top-image.png","hash":"c363a2722bbdff4b245945af13235153c692dabe","modified":1628759917204},{"_id":"source/images/php/DisplacementEfficiencyComparison01.png","hash":"79e8107d4624df187b5fc98c329f22cdc8f78809","modified":1628757124125},{"_id":"source/images/php/DisplacementEfficiencyComparison02.png","hash":"36eb2ecf2b2dcb1f94f8442aa9f52f4e00a64b8b","modified":1628757124126},{"_id":"source/images/php/PhpCover.png","hash":"2346374ac2440e91214a93af17d1b3d56105788a","modified":1628761608225},{"_id":"source/images/php/PhpExpandsPositiveIntegersByAFactorOf1000-image01.png","hash":"8bfb84d21b8c383a6bc871ecfa0ac146c2284c8a","modified":1628757124127},{"_id":"source/images/tripartite/AgoraRecordTestReport06.png","hash":"12e5841c2278dc31794e0e0647fc6fee908041b9","modified":1628757124137},{"_id":"source/images/tripartite/AgoraRecordTestReport05.png","hash":"350d64668d4e61e6da5f240e6168a037a59e5bc6","modified":1628757124136},{"_id":"source/_data/link.yml","hash":"3c9182c098ad951a57220e41ec8770bdcd6c4899","modified":1628654633219},{"_id":"source/img/avatar.jpg","hash":"1114527e4092d6e96767b79eb9fca5a10a028291","modified":1627889668202},{"_id":"source/images/ggt-coder/menu-title.png","hash":"0f56df1cbd2380132305429c5ab8d3b4accae5ce","modified":1628757124119},{"_id":"source/images/ggt-coder/module_content.png","hash":"fe49e209058da5252b8a6c5015955881dbfbbf2d","modified":1628757124120},{"_id":"source/images/golang/GolangCover.jpg","hash":"2ab6265ad7320636fd4618b7d812153479f43ea5","modified":1628760538691},{"_id":"source/images/laravel/laravel-top-image.png","hash":"7a75f8b09e4003ae7b72239a43f161a0b922b632","modified":1628759997537},{"_id":"source/images/php/php-top-image.png","hash":"d9d4efb563bd4c7a620c4a3706d9d46d96aef1e8","modified":1628759748611},{"_id":"source/images/tripartite/AgoraRecordTestReport04.png","hash":"10aa4341ce489a4d527d2a4db56eaf6a7ad292ca","modified":1628757124135},{"_id":"source/images/tripartite/AgoraRecordTestReport07.png","hash":"1a79045b3565bfdcc3f9f8af486d6dc671b0fc22","modified":1628757124138},{"_id":"source/images/tripartite/AgoraRecordTestReport08.png","hash":"5dd7ef070e76c285a3d5a5072684d9ecfd5537f5","modified":1628757124139},{"_id":"source/images/tripartite/AgoraRecordTestReport09.png","hash":"255a63c2ca9c3362a646e20f5ce12b27515d8a15","modified":1628757124140},{"_id":"source/images/tripartite/AgoraRecordTestReport10.png","hash":"1f5263f6181e851a8a166bb0cf6d19d7a77dda3b","modified":1628757124142},{"_id":"source/images/tripartite/AgoraRecordTestReport12.png","hash":"a9101bb943da60c663a9b2a45ba67984327dc52b","modified":1628757124148},{"_id":"source/images/tripartite/AgoraRecordTestReport03.png","hash":"8c446c125944bb59ad1c296fde8b827f8da7c034","modified":1628757124134},{"_id":"source/images/tripartite/AgoraRecordTestReport01.png","hash":"9df7febe6c4774e4491ea4d0b72dd2be2aa786f7","modified":1628757124131},{"_id":"source/images/tripartite/AgoraRecordTestReport13.png","hash":"720e44948d2c7fc2086993e08b308158e65c88c2","modified":1628757124150},{"_id":"source/images/tripartite/AgoraRecordTestReport02.png","hash":"ec9b70e7d67a6d498cb1be20096c368a2a97e0a3","modified":1628757124132},{"_id":"source/images/tripartite/AgoraRecordTestReport14.png","hash":"5f05c160578dc29df8abd9c74f3a59d12c9a9beb","modified":1628757124152},{"_id":"source/images/tripartite/AgoraRecordTestReport15.png","hash":"62ff962a120b2300eecd9a0907316bcf06cbaa31","modified":1628757124154},{"_id":"themes/butterfly/_config.yml","hash":"d9593b423071020f7b970dd932128be03b9ad3e3","modified":1628581041377},{"_id":"themes/butterfly/README.md","hash":"0f0eaee9c30ef1e9aed588fbb3e8263401348b55","modified":1628581041375},{"_id":"themes/butterfly/package.json","hash":"40fd25d5ec0895596ecba874740e90167fdb0d0d","modified":1628581041448},{"_id":"themes/butterfly/languages/en.yml","hash":"fd1c1211c8f166d089a7697872185a81182d92e1","modified":1628581041378},{"_id":"themes/butterfly/README_CN.md","hash":"70ec43a8aa0776b5a0a2a6b6009dd253fa3679eb","modified":1628581041376},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"46685048a05b419ed9c72cf31bd6e5efef7524f2","modified":1628581041379},{"_id":"themes/butterfly/layout/category.pug","hash":"5ac3cd8172088843cec03175c612a9c85f49cf2e","modified":1628581041381},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"736bec8eeb3a29d0d43669d81f1fa686e02be18e","modified":1628581041380},{"_id":"themes/butterfly/layout/index.pug","hash":"648dcbdb3d145a710de81c909e000e8664d2ac9c","modified":1628581041445},{"_id":"themes/butterfly/layout/page.pug","hash":"cae76ce64c114fd192b5da5a7d14aa0240df2f06","modified":1628581041445},{"_id":"themes/butterfly/layout/post.pug","hash":"8f2f13c9ae099dd83827ce3dbac5abc8d7d5bde3","modified":1628581041446},{"_id":"themes/butterfly/layout/tag.pug","hash":"4bb5efc6dabdf1626685bf6771aaa1467155ae86","modified":1628581041447},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/custom.md","hash":"b41123ce5f0ccfa9e06a68b9f3cb59ba040a049a","modified":1628581041371},{"_id":"themes/butterfly/LICENSE","hash":"c8bc7df08db9dd3b39c2c2259a163a36cf2f6808","modified":1628581041374},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"a1ca58fdff74b890cade94479f8f0eb9ce7e5e73","modified":1628581041382},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.md","hash":"205a69ba038cf76affcdc1f39d88a8cb8079fc12","modified":1628581041371},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"3cdc5e32d0f1e5866bcf86f94a0d76aaf7142937","modified":1628581041382},{"_id":"themes/butterfly/layout/archive.pug","hash":"2d5bf4b1755f89898c579c18d601be83d2bc8ebd","modified":1628581041381},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"8715948b93e7508b84d913be1969b28c6b067b9b","modified":1628581041383},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"f4dcc0a596eb9801c4d3c033d018d0abb413c8e5","modified":1628581041384},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"f2e1d8a05d2e409c4804f67a98f5f59f527d6627","modified":1628581041394},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"bb1847f45e713cc88b1c0a97035ec01f0209c995","modified":1628581041400},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"66b14189a1913119ff5927c0b933b5c73fb37f48","modified":1628581041402},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"9b5243385f7a90e0103c25c531a1e7f2f1884c15","modified":1628581041403},{"_id":"themes/butterfly/scripts/events/init.js","hash":"5803aa55d9c21e51ea64c1ae50c9b602979aaee2","modified":1628581041449},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"1e1da036fae593be7e2cc502f0a5cbeb2e7881d1","modified":1628581041450},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"bd29f20fad3d3fab600940e7a6dc9a803943cb33","modified":1628581041451},{"_id":"themes/butterfly/languages/default.yml","hash":"b9dbdb20bd1f1c7ca8a8f38635bdc4ed8bb1d44c","modified":1628581041378},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"4f712b4ea383b59a3122683db1d54c04a79ccc5d","modified":1628581041453},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"376e1884ea764404c38b1e73b16de0358ece519e","modified":1628581041454},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"98ab13a60413d68bd9d02d54d121c66a6d4634d2","modified":1628581041455},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"51112d3db07f87034422ff4acc69ca2eb4215b4e","modified":1628581041456},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"98ef86305b8d2ad9dbab969715e1ac93b407f036","modified":1628581041450},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"8cb7ef368cc2ac7f4a13c2959908b1574e572acf","modified":1628581041457},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"7ffbe625f184116e442648c8416ea58614a1cef8","modified":1628581041457},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"eb019da8c190923e759d2fd7cb846281eef8594e","modified":1628581041458},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"7641adb0d520c5ff29dd36fc1fb8617c52ecc9fb","modified":1628581041458},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"551f1b8edc973bd8afc5cce2eae546f002fa84c3","modified":1628581041459},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"829229b0074b332ba779e159219eb2466612ff6e","modified":1628581041459},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"420ba8b11e7316b4c09eb301d39814bc9bae9f90","modified":1628581041460},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"08ea00791bd4738952234cb5d8360e119df6f875","modified":1628581041460},{"_id":"themes/butterfly/source/css/index.styl","hash":"c7924868adcb046b46498626a9223c7a7b3f2e30","modified":1628581041493},{"_id":"themes/butterfly/source/css/var.styl","hash":"31198af95fecc6819d3b2cb7ef03988ef67257da","modified":1628581041494},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1628581041495},{"_id":"themes/butterfly/source/img/algolia.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1628581041495},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1628581041497},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1628581041496},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"384de3c04809ec5fa996e8aa0628f770cd4bff3e","modified":1628581041455},{"_id":"themes/butterfly/source/js/main.js","hash":"5daa345abeda9de55a9912c30944fe80c084a2bf","modified":1628581041498},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"4db1170be7a9360e2c5399d281b979da730df2a3","modified":1628581041500},{"_id":"themes/butterfly/source/js/utils.js","hash":"1b8bf1e6d50fa8ffe2aff7548b141cab72540ba0","modified":1628581041501},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"e320b40c051bae1549156cd5ea4a51383cf78598","modified":1628581041374},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"3ca9d9cdfd6e61df1d5b07de40f34349cda7a7c7","modified":1628581041385},{"_id":"themes/butterfly/scripts/events/404.js","hash":"f1d1c378356b776e9b2a8411e6dca88dc8c3245c","modified":1628581041449},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"73c04d62055840545112dd12d73807835ca62347","modified":1628581041386},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"f29123e603cbbcc6ce277d4e8f600ba67498077c","modified":1628581041386},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"903d12250ce70713dd5b8ac7e1f7a20fe15eb815","modified":1628581041385},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"07380718ed3af19a7e64b30e8c13726fe5983947","modified":1628581041384},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"72efaa09ff60843567458bd54152e06f0cb2757e","modified":1628581041387},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"d6556d5396eb0e10ea0ec10158779c21dc78f738","modified":1628581041388},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"6dc2c9b85df9ab4f5b554305339fd80a90a6cf43","modified":1628581041388},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"5168caadc4cf541f5d6676a9c5e8ae47a948f9ad","modified":1628581041389},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"3a2797d2744607ba6cdb5a02853851957c0f7e29","modified":1628581041389},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"4d52000cae1fce333329c382dac6c9a21ad0b195","modified":1628581041390},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"419807903e5586b8804b1f8f17cea97bd05f0b17","modified":1628581041390},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"7677911bd3f43edaf8230eea02f60a248eee9934","modified":1628581041391},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"631ec7000fd4d6cfa2de118ee02ad8a42ffb34f5","modified":1628581041392},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"971038debf539333b1687b4a1d87cf4fc965a846","modified":1628581041397},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"95924d28d71b28769963529f82b376a9dc731fad","modified":1628581041398},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"f5ea1e10a169aeb98e42b19ac084c4eb27693b46","modified":1628581041399},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"dcccb1425fabcf12a1bed955518b0e7b1054cab0","modified":1628581041397},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"9aa743b1f6fb7fafabee38f9204ce9c8f1be7f9a","modified":1628581041399},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"62dc2e683d56ddc9b588abc44dc1cfb778a2c68f","modified":1628581041400},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"6ec54b77e3a90e148e66e317e5bb6c89624fddca","modified":1628581041401},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"c762732e200ff2627bc046af5f170b3269343341","modified":1628581041402},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"4c3da5a89b4e6fd3ab527f5c6d27790359d57f71","modified":1628581041421},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"d06dafe7faf3a2e328ef62f26166a51ffe7a5579","modified":1628581041428},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"bee06b3f01fa1f0d8fa08c154234b452da425101","modified":1628581041404},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"ad59dcce32e4e67066303a1ffd1dd95874d9953e","modified":1628581041429},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"2448b243ded58aa1d5fc22fd115e6d06b636f9fd","modified":1628581041429},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"4a2ea9fe59f1dc8cb4f4f6a28cf24a40fc300254","modified":1628581041435},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"a8312b527493dabbadbb1280760168d3bc909a3b","modified":1628581041436},{"_id":"themes/butterfly/.github/stale.yml","hash":"7a131b8aa4936fbcedea3517299e1cdc1bcbcaab","modified":1628581041373},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"009bdbef23381f10664622fafdc602f2ff5bf1ec","modified":1628581041437},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"73d33b6930e7944187a4b3403daf25d27077a2dd","modified":1628581041437},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"66e383b4ef374951eb87dd1bf4cdb7a667193fb5","modified":1628581041440},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"1dba77d250eeebfb6e293d504352c7e9ea31980b","modified":1628581041439},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"6c3449a44ae1a80f71dd4d9d6a85cec1781ceff1","modified":1628581041438},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"0f1a5c356c1ffd47ff49e153226e2d670dc61057","modified":1628581041440},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"0b5c165664f9f8691551fc5ff435b40e7f73c737","modified":1628581041441},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"62adef7998fb9bebc5891a49472cfea944a1bf7a","modified":1628581041443},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"9755cac8424dc578e9ec07dbcaa429fddbedd392","modified":1628581041442},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"7b5ae404a1205546b7de4be42291315cf918f2b3","modified":1628581041443},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"e4c39101d7087066a86f7743985a53d6a246470b","modified":1628581041444},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"471b20e71a19db1f5115727082e5188200c49383","modified":1628581041442},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"2e8e391b211b2416d3c9430ab5361659c073f348","modified":1628581041463},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"23ea60f8becc91f6e9f6cfb1cbfd25689c263b9c","modified":1628581041468},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"f27ad7b5d781c98bcac5c12c2d70b69b830e0374","modified":1628581041468},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"3f0b8699f529f0842c3b101006f60cb7933c16ff","modified":1628581041467},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"bfc4b9d8df66593c11c9ae78899f54e69785ca90","modified":1628581041469},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"dd71e34edece4e06b59e941fb3cc5ad9a3ad09cf","modified":1628581041470},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"8e6c9a2c1881985e4b2ae14ef1bdfdbb1bc83b37","modified":1628581041469},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"807f18717c29b5c41de6fc600a69a80ce8b7a19c","modified":1628581041471},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"db7fe645662d87be4f8dfc08e55bbe1a3734bf93","modified":1628581041473},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"814729d1d71f4326623a4f34b621bf0421503103","modified":1628581041473},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"4ae98e703440b616d2a36da139bda844c94d425e","modified":1628581041475},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"a00ad74074513a1c7f6e02977b8fa778beaa2108","modified":1628581041475},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"191ce31ce0f2b1d22a64225801a88cee6054f574","modified":1628581041476},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"943aa34c83c87d0225db65ae90621870472972fa","modified":1628581041476},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"8489722684aa9b4baa38386f4d4b39f4dbd60113","modified":1628581041477},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"89a6cb63a97cc08675319c403e4a89391f6ab401","modified":1628581041478},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"f9de9db2a49ac4d5447660ab159171ac5c228e3c","modified":1628581041462},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"87c576a3361f30eefafec27a872ad76e9fbb2765","modified":1628581041479},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"ca1d3a885a85a91fcd6f7b55fca96cafb6a1b0a3","modified":1628581041481},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"03164bca4546707543828cb2a41bc672b77bfa5a","modified":1628581041462},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"190b85de3e686393e45869d12464995f23b304dc","modified":1628581041480},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"25ac939fc57346de07ba9e15a1a760b492baefd7","modified":1628581041484},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"5e5c1d6d104cc15314ae365d0da7cb07334a6457","modified":1628581041481},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"0da09b1811a776106ca66c56be6e2a396dca5680","modified":1628581041482},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"48ad198d0ea97a25db4d2a3e587a16ef41617c0b","modified":1628581041482},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"e65ed98056e6c91e622f94bad5283d00fdb22142","modified":1628581041485},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"c3369a14f4111c098d0177036ca57df6deb59d72","modified":1628581041486},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"26e26797b3175498e20b2a8bf1679d3ed9fac5a6","modified":1628581041483},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"6c12a03e26ca5d538537d472657d3d03a7fcbb87","modified":1628581041487},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"56691537c7f06c2cf1ffa1509a328f506d938ee8","modified":1628581041488},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"5a873d01fabebcf7ddf7a6b1c2e2e5e2714097f4","modified":1628581041488},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"8520674768dd0b1837f947892e8402b192a4f9c1","modified":1628581041490},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"c91609b7f431cacecc3718ae2fb7403c55f8267a","modified":1628581041489},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"8549829fb7d3c21cd9e119884962e8c463a4a267","modified":1628581041491},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"a19f12257b14f70806a0c3cb0e9df1090f36e919","modified":1628581041499},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"75a5c15c7029197ec5cffd27f7c5455891c946c9","modified":1628581041490},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"3234942decaa1fde5b872766d4943a2e8cb9ef72","modified":1628581041499},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"aa0728c556af75f5d66ecd44fa207722d474c26d","modified":1628581041487},{"_id":"themes/butterfly/layout/includes/loading/loading.pug","hash":"dd8e6813976be64e80eba6562b54e74527ab306d","modified":1628581041396},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"f4d21dcbc3b00eed9b1f604e132c4c6811a0a059","modified":1628581041405},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"4eebb2d94ca75809ef0cf32d70f13e9bf1e87091","modified":1628581041405},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"a18415004d03c0a1783eccac522fbcb6ce0ea1f1","modified":1628581041406},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.md","hash":"0b7979a908ebe8c350d73b6731f0be3e29d401c2","modified":1628581041370},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"eb2d840fa42de3ec7a7fda0eaa30246d52f543e2","modified":1628581041406},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"f3db5c5e738e097a191dc0de59c61d3e1444f7c3","modified":1628581041408},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"d5f81fd5443a1b09efb165b5f4447a35949d14ad","modified":1628581041413},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"896dc0b7480151562c5717771e3000c5a7fc1b16","modified":1628581041407},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"50126b2e841b01584b8b65b2f834038e3997b694","modified":1628581041414},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"0bf6a47e804fb793b40f82690a24816b902edd41","modified":1628581041415},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"0254203aae73e70b90dfce6ec4f9c9d3be9ac9f8","modified":1628581041415},{"_id":"themes/butterfly/layout/includes/loading/loading-js.pug","hash":"2e1ab0c2ca59a1ff5a5ba9b6ef60f3e34af5430c","modified":1628581041395},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"d97403cdd58c759cfd1752dd85aa4a0f9b73dc46","modified":1628581041416},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"e877c98949873a62659db7501d19eb3d66650b51","modified":1628581041416},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"589f8503f264d4fda971c8daf2028f45c4f2867b","modified":1628581041418},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"1c7e9fe86b7d7ef18cc876dfce19263fd4e73066","modified":1628581041419},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"afffc4ac8ce93d39dcc892bd518805cf33531244","modified":1628581041418},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"8290994cf1ee2faff60214ff245cf513fbbe94aa","modified":1628581041420},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"f3f6eaecbcf9352342e259f4a5a3ad7160f31fc9","modified":1628581041408},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"e5af55cdb87d1ffd3d8702bc77097159acf95b54","modified":1628581041410},{"_id":"themes/butterfly/layout/includes/third-party/chat/gitter.pug","hash":"794ce3911f17d354b7196deb8c36d191afac63fb","modified":1628581041410},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"bb467bb22f3d0775b33f9eacbfc086ecb7831e78","modified":1628581041411},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"cd7ab4a776be93eea96a6f6fd0a547977fbe1ea3","modified":1628581041412},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"8c4e08c8a63dacdfb2a733a0d0035fa97c7f5e9e","modified":1628581041474},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"0bf1c53b914443c66be5077ff09cfc218f111e11","modified":1628581041420},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"266caf985dc0703ff81b871b8f8d206f57db6e79","modified":1628581041422},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"87e40f0c315407ab88571a2b3450d640f15c96bc","modified":1628581041423},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"0ad766ae491e6fcba2ef3d136a7af6158cd4153e","modified":1628581041425},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"2afa4c21dd19890f47fb568cfb0d90efb676a253","modified":1628581041422},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"faf1113de12d6db0486572d7e99b03cbd0c4a896","modified":1628581041423},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"16cf05cf9649322da57e9b8d316573bb65f8d8d8","modified":1628581041426},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"a3d43cc360666b5b9730e8bb9e5c8fd940ae5b3d","modified":1628581041427},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"767c38e3dfa0097b0dc1fdfd0df292c16f757d05","modified":1628581041426},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"8b4034e53ca5bf85097f681a6e76a53ce685c205","modified":1628581041432},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"83103bad0db195bce095330c4a84e7529bbd40dd","modified":1628581041428},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"fbac21a6c5924fb2f8d1190fd634105fdbc603d4","modified":1628581041433},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"8890becd8220c57db2c7451409710942c103a7f4","modified":1628581041424},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"4898a09d8e67fb358ffd74b3a1f0014f555dd856","modified":1628581041434},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"7e9a7347dd8ca4c33c564fb62512743b6012bb2d","modified":1628581041435},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"b0916c8c7d15b67b55cb1618be8370870fedbf42","modified":1628581041464},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"1c06e60b120c946c1856904848ceba6ab58d1f82","modified":1628581041430},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"fbcf94ecdca30bed7cfc4f4ec08b200579c2614e","modified":1628581041431},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"ff3727c3ec698ec61a28c55cbc8c8508f0efb0a0","modified":1628581041431},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"b74c61f6e15b422e9d2df23133552bbd1b5fe513","modified":1628581041465},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"4d71aab9082c67d3ee52ad58dfc3c1c9b41f2ab1","modified":1628581041466},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"b741b5e942481d779a8a1fe94c45154a62a6b748","modified":1628581041409},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"1309292f1c8c53d96cd7333507b106bcc24ca8fc","modified":1628581041465},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"fa2985afd08556b25f5f1a01bc1a7c76b294a962","modified":1628581041485},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"0b8aea62d1550113e1fcc237fae1b03743190208","modified":1628581041466},{"_id":"source/images/ubuntu/ubuntu-top-image.png","hash":"4e0839f7dd598e1b672c63f68a1f621ef5fd1766","modified":1628759843238},{"_id":"source/images/tripartite/AgoraRecordTestReport11.png","hash":"d6ffe805ba62ed1cc27b5351891242f2fdc3fba0","modified":1628757124146},{"_id":"source/img/home_page_background.png","hash":"000daff5290fa8c2b7ae6c02d0a6fbdf7e5a7a40","modified":1628753832541},{"_id":"public/manifest.json","hash":"8a615233e4258d03b9dfefef9dfc7bb34781d2a4","modified":1628816805266},{"_id":"public/404.html","hash":"4512eae6edfc69a97d9cbabcdd1c9bc5a3127976","modified":1628816805266},{"_id":"public/tags/index.html","hash":"bceec5f607678925152556ebfa3495f1e75e5357","modified":1628816805266},{"_id":"public/categories/index.html","hash":"6b2c90f9c4fcdc30813b8a4dc0d9064c15ecde00","modified":1628816805266},{"_id":"public/link/index.html","hash":"e8c7f24397e75942c5877f12307b556278cb83cf","modified":1628816805266},{"_id":"public/go/CompiledLanguageComputationOfMultiplication/index.html","hash":"0938f64f1be24940c85f337090f2fdb48485fee0","modified":1628816805266},{"_id":"public/go/GolangStringIntInterconversion/index.html","hash":"d0096b2dfed2bab0bc8c92efc92f07712ecdb37f","modified":1628816805266},{"_id":"public/go/Random/index.html","hash":"61896fa2df12ffc1187623242c643c6d811e954c","modified":1628816805266},{"_id":"public/go/StartGolang/index.html","hash":"16435a99c94333be201d2a72023641617cebc353","modified":1628816805266},{"_id":"public/php/DisplacementEfficiencyComparison/index.html","hash":"8d38ba0184b4509f6bafaca80ab32a136273e5d0","modified":1628816805266},{"_id":"public/index.html","hash":"cb84dc1c41ef578c8eb5fd15dfb9a41be0eb195f","modified":1628816805266},{"_id":"public/php/ExpandsPositiveIntegersByAFactorOf1000/index.html","hash":"d79fd005d15fbba9479fb74b103bfe37a4f49f0c","modified":1628816805266},{"_id":"public/archives/index.html","hash":"bd7172af1baa6876948ca430e457797a73ca2c03","modified":1628816805266},{"_id":"public/archives/2021/index.html","hash":"c044e2e0061c264939746f784a33093d11badf22","modified":1628816805266},{"_id":"public/archives/2021/08/index.html","hash":"c1dc8ba4fff46792bd7636c836911047dca12f85","modified":1628816805266},{"_id":"public/categories/Golang/index.html","hash":"d683f8b37c1de400a1a96cf5f2f585d7d8ba524a","modified":1628816805266},{"_id":"public/categories/PHP/index.html","hash":"099006f1d8b50ea92267ac257e6033f7f8fcf9ae","modified":1628816805266},{"_id":"public/tags/Golang/index.html","hash":"2cc335a4c685f5d100a2f71b677cd654164512bd","modified":1628816805266},{"_id":"public/tags/研讨/index.html","hash":"ab8ab2f3abe44356f881d145c43617688c1956bc","modified":1628816805266},{"_id":"public/tags/入门/index.html","hash":"abc1e8c118655af19efab5053cbc0b3b5a86b30c","modified":1628816805266},{"_id":"public/tags/PHP/index.html","hash":"d815efd3cd5b370e73ce7b5df1ebc6cee44a1056","modified":1628816805266},{"_id":"public/tags/算法优化/index.html","hash":"b74a50a0fa9468e4076aeeb86118511890d09fc5","modified":1628816805266},{"_id":"public/img/algolia.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1628816805266},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1628816805266},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1628816805266},{"_id":"public/img/favicon.png","hash":"2a3bc4b58ff26c14fdd61070d4c8bd666de9db14","modified":1628816805266},{"_id":"public/images/golang/CompiledLanguageComputationOfMultiplication01.png","hash":"402a8ae3357d34f807b7e5742219e610dc03504e","modified":1628816805266},{"_id":"public/images/golang/golang-top-image.jpg","hash":"1311580d3501beb3dd5c0809ba008a2c83af4041","modified":1628816805266},{"_id":"public/images/ggt-coder/project_content.png","hash":"09c542d2d1c1a71bc58ab16265298a1c880ed79c","modified":1628816805266},{"_id":"public/images/golang/CompiledLanguageComputationOfMultiplication02.png","hash":"dc33261d172a05cd49f64766cb05cf8adddcdbca","modified":1628816805266},{"_id":"public/images/php/DisplacementEfficiencyComparison01.png","hash":"79e8107d4624df187b5fc98c329f22cdc8f78809","modified":1628816805266},{"_id":"public/images/php/PhpCover.png","hash":"2346374ac2440e91214a93af17d1b3d56105788a","modified":1628816805266},{"_id":"public/images/mysql/mysql-top-image.png","hash":"c363a2722bbdff4b245945af13235153c692dabe","modified":1628816805266},{"_id":"public/images/php/DisplacementEfficiencyComparison02.png","hash":"36eb2ecf2b2dcb1f94f8442aa9f52f4e00a64b8b","modified":1628816805266},{"_id":"public/images/php/PhpExpandsPositiveIntegersByAFactorOf1000-image01.png","hash":"8bfb84d21b8c383a6bc871ecfa0ac146c2284c8a","modified":1628816805266},{"_id":"public/images/tripartite/AgoraRecordTestReport05.png","hash":"350d64668d4e61e6da5f240e6168a037a59e5bc6","modified":1628816805266},{"_id":"public/images/tripartite/AgoraRecordTestReport06.png","hash":"12e5841c2278dc31794e0e0647fc6fee908041b9","modified":1628816805266},{"_id":"public/img/avatar.jpg","hash":"1114527e4092d6e96767b79eb9fca5a10a028291","modified":1628816805266},{"_id":"public/images/ggt-coder/menu-title.png","hash":"0f56df1cbd2380132305429c5ab8d3b4accae5ce","modified":1628816805266},{"_id":"public/images/ggt-coder/module_content.png","hash":"fe49e209058da5252b8a6c5015955881dbfbbf2d","modified":1628816805266},{"_id":"public/images/laravel/laravel-top-image.png","hash":"7a75f8b09e4003ae7b72239a43f161a0b922b632","modified":1628816805266},{"_id":"public/images/golang/GolangCover.jpg","hash":"2ab6265ad7320636fd4618b7d812153479f43ea5","modified":1628816805266},{"_id":"public/images/php/php-top-image.png","hash":"d9d4efb563bd4c7a620c4a3706d9d46d96aef1e8","modified":1628816805266},{"_id":"public/images/tripartite/AgoraRecordTestReport04.png","hash":"10aa4341ce489a4d527d2a4db56eaf6a7ad292ca","modified":1628816805266},{"_id":"public/images/tripartite/AgoraRecordTestReport07.png","hash":"1a79045b3565bfdcc3f9f8af486d6dc671b0fc22","modified":1628816805266},{"_id":"public/images/tripartite/AgoraRecordTestReport08.png","hash":"5dd7ef070e76c285a3d5a5072684d9ecfd5537f5","modified":1628816805266},{"_id":"public/images/tripartite/AgoraRecordTestReport03.png","hash":"8c446c125944bb59ad1c296fde8b827f8da7c034","modified":1628816805266},{"_id":"public/images/tripartite/AgoraRecordTestReport01.png","hash":"9df7febe6c4774e4491ea4d0b72dd2be2aa786f7","modified":1628816805266},{"_id":"public/images/tripartite/AgoraRecordTestReport10.png","hash":"1f5263f6181e851a8a166bb0cf6d19d7a77dda3b","modified":1628816805266},{"_id":"public/images/tripartite/AgoraRecordTestReport12.png","hash":"a9101bb943da60c663a9b2a45ba67984327dc52b","modified":1628816805266},{"_id":"public/images/tripartite/AgoraRecordTestReport09.png","hash":"255a63c2ca9c3362a646e20f5ce12b27515d8a15","modified":1628816805266},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1628816805266},{"_id":"public/js/utils.js","hash":"8319b59c26ce8cd2b0ae7d030c4912215148fa92","modified":1628816805266},{"_id":"public/js/search/local-search.js","hash":"459e2541afda483916d16fce4aaa56b41bcd42ba","modified":1628816805266},{"_id":"public/js/search/algolia.js","hash":"65b45e61586f7e66c3f338370bfd9daadd71a4b7","modified":1628816805266},{"_id":"public/css/index.css","hash":"e25cbc3cb44fbe4db849cd4ac0395c206aa8bcc6","modified":1628816805266},{"_id":"public/images/tripartite/AgoraRecordTestReport02.png","hash":"ec9b70e7d67a6d498cb1be20096c368a2a97e0a3","modified":1628816805266},{"_id":"public/images/tripartite/AgoraRecordTestReport13.png","hash":"720e44948d2c7fc2086993e08b308158e65c88c2","modified":1628816805266},{"_id":"public/js/main.js","hash":"8ef2821ceb92d81aa0f8c02ee932f094adcafb2b","modified":1628816805266},{"_id":"public/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":1628816805266},{"_id":"public/images/tripartite/AgoraRecordTestReport14.png","hash":"5f05c160578dc29df8abd9c74f3a59d12c9a9beb","modified":1628816805266},{"_id":"public/images/tripartite/AgoraRecordTestReport15.png","hash":"62ff962a120b2300eecd9a0907316bcf06cbaa31","modified":1628816805266},{"_id":"public/images/ubuntu/ubuntu-top-image.png","hash":"4e0839f7dd598e1b672c63f68a1f621ef5fd1766","modified":1628816805266},{"_id":"public/images/tripartite/AgoraRecordTestReport11.png","hash":"d6ffe805ba62ed1cc27b5351891242f2fdc3fba0","modified":1628816805266},{"_id":"public/img/home_page_background.png","hash":"000daff5290fa8c2b7ae6c02d0a6fbdf7e5a7a40","modified":1628816805266}],"Category":[{"name":"Golang","_id":"cks8qtwro0006sku463z98y9z"},{"name":"PHP","_id":"cks8qtws1000jsku423qm75cr"}],"Data":[{"_id":"link","data":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}],"Page":[{"title":"标签","date":"2021-08-11T03:55:46.000Z","type":"tags","_content":"## 测试\n* 这里是标签页","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2021-08-11 11:55:46\ntype: \"tags\"\n---\n## 测试\n* 这里是标签页","updated":"2021-08-11T03:58:56.092Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cks8qtwre0000sku42nxb61gq","content":"<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><ul>\n<li>这里是标签页</li>\n</ul>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"/img/home_page_background.png","excerpt":"","more":"<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><ul>\n<li>这里是标签页</li>\n</ul>\n"},{"title":"友情链接","date":"2021-08-11T04:02:50.000Z","type":"link","_content":"","source":"link/index.md","raw":"---\ntitle: 友情链接\ndate: 2021-08-11 12:02:50\ntype: \"link\"\n---\n","updated":"2021-08-11T04:03:13.841Z","path":"link/index.html","comments":1,"layout":"page","_id":"cks8qtwrg0001sku4ezik1ep5","content":"","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"/img/home_page_background.png","excerpt":"","more":""},{"_content":"{\n  \"name\": \"string\",\n  \"short_name\": \"CuratorC\",\n  \"theme_color\": \"#49b1f5\",\n  \"background_color\": \"#49b1f5\",\n  \"display\": \"standalone\",\n  \"scope\": \"/\",\n  \"start_url\": \"/\",\n  \"icons\": [\n    {\n      \"src\": \"images/pwaicons/36.png\",\n      \"sizes\": \"36x36\",\n      \"type\": \"image/png\"\n    },\n    {\n      \"src\": \"images/pwaicons/48.png\",\n      \"sizes\": \"48x48\",\n      \"type\": \"image/png\"\n    },\n    {\n      \"src\": \"images/pwaicons/72.png\",\n      \"sizes\": \"72x72\",\n      \"type\": \"image/png\"\n    },\n    {\n      \"src\": \"images/pwaicons/96.png\",\n      \"sizes\": \"96x96\",\n      \"type\": \"image/png\"\n    },\n    {\n      \"src\": \"images/pwaicons/144.png\",\n      \"sizes\": \"144x144\",\n      \"type\": \"image/png\"\n    },\n    {\n      \"src\": \"images/pwaicons/192.png\",\n      \"sizes\": \"192x192\",\n      \"type\": \"image/png\"\n    },\n    {\n      \"src\": \"images/pwaicons/512.png\",\n      \"sizes\": \"512x512\",\n      \"type\": \"image/png\"\n    }\n  ],\n  \"splash_pages\": null\n}","source":"manifest.json","raw":"{\n  \"name\": \"string\",\n  \"short_name\": \"CuratorC\",\n  \"theme_color\": \"#49b1f5\",\n  \"background_color\": \"#49b1f5\",\n  \"display\": \"standalone\",\n  \"scope\": \"/\",\n  \"start_url\": \"/\",\n  \"icons\": [\n    {\n      \"src\": \"images/pwaicons/36.png\",\n      \"sizes\": \"36x36\",\n      \"type\": \"image/png\"\n    },\n    {\n      \"src\": \"images/pwaicons/48.png\",\n      \"sizes\": \"48x48\",\n      \"type\": \"image/png\"\n    },\n    {\n      \"src\": \"images/pwaicons/72.png\",\n      \"sizes\": \"72x72\",\n      \"type\": \"image/png\"\n    },\n    {\n      \"src\": \"images/pwaicons/96.png\",\n      \"sizes\": \"96x96\",\n      \"type\": \"image/png\"\n    },\n    {\n      \"src\": \"images/pwaicons/144.png\",\n      \"sizes\": \"144x144\",\n      \"type\": \"image/png\"\n    },\n    {\n      \"src\": \"images/pwaicons/192.png\",\n      \"sizes\": \"192x192\",\n      \"type\": \"image/png\"\n    },\n    {\n      \"src\": \"images/pwaicons/512.png\",\n      \"sizes\": \"512x512\",\n      \"type\": \"image/png\"\n    }\n  ],\n  \"splash_pages\": null\n}","date":"2021-08-12T05:50:23.816Z","updated":"2021-08-12T05:50:23.816Z","path":"manifest.json","layout":"false","title":"","comments":1,"_id":"cks8qtwrh0002sku48mw5espo","content":"{\"name\":\"string\",\"short_name\":\"CuratorC\",\"theme_color\":\"#49b1f5\",\"background_color\":\"#49b1f5\",\"display\":\"standalone\",\"scope\":\"/\",\"start_url\":\"/\",\"icons\":[{\"src\":\"images/pwaicons/36.png\",\"sizes\":\"36x36\",\"type\":\"image/png\"},{\"src\":\"images/pwaicons/48.png\",\"sizes\":\"48x48\",\"type\":\"image/png\"},{\"src\":\"images/pwaicons/72.png\",\"sizes\":\"72x72\",\"type\":\"image/png\"},{\"src\":\"images/pwaicons/96.png\",\"sizes\":\"96x96\",\"type\":\"image/png\"},{\"src\":\"images/pwaicons/144.png\",\"sizes\":\"144x144\",\"type\":\"image/png\"},{\"src\":\"images/pwaicons/192.png\",\"sizes\":\"192x192\",\"type\":\"image/png\"},{\"src\":\"images/pwaicons/512.png\",\"sizes\":\"512x512\",\"type\":\"image/png\"}],\"splash_pages\":null}","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"/img/home_page_background.png","excerpt":"","more":"{\"name\":\"string\",\"short_name\":\"CuratorC\",\"theme_color\":\"#49b1f5\",\"background_color\":\"#49b1f5\",\"display\":\"standalone\",\"scope\":\"/\",\"start_url\":\"/\",\"icons\":[{\"src\":\"images/pwaicons/36.png\",\"sizes\":\"36x36\",\"type\":\"image/png\"},{\"src\":\"images/pwaicons/48.png\",\"sizes\":\"48x48\",\"type\":\"image/png\"},{\"src\":\"images/pwaicons/72.png\",\"sizes\":\"72x72\",\"type\":\"image/png\"},{\"src\":\"images/pwaicons/96.png\",\"sizes\":\"96x96\",\"type\":\"image/png\"},{\"src\":\"images/pwaicons/144.png\",\"sizes\":\"144x144\",\"type\":\"image/png\"},{\"src\":\"images/pwaicons/192.png\",\"sizes\":\"192x192\",\"type\":\"image/png\"},{\"src\":\"images/pwaicons/512.png\",\"sizes\":\"512x512\",\"type\":\"image/png\"}],\"splash_pages\":null}"},{"title":"分类","date":"2021-08-11T03:58:08.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2021-08-11 11:58:08\ntype: \"categories\"\n---\n","updated":"2021-08-11T03:58:30.091Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cks8qtwrh0003sku4btq48hpw","content":"","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"/img/home_page_background.png","excerpt":"","more":""}],"Post":[{"title":"用计算证明：我远远低估了编译器","description":"当我使用 解释型语言PHP 进行验算 “如何使用PHP最高效率的将一个正整数扩大一千倍” 后却得出了相反的结论:只进行一次运算比进行两次计算要更快。 于是我猜测可能是 编译型语言 与 解释型语言 的差异导致的。围绕这个观点展开了论证。","keywords":"Golang, 编译器, 效率优化","top_img":"/images/golang/GolangCover.jpg","cover":"/images/golang/GolangCover.jpg","date":"2021-08-12T09:38:07.000Z","updated":"2021-08-12T09:38:07.000Z","_content":"# 用计算证明：我远远低估了编译器\n\n## 前情回顾\n在`将正整数扩大1000倍`的计算当中，朋友提出了计算机二进制算法理论：\n\n计算机会进行`正整数 X 512 + 正整数 X 256 + 正整数 X 128 + 正整数 X 128 + 正整数 X 64 + 正整数 X 32 + 正整数 X 8`，一直累加到凑齐 正整数的 1000 倍 为止。\n\n而运算`正整数 X 2的10次方 - ( 正整数 X 16 + 正整数 X 8) `要比那一串加号更快接近结果。\n\n但是当我使用`解释型语言PHP`进行验算 [如何使用PHP最高效率的将一个正整数扩大一千倍？](/php/PhpExpandsPositiveIntegersByAFactorOf1000) 后却得出了相反的结论:只进行一次运算比进行两次计算要更快。\n\n于是我猜测可能是`编译型语言`与`解释型语言`的差异导致的。围绕这个观点展开了论证。\n\n## 验算\n\n### 代码部分\n\n代码价值较低，为不影响阅读，置于[附录](/golang/CompiledLanguageComputationOfMultiplication#附录)\n\n### 运算结果\n\n将代码执行了数十次之后我得出了一个有些出乎意料的结论：方案三对方案二只有微乎其微的优势，甚至可以说两者的计算效率没有差距！\n\n以下贴出两个比较有代表性的结果\n\n![image01](/images/golang/CompiledLanguageComputationOfMultiplication01.png)\n\n![image02](/images/golang/CompiledLanguageComputationOfMultiplication02.png)\n\n## 修正运算\n\n### 改变计算量级\n后来我将计算量上升至`10亿次`，得出的结论也差不多。只靠这个结论我很难说服自己方案三比方案二更值得选择。但是运算结果也不合理：两者明明采取了不同的计算方案，为什么无法产生差距？\n\n与其说计算时间没有差距，不如说现有的运行时间全部都消耗在了`for`, `rand`, 和`time`上。既然如此，那么提升计算复杂度，来降低过程类计算的干扰是否会得出结果呢？\n\n### 改变计算复杂度\n我将随机数的范围取从 `999` 改为了 `9999999999` ，将乘数从 `1000` 改为了 `8,589,934,590(2的33次方减2)`同样各进行一千万次计算，在其他处理步骤不变的情况下，计算耗时被明显延长，但两种方案的计算时长依旧没能拉开差距。\n\n按照豆豆告诉我的理论，`integer * 8,589,934,590`会被解析`integer * 4,294,967,296 + integer * 2,147,483,648 ...`一直累加30多次来累计到目标乘积，而`integer * 8,589,934,592 - integer * 2`则避免了这样的运算。试验结论却不能支持这个观点。\n\n## 再次讨论\n带着这样的数据，我再次找到了豆豆。这次修行更进一步的豆豆同学嘲讽我一番后直接甩给我两篇知乎：\n- [现代C/C++编译器有多智能？能做出什么厉害的优化？ - 苏远的回答 - 知乎](https://www.zhihu.com/question/43598164/answer/96118643)\n- [现代C/C++编译器有多智能？能做出什么厉害的优化？ - 「已注销」的回答 - 知乎](https://www.zhihu.com/question/43598164/answer/142599680)\n\n## 我的理解\n两种方案的计算之所以没有产生时间差距，是因为两种写法经过编译之后，都运行了同样的算法。\n* 我：我想让编辑器做一个复杂步骤的计算，再做一个简单步骤的计算，用两种计算的耗时差距来证明计算机的算法。\n* 编译器：没想到吧崽种，我早已预判了你的预判！\n*\n要将编译器的预判囊括入我的预判，这一点`重新升格为大神的豆豆同学`也给出了方案\n\n?> 你把你博客上的代码反汇编成汇编语言，看一看，就知道为什么时间差别不大了\n\n但是编译器的算法早已经超出了蹒跚学步初学者的理解范畴。对于当前学习阶段的我而言，通过本次试验和讨论窥探一眼就好，看多了容易掉 SAN 值。日后若窥探到更多的内容，我会再写一篇博客出来，欢迎关注。\n\n\n## 附录\n### 附录代码\n\n```go\nfunc main() {\n\t// 计算次数\n\tmaxI := 10000000\n\n\tfmt.Println(\"方案1：拼接法\")\n\n\t// 随机数\n\trand.Seed(time.Now().UnixNano())\n\n\techoString := \"\"\n\n\tfor count := 0; count < 3; count++ {\n\t\t// 开始\n\t\tstart := time.Now()\n\t\techoString += \"第\" + strconv.Itoa(count + 1) + \"次:\"\n\n\t\tfor i := 0; i < maxI; i++ {\n\t\t\tinteger := rand.Intn(999)\n\t\t\t_, _ = strconv.Atoi(strconv.Itoa(integer) + \"000\")\n\t\t}\n\n\t\t// 结束\n\t\tend := time.Now()\n\n\t\tbetweenTime := float64(end.Sub(start).Nanoseconds()) / 1000000000\n\n\t\techoString += strconv.FormatFloat(betweenTime, 'f', 10, 64) + \"秒\"\n\t}\n\n\tfmt.Println(echoString)\n\techoString = \"\"\n\n\tfmt.Println(\"方案2：乘1000\")\n\tfor count := 0; count < 3; count++ {\n\t\t// 开始\n\t\tstart := time.Now()\n\t\techoString += \"第\" + strconv.Itoa(count + 1) + \"次:\"\n\n\t\tfor i := 0; i < maxI; i++ {\n\t\t\tinteger := rand.Intn(999)\n\t\t\t_ = integer * 1000\n\t\t}\n\n\t\t// 结束\n\t\tend := time.Now()\n\n\t\tbetweenTime := float64(end.Sub(start).Nanoseconds()) / 1000000000\n\n\t\techoString += strconv.FormatFloat(betweenTime, 'f', 10, 64) + \"秒\"\n\n\t}\n\n\tfmt.Println(echoString)\n\techoString = \"\"\n\n\tfmt.Println(\"方案3：乘以1024\")\n\tfor count := 0; count < 3; count++ {\n\t\t// 开始\n\t\tstart := time.Now()\n\t\techoString += \"第\" + strconv.Itoa(count + 1) + \"次:\"\n\n\t\tfor i := 0; i < maxI; i++ {\n\t\t\tinteger := rand.Intn(999)\n\t\t\t_ = (integer * 1024) - (integer * 24)\n\t\t}\n\n\t\t// 结束\n\t\tend := time.Now()\n\n\t\tbetweenTime := float64(end.Sub(start).Nanoseconds()) / 1000000000\n\n\t\techoString += strconv.FormatFloat(betweenTime, 'f', 10, 64) + \"秒\"\n\n\t}\n\n\tfmt.Println(echoString)\n\n}\n```\n","source":"_posts/go/CompiledLanguageComputationOfMultiplication.md","raw":"---\ntitle: 用计算证明：我远远低估了编译器\ndescription: 当我使用 解释型语言PHP 进行验算 “如何使用PHP最高效率的将一个正整数扩大一千倍” 后却得出了相反的结论:只进行一次运算比进行两次计算要更快。 于是我猜测可能是 编译型语言 与 解释型语言 的差异导致的。围绕这个观点展开了论证。\nkeywords: Golang, 编译器, 效率优化\ntop_img: /images/golang/GolangCover.jpg\ncover: /images/golang/GolangCover.jpg\ntags:\n  - Golang\n  - 研讨\ncategories:\n  - Golang\ndate: 2021-08-12 17:38:07\nupdated: 2021-08-12 17:38:07\n---\n# 用计算证明：我远远低估了编译器\n\n## 前情回顾\n在`将正整数扩大1000倍`的计算当中，朋友提出了计算机二进制算法理论：\n\n计算机会进行`正整数 X 512 + 正整数 X 256 + 正整数 X 128 + 正整数 X 128 + 正整数 X 64 + 正整数 X 32 + 正整数 X 8`，一直累加到凑齐 正整数的 1000 倍 为止。\n\n而运算`正整数 X 2的10次方 - ( 正整数 X 16 + 正整数 X 8) `要比那一串加号更快接近结果。\n\n但是当我使用`解释型语言PHP`进行验算 [如何使用PHP最高效率的将一个正整数扩大一千倍？](/php/PhpExpandsPositiveIntegersByAFactorOf1000) 后却得出了相反的结论:只进行一次运算比进行两次计算要更快。\n\n于是我猜测可能是`编译型语言`与`解释型语言`的差异导致的。围绕这个观点展开了论证。\n\n## 验算\n\n### 代码部分\n\n代码价值较低，为不影响阅读，置于[附录](/golang/CompiledLanguageComputationOfMultiplication#附录)\n\n### 运算结果\n\n将代码执行了数十次之后我得出了一个有些出乎意料的结论：方案三对方案二只有微乎其微的优势，甚至可以说两者的计算效率没有差距！\n\n以下贴出两个比较有代表性的结果\n\n![image01](/images/golang/CompiledLanguageComputationOfMultiplication01.png)\n\n![image02](/images/golang/CompiledLanguageComputationOfMultiplication02.png)\n\n## 修正运算\n\n### 改变计算量级\n后来我将计算量上升至`10亿次`，得出的结论也差不多。只靠这个结论我很难说服自己方案三比方案二更值得选择。但是运算结果也不合理：两者明明采取了不同的计算方案，为什么无法产生差距？\n\n与其说计算时间没有差距，不如说现有的运行时间全部都消耗在了`for`, `rand`, 和`time`上。既然如此，那么提升计算复杂度，来降低过程类计算的干扰是否会得出结果呢？\n\n### 改变计算复杂度\n我将随机数的范围取从 `999` 改为了 `9999999999` ，将乘数从 `1000` 改为了 `8,589,934,590(2的33次方减2)`同样各进行一千万次计算，在其他处理步骤不变的情况下，计算耗时被明显延长，但两种方案的计算时长依旧没能拉开差距。\n\n按照豆豆告诉我的理论，`integer * 8,589,934,590`会被解析`integer * 4,294,967,296 + integer * 2,147,483,648 ...`一直累加30多次来累计到目标乘积，而`integer * 8,589,934,592 - integer * 2`则避免了这样的运算。试验结论却不能支持这个观点。\n\n## 再次讨论\n带着这样的数据，我再次找到了豆豆。这次修行更进一步的豆豆同学嘲讽我一番后直接甩给我两篇知乎：\n- [现代C/C++编译器有多智能？能做出什么厉害的优化？ - 苏远的回答 - 知乎](https://www.zhihu.com/question/43598164/answer/96118643)\n- [现代C/C++编译器有多智能？能做出什么厉害的优化？ - 「已注销」的回答 - 知乎](https://www.zhihu.com/question/43598164/answer/142599680)\n\n## 我的理解\n两种方案的计算之所以没有产生时间差距，是因为两种写法经过编译之后，都运行了同样的算法。\n* 我：我想让编辑器做一个复杂步骤的计算，再做一个简单步骤的计算，用两种计算的耗时差距来证明计算机的算法。\n* 编译器：没想到吧崽种，我早已预判了你的预判！\n*\n要将编译器的预判囊括入我的预判，这一点`重新升格为大神的豆豆同学`也给出了方案\n\n?> 你把你博客上的代码反汇编成汇编语言，看一看，就知道为什么时间差别不大了\n\n但是编译器的算法早已经超出了蹒跚学步初学者的理解范畴。对于当前学习阶段的我而言，通过本次试验和讨论窥探一眼就好，看多了容易掉 SAN 值。日后若窥探到更多的内容，我会再写一篇博客出来，欢迎关注。\n\n\n## 附录\n### 附录代码\n\n```go\nfunc main() {\n\t// 计算次数\n\tmaxI := 10000000\n\n\tfmt.Println(\"方案1：拼接法\")\n\n\t// 随机数\n\trand.Seed(time.Now().UnixNano())\n\n\techoString := \"\"\n\n\tfor count := 0; count < 3; count++ {\n\t\t// 开始\n\t\tstart := time.Now()\n\t\techoString += \"第\" + strconv.Itoa(count + 1) + \"次:\"\n\n\t\tfor i := 0; i < maxI; i++ {\n\t\t\tinteger := rand.Intn(999)\n\t\t\t_, _ = strconv.Atoi(strconv.Itoa(integer) + \"000\")\n\t\t}\n\n\t\t// 结束\n\t\tend := time.Now()\n\n\t\tbetweenTime := float64(end.Sub(start).Nanoseconds()) / 1000000000\n\n\t\techoString += strconv.FormatFloat(betweenTime, 'f', 10, 64) + \"秒\"\n\t}\n\n\tfmt.Println(echoString)\n\techoString = \"\"\n\n\tfmt.Println(\"方案2：乘1000\")\n\tfor count := 0; count < 3; count++ {\n\t\t// 开始\n\t\tstart := time.Now()\n\t\techoString += \"第\" + strconv.Itoa(count + 1) + \"次:\"\n\n\t\tfor i := 0; i < maxI; i++ {\n\t\t\tinteger := rand.Intn(999)\n\t\t\t_ = integer * 1000\n\t\t}\n\n\t\t// 结束\n\t\tend := time.Now()\n\n\t\tbetweenTime := float64(end.Sub(start).Nanoseconds()) / 1000000000\n\n\t\techoString += strconv.FormatFloat(betweenTime, 'f', 10, 64) + \"秒\"\n\n\t}\n\n\tfmt.Println(echoString)\n\techoString = \"\"\n\n\tfmt.Println(\"方案3：乘以1024\")\n\tfor count := 0; count < 3; count++ {\n\t\t// 开始\n\t\tstart := time.Now()\n\t\techoString += \"第\" + strconv.Itoa(count + 1) + \"次:\"\n\n\t\tfor i := 0; i < maxI; i++ {\n\t\t\tinteger := rand.Intn(999)\n\t\t\t_ = (integer * 1024) - (integer * 24)\n\t\t}\n\n\t\t// 结束\n\t\tend := time.Now()\n\n\t\tbetweenTime := float64(end.Sub(start).Nanoseconds()) / 1000000000\n\n\t\techoString += strconv.FormatFloat(betweenTime, 'f', 10, 64) + \"秒\"\n\n\t}\n\n\tfmt.Println(echoString)\n\n}\n```\n","slug":"go/CompiledLanguageComputationOfMultiplication","published":1,"_id":"cks8qtwrk0004sku48dht9yb0","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"用计算证明：我远远低估了编译器\"><a href=\"#用计算证明：我远远低估了编译器\" class=\"headerlink\" title=\"用计算证明：我远远低估了编译器\"></a>用计算证明：我远远低估了编译器</h1><h2 id=\"前情回顾\"><a href=\"#前情回顾\" class=\"headerlink\" title=\"前情回顾\"></a>前情回顾</h2><p>在<code>将正整数扩大1000倍</code>的计算当中，朋友提出了计算机二进制算法理论：</p>\n<p>计算机会进行<code>正整数 X 512 + 正整数 X 256 + 正整数 X 128 + 正整数 X 128 + 正整数 X 64 + 正整数 X 32 + 正整数 X 8</code>，一直累加到凑齐 正整数的 1000 倍 为止。</p>\n<p>而运算<code>正整数 X 2的10次方 - ( 正整数 X 16 + 正整数 X 8) </code>要比那一串加号更快接近结果。</p>\n<p>但是当我使用<code>解释型语言PHP</code>进行验算 <a href=\"/php/PhpExpandsPositiveIntegersByAFactorOf1000\">如何使用PHP最高效率的将一个正整数扩大一千倍？</a> 后却得出了相反的结论:只进行一次运算比进行两次计算要更快。</p>\n<p>于是我猜测可能是<code>编译型语言</code>与<code>解释型语言</code>的差异导致的。围绕这个观点展开了论证。</p>\n<h2 id=\"验算\"><a href=\"#验算\" class=\"headerlink\" title=\"验算\"></a>验算</h2><h3 id=\"代码部分\"><a href=\"#代码部分\" class=\"headerlink\" title=\"代码部分\"></a>代码部分</h3><p>代码价值较低，为不影响阅读，置于<a href=\"/golang/CompiledLanguageComputationOfMultiplication#%E9%99%84%E5%BD%95\">附录</a></p>\n<h3 id=\"运算结果\"><a href=\"#运算结果\" class=\"headerlink\" title=\"运算结果\"></a>运算结果</h3><p>将代码执行了数十次之后我得出了一个有些出乎意料的结论：方案三对方案二只有微乎其微的优势，甚至可以说两者的计算效率没有差距！</p>\n<p>以下贴出两个比较有代表性的结果</p>\n<p><img src=\"/images/golang/CompiledLanguageComputationOfMultiplication01.png\" alt=\"image01\"></p>\n<p><img src=\"/images/golang/CompiledLanguageComputationOfMultiplication02.png\" alt=\"image02\"></p>\n<h2 id=\"修正运算\"><a href=\"#修正运算\" class=\"headerlink\" title=\"修正运算\"></a>修正运算</h2><h3 id=\"改变计算量级\"><a href=\"#改变计算量级\" class=\"headerlink\" title=\"改变计算量级\"></a>改变计算量级</h3><p>后来我将计算量上升至<code>10亿次</code>，得出的结论也差不多。只靠这个结论我很难说服自己方案三比方案二更值得选择。但是运算结果也不合理：两者明明采取了不同的计算方案，为什么无法产生差距？</p>\n<p>与其说计算时间没有差距，不如说现有的运行时间全部都消耗在了<code>for</code>, <code>rand</code>, 和<code>time</code>上。既然如此，那么提升计算复杂度，来降低过程类计算的干扰是否会得出结果呢？</p>\n<h3 id=\"改变计算复杂度\"><a href=\"#改变计算复杂度\" class=\"headerlink\" title=\"改变计算复杂度\"></a>改变计算复杂度</h3><p>我将随机数的范围取从 <code>999</code> 改为了 <code>9999999999</code> ，将乘数从 <code>1000</code> 改为了 <code>8,589,934,590(2的33次方减2)</code>同样各进行一千万次计算，在其他处理步骤不变的情况下，计算耗时被明显延长，但两种方案的计算时长依旧没能拉开差距。</p>\n<p>按照豆豆告诉我的理论，<code>integer * 8,589,934,590</code>会被解析<code>integer * 4,294,967,296 + integer * 2,147,483,648 ...</code>一直累加30多次来累计到目标乘积，而<code>integer * 8,589,934,592 - integer * 2</code>则避免了这样的运算。试验结论却不能支持这个观点。</p>\n<h2 id=\"再次讨论\"><a href=\"#再次讨论\" class=\"headerlink\" title=\"再次讨论\"></a>再次讨论</h2><p>带着这样的数据，我再次找到了豆豆。这次修行更进一步的豆豆同学嘲讽我一番后直接甩给我两篇知乎：</p>\n<ul>\n<li><a href=\"https://www.zhihu.com/question/43598164/answer/96118643\">现代C/C++编译器有多智能？能做出什么厉害的优化？ - 苏远的回答 - 知乎</a></li>\n<li><a href=\"https://www.zhihu.com/question/43598164/answer/142599680\">现代C/C++编译器有多智能？能做出什么厉害的优化？ - 「已注销」的回答 - 知乎</a></li>\n</ul>\n<h2 id=\"我的理解\"><a href=\"#我的理解\" class=\"headerlink\" title=\"我的理解\"></a>我的理解</h2><p>两种方案的计算之所以没有产生时间差距，是因为两种写法经过编译之后，都运行了同样的算法。</p>\n<ul>\n<li>我：我想让编辑器做一个复杂步骤的计算，再做一个简单步骤的计算，用两种计算的耗时差距来证明计算机的算法。</li>\n<li>编译器：没想到吧崽种，我早已预判了你的预判！</li>\n<li>要将编译器的预判囊括入我的预判，这一点<code>重新升格为大神的豆豆同学</code>也给出了方案</li>\n</ul>\n<p>?&gt; 你把你博客上的代码反汇编成汇编语言，看一看，就知道为什么时间差别不大了</p>\n<p>但是编译器的算法早已经超出了蹒跚学步初学者的理解范畴。对于当前学习阶段的我而言，通过本次试验和讨论窥探一眼就好，看多了容易掉 SAN 值。日后若窥探到更多的内容，我会再写一篇博客出来，欢迎关注。</p>\n<h2 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h2><h3 id=\"附录代码\"><a href=\"#附录代码\" class=\"headerlink\" title=\"附录代码\"></a>附录代码</h3><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 计算次数</span></span><br><span class=\"line\">\tmaxI := <span class=\"number\">10000000</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;方案1：拼接法&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 随机数</span></span><br><span class=\"line\">\trand.Seed(time.Now().UnixNano())</span><br><span class=\"line\"></span><br><span class=\"line\">\techoString := <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> count := <span class=\"number\">0</span>; count &lt; <span class=\"number\">3</span>; count++ &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 开始</span></span><br><span class=\"line\">\t\tstart := time.Now()</span><br><span class=\"line\">\t\techoString += <span class=\"string\">&quot;第&quot;</span> + strconv.Itoa(count + <span class=\"number\">1</span>) + <span class=\"string\">&quot;次:&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; maxI; i++ &#123;</span><br><span class=\"line\">\t\t\tinteger := rand.Intn(<span class=\"number\">999</span>)</span><br><span class=\"line\">\t\t\t_, _ = strconv.Atoi(strconv.Itoa(integer) + <span class=\"string\">&quot;000&quot;</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 结束</span></span><br><span class=\"line\">\t\tend := time.Now()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tbetweenTime := <span class=\"keyword\">float64</span>(end.Sub(start).Nanoseconds()) / <span class=\"number\">1000000000</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\techoString += strconv.FormatFloat(betweenTime, <span class=\"string\">&#x27;f&#x27;</span>, <span class=\"number\">10</span>, <span class=\"number\">64</span>) + <span class=\"string\">&quot;秒&quot;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(echoString)</span><br><span class=\"line\">\techoString = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;方案2：乘1000&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> count := <span class=\"number\">0</span>; count &lt; <span class=\"number\">3</span>; count++ &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 开始</span></span><br><span class=\"line\">\t\tstart := time.Now()</span><br><span class=\"line\">\t\techoString += <span class=\"string\">&quot;第&quot;</span> + strconv.Itoa(count + <span class=\"number\">1</span>) + <span class=\"string\">&quot;次:&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; maxI; i++ &#123;</span><br><span class=\"line\">\t\t\tinteger := rand.Intn(<span class=\"number\">999</span>)</span><br><span class=\"line\">\t\t\t_ = integer * <span class=\"number\">1000</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 结束</span></span><br><span class=\"line\">\t\tend := time.Now()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tbetweenTime := <span class=\"keyword\">float64</span>(end.Sub(start).Nanoseconds()) / <span class=\"number\">1000000000</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\techoString += strconv.FormatFloat(betweenTime, <span class=\"string\">&#x27;f&#x27;</span>, <span class=\"number\">10</span>, <span class=\"number\">64</span>) + <span class=\"string\">&quot;秒&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(echoString)</span><br><span class=\"line\">\techoString = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;方案3：乘以1024&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> count := <span class=\"number\">0</span>; count &lt; <span class=\"number\">3</span>; count++ &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 开始</span></span><br><span class=\"line\">\t\tstart := time.Now()</span><br><span class=\"line\">\t\techoString += <span class=\"string\">&quot;第&quot;</span> + strconv.Itoa(count + <span class=\"number\">1</span>) + <span class=\"string\">&quot;次:&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; maxI; i++ &#123;</span><br><span class=\"line\">\t\t\tinteger := rand.Intn(<span class=\"number\">999</span>)</span><br><span class=\"line\">\t\t\t_ = (integer * <span class=\"number\">1024</span>) - (integer * <span class=\"number\">24</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 结束</span></span><br><span class=\"line\">\t\tend := time.Now()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tbetweenTime := <span class=\"keyword\">float64</span>(end.Sub(start).Nanoseconds()) / <span class=\"number\">1000000000</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\techoString += strconv.FormatFloat(betweenTime, <span class=\"string\">&#x27;f&#x27;</span>, <span class=\"number\">10</span>, <span class=\"number\">64</span>) + <span class=\"string\">&quot;秒&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(echoString)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<h1 id=\"用计算证明：我远远低估了编译器\"><a href=\"#用计算证明：我远远低估了编译器\" class=\"headerlink\" title=\"用计算证明：我远远低估了编译器\"></a>用计算证明：我远远低估了编译器</h1><h2 id=\"前情回顾\"><a href=\"#前情回顾\" class=\"headerlink\" title=\"前情回顾\"></a>前情回顾</h2><p>在<code>将正整数扩大1000倍</code>的计算当中，朋友提出了计算机二进制算法理论：</p>\n<p>计算机会进行<code>正整数 X 512 + 正整数 X 256 + 正整数 X 128 + 正整数 X 128 + 正整数 X 64 + 正整数 X 32 + 正整数 X 8</code>，一直累加到凑齐 正整数的 1000 倍 为止。</p>\n<p>而运算<code>正整数 X 2的10次方 - ( 正整数 X 16 + 正整数 X 8) </code>要比那一串加号更快接近结果。</p>\n<p>但是当我使用<code>解释型语言PHP</code>进行验算 <a href=\"/php/PhpExpandsPositiveIntegersByAFactorOf1000\">如何使用PHP最高效率的将一个正整数扩大一千倍？</a> 后却得出了相反的结论:只进行一次运算比进行两次计算要更快。</p>\n<p>于是我猜测可能是<code>编译型语言</code>与<code>解释型语言</code>的差异导致的。围绕这个观点展开了论证。</p>\n<h2 id=\"验算\"><a href=\"#验算\" class=\"headerlink\" title=\"验算\"></a>验算</h2><h3 id=\"代码部分\"><a href=\"#代码部分\" class=\"headerlink\" title=\"代码部分\"></a>代码部分</h3><p>代码价值较低，为不影响阅读，置于<a href=\"/golang/CompiledLanguageComputationOfMultiplication#%E9%99%84%E5%BD%95\">附录</a></p>\n<h3 id=\"运算结果\"><a href=\"#运算结果\" class=\"headerlink\" title=\"运算结果\"></a>运算结果</h3><p>将代码执行了数十次之后我得出了一个有些出乎意料的结论：方案三对方案二只有微乎其微的优势，甚至可以说两者的计算效率没有差距！</p>\n<p>以下贴出两个比较有代表性的结果</p>\n<p><img src=\"/images/golang/CompiledLanguageComputationOfMultiplication01.png\" alt=\"image01\"></p>\n<p><img src=\"/images/golang/CompiledLanguageComputationOfMultiplication02.png\" alt=\"image02\"></p>\n<h2 id=\"修正运算\"><a href=\"#修正运算\" class=\"headerlink\" title=\"修正运算\"></a>修正运算</h2><h3 id=\"改变计算量级\"><a href=\"#改变计算量级\" class=\"headerlink\" title=\"改变计算量级\"></a>改变计算量级</h3><p>后来我将计算量上升至<code>10亿次</code>，得出的结论也差不多。只靠这个结论我很难说服自己方案三比方案二更值得选择。但是运算结果也不合理：两者明明采取了不同的计算方案，为什么无法产生差距？</p>\n<p>与其说计算时间没有差距，不如说现有的运行时间全部都消耗在了<code>for</code>, <code>rand</code>, 和<code>time</code>上。既然如此，那么提升计算复杂度，来降低过程类计算的干扰是否会得出结果呢？</p>\n<h3 id=\"改变计算复杂度\"><a href=\"#改变计算复杂度\" class=\"headerlink\" title=\"改变计算复杂度\"></a>改变计算复杂度</h3><p>我将随机数的范围取从 <code>999</code> 改为了 <code>9999999999</code> ，将乘数从 <code>1000</code> 改为了 <code>8,589,934,590(2的33次方减2)</code>同样各进行一千万次计算，在其他处理步骤不变的情况下，计算耗时被明显延长，但两种方案的计算时长依旧没能拉开差距。</p>\n<p>按照豆豆告诉我的理论，<code>integer * 8,589,934,590</code>会被解析<code>integer * 4,294,967,296 + integer * 2,147,483,648 ...</code>一直累加30多次来累计到目标乘积，而<code>integer * 8,589,934,592 - integer * 2</code>则避免了这样的运算。试验结论却不能支持这个观点。</p>\n<h2 id=\"再次讨论\"><a href=\"#再次讨论\" class=\"headerlink\" title=\"再次讨论\"></a>再次讨论</h2><p>带着这样的数据，我再次找到了豆豆。这次修行更进一步的豆豆同学嘲讽我一番后直接甩给我两篇知乎：</p>\n<ul>\n<li><a href=\"https://www.zhihu.com/question/43598164/answer/96118643\">现代C/C++编译器有多智能？能做出什么厉害的优化？ - 苏远的回答 - 知乎</a></li>\n<li><a href=\"https://www.zhihu.com/question/43598164/answer/142599680\">现代C/C++编译器有多智能？能做出什么厉害的优化？ - 「已注销」的回答 - 知乎</a></li>\n</ul>\n<h2 id=\"我的理解\"><a href=\"#我的理解\" class=\"headerlink\" title=\"我的理解\"></a>我的理解</h2><p>两种方案的计算之所以没有产生时间差距，是因为两种写法经过编译之后，都运行了同样的算法。</p>\n<ul>\n<li>我：我想让编辑器做一个复杂步骤的计算，再做一个简单步骤的计算，用两种计算的耗时差距来证明计算机的算法。</li>\n<li>编译器：没想到吧崽种，我早已预判了你的预判！</li>\n<li>要将编译器的预判囊括入我的预判，这一点<code>重新升格为大神的豆豆同学</code>也给出了方案</li>\n</ul>\n<p>?&gt; 你把你博客上的代码反汇编成汇编语言，看一看，就知道为什么时间差别不大了</p>\n<p>但是编译器的算法早已经超出了蹒跚学步初学者的理解范畴。对于当前学习阶段的我而言，通过本次试验和讨论窥探一眼就好，看多了容易掉 SAN 值。日后若窥探到更多的内容，我会再写一篇博客出来，欢迎关注。</p>\n<h2 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h2><h3 id=\"附录代码\"><a href=\"#附录代码\" class=\"headerlink\" title=\"附录代码\"></a>附录代码</h3><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 计算次数</span></span><br><span class=\"line\">\tmaxI := <span class=\"number\">10000000</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;方案1：拼接法&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 随机数</span></span><br><span class=\"line\">\trand.Seed(time.Now().UnixNano())</span><br><span class=\"line\"></span><br><span class=\"line\">\techoString := <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> count := <span class=\"number\">0</span>; count &lt; <span class=\"number\">3</span>; count++ &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 开始</span></span><br><span class=\"line\">\t\tstart := time.Now()</span><br><span class=\"line\">\t\techoString += <span class=\"string\">&quot;第&quot;</span> + strconv.Itoa(count + <span class=\"number\">1</span>) + <span class=\"string\">&quot;次:&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; maxI; i++ &#123;</span><br><span class=\"line\">\t\t\tinteger := rand.Intn(<span class=\"number\">999</span>)</span><br><span class=\"line\">\t\t\t_, _ = strconv.Atoi(strconv.Itoa(integer) + <span class=\"string\">&quot;000&quot;</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 结束</span></span><br><span class=\"line\">\t\tend := time.Now()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tbetweenTime := <span class=\"keyword\">float64</span>(end.Sub(start).Nanoseconds()) / <span class=\"number\">1000000000</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\techoString += strconv.FormatFloat(betweenTime, <span class=\"string\">&#x27;f&#x27;</span>, <span class=\"number\">10</span>, <span class=\"number\">64</span>) + <span class=\"string\">&quot;秒&quot;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(echoString)</span><br><span class=\"line\">\techoString = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;方案2：乘1000&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> count := <span class=\"number\">0</span>; count &lt; <span class=\"number\">3</span>; count++ &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 开始</span></span><br><span class=\"line\">\t\tstart := time.Now()</span><br><span class=\"line\">\t\techoString += <span class=\"string\">&quot;第&quot;</span> + strconv.Itoa(count + <span class=\"number\">1</span>) + <span class=\"string\">&quot;次:&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; maxI; i++ &#123;</span><br><span class=\"line\">\t\t\tinteger := rand.Intn(<span class=\"number\">999</span>)</span><br><span class=\"line\">\t\t\t_ = integer * <span class=\"number\">1000</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 结束</span></span><br><span class=\"line\">\t\tend := time.Now()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tbetweenTime := <span class=\"keyword\">float64</span>(end.Sub(start).Nanoseconds()) / <span class=\"number\">1000000000</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\techoString += strconv.FormatFloat(betweenTime, <span class=\"string\">&#x27;f&#x27;</span>, <span class=\"number\">10</span>, <span class=\"number\">64</span>) + <span class=\"string\">&quot;秒&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(echoString)</span><br><span class=\"line\">\techoString = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;方案3：乘以1024&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> count := <span class=\"number\">0</span>; count &lt; <span class=\"number\">3</span>; count++ &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 开始</span></span><br><span class=\"line\">\t\tstart := time.Now()</span><br><span class=\"line\">\t\techoString += <span class=\"string\">&quot;第&quot;</span> + strconv.Itoa(count + <span class=\"number\">1</span>) + <span class=\"string\">&quot;次:&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; maxI; i++ &#123;</span><br><span class=\"line\">\t\t\tinteger := rand.Intn(<span class=\"number\">999</span>)</span><br><span class=\"line\">\t\t\t_ = (integer * <span class=\"number\">1024</span>) - (integer * <span class=\"number\">24</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 结束</span></span><br><span class=\"line\">\t\tend := time.Now()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tbetweenTime := <span class=\"keyword\">float64</span>(end.Sub(start).Nanoseconds()) / <span class=\"number\">1000000000</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\techoString += strconv.FormatFloat(betweenTime, <span class=\"string\">&#x27;f&#x27;</span>, <span class=\"number\">10</span>, <span class=\"number\">64</span>) + <span class=\"string\">&quot;秒&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(echoString)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Start Golang","description":"下载并安装 Golang","keywords":"Golang, 下载, 安装","top_img":"/images/golang/GolangCover.jpg","cover":"/images/golang/GolangCover.jpg","date":"2021-08-12T08:49:48.000Z","updated":"2021-08-12T08:49:48.000Z","_content":"# Start Golang\n\n## 安装 Go\n\n### 下载 Golang\n* 下载地址 [https://golang.google.cn/dl/](https://golang.google.cn/dl/)\n* 当前版本 go1.16.5\n\n### 设置 Go Module\n* 查看 Go 环境变量\n  ```bash\n  go env\n  ```\n* 开启 Go Module\n  ```bash\n  go env -w GO111MODULE=on\n  ```\n* 开启GOPROXY\n  ```bash\n  go env -w GO111MODULE=on\n  ```\n* 安装 Go 文档\n  ```bash\n  go get golang.org/x/tools/cmd/godoc\n  ```","source":"_posts/go/StartGolang.md","raw":"---\ntitle: Start Golang\ndescription: 下载并安装 Golang\nkeywords: Golang, 下载, 安装\ntop_img: /images/golang/GolangCover.jpg\ncover: /images/golang/GolangCover.jpg\ntags:\n  - Golang\n  - 入门\ncategories:\n  - Golang\ndate: 2021-08-12 16:49:48\nupdated: 2021-08-12 16:49:48\n---\n# Start Golang\n\n## 安装 Go\n\n### 下载 Golang\n* 下载地址 [https://golang.google.cn/dl/](https://golang.google.cn/dl/)\n* 当前版本 go1.16.5\n\n### 设置 Go Module\n* 查看 Go 环境变量\n  ```bash\n  go env\n  ```\n* 开启 Go Module\n  ```bash\n  go env -w GO111MODULE=on\n  ```\n* 开启GOPROXY\n  ```bash\n  go env -w GO111MODULE=on\n  ```\n* 安装 Go 文档\n  ```bash\n  go get golang.org/x/tools/cmd/godoc\n  ```","slug":"go/StartGolang","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cks8qtwrn0005sku4gela99f5","content":"<h1 id=\"Start-Golang\"><a href=\"#Start-Golang\" class=\"headerlink\" title=\"Start Golang\"></a>Start Golang</h1><h2 id=\"安装-Go\"><a href=\"#安装-Go\" class=\"headerlink\" title=\"安装 Go\"></a>安装 Go</h2><h3 id=\"下载-Golang\"><a href=\"#下载-Golang\" class=\"headerlink\" title=\"下载 Golang\"></a>下载 Golang</h3><ul>\n<li>下载地址 <a href=\"https://golang.google.cn/dl/\">https://golang.google.cn/dl/</a></li>\n<li>当前版本 go1.16.5</li>\n</ul>\n<h3 id=\"设置-Go-Module\"><a href=\"#设置-Go-Module\" class=\"headerlink\" title=\"设置 Go Module\"></a>设置 Go Module</h3><ul>\n<li>查看 Go 环境变量<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">go env</span><br></pre></td></tr></table></figure></li>\n<li>开启 Go Module<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">go env -w GO111MODULE=on</span><br></pre></td></tr></table></figure></li>\n<li>开启GOPROXY<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">go env -w GO111MODULE=on</span><br></pre></td></tr></table></figure></li>\n<li>安装 Go 文档<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">go get golang.org/x/tools/cmd/godoc</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<h1 id=\"Start-Golang\"><a href=\"#Start-Golang\" class=\"headerlink\" title=\"Start Golang\"></a>Start Golang</h1><h2 id=\"安装-Go\"><a href=\"#安装-Go\" class=\"headerlink\" title=\"安装 Go\"></a>安装 Go</h2><h3 id=\"下载-Golang\"><a href=\"#下载-Golang\" class=\"headerlink\" title=\"下载 Golang\"></a>下载 Golang</h3><ul>\n<li>下载地址 <a href=\"https://golang.google.cn/dl/\">https://golang.google.cn/dl/</a></li>\n<li>当前版本 go1.16.5</li>\n</ul>\n<h3 id=\"设置-Go-Module\"><a href=\"#设置-Go-Module\" class=\"headerlink\" title=\"设置 Go Module\"></a>设置 Go Module</h3><ul>\n<li>查看 Go 环境变量<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">go env</span><br></pre></td></tr></table></figure></li>\n<li>开启 Go Module<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">go env -w GO111MODULE=on</span><br></pre></td></tr></table></figure></li>\n<li>开启GOPROXY<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">go env -w GO111MODULE=on</span><br></pre></td></tr></table></figure></li>\n<li>安装 Go 文档<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">go get golang.org/x/tools/cmd/godoc</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"Golang中字符串和各种int类型之间的相互转换方式","description":"Golang中字符串和各种int类型之间的相互转换方式","keywords":"Golang, int, string, 格式转换","top_img":"/images/golang/GolangCover.jpg","cover":"/images/golang/GolangCover.jpg","date":"2021-08-12T09:35:09.000Z","updated":"2021-08-12T09:35:09.000Z","_content":"# Golang中字符串和各种int类型之间的相互转换方式：\n\n## string转成int：\n```go\nint, err := strconv.Atoi(string)\n```\n\n## string转成int64：\n```go\nint64, err := strconv.ParseInt(string, 10, 64)\n```\n\n## int转成string：\n```go\nstring := strconv.Itoa(int)\n```\n\n## int64转成string：\n```go\nstring := strconv.FormatInt(int64,10)\n```\n","source":"_posts/go/GolangStringIntInterconversion.md","raw":"---\ntitle: Golang中字符串和各种int类型之间的相互转换方式\ndescription: Golang中字符串和各种int类型之间的相互转换方式\nkeywords: Golang, int, string, 格式转换\ntop_img: /images/golang/GolangCover.jpg\ncover: /images/golang/GolangCover.jpg\ntags:\n  - Golang\n  - 入门\ncategories:\n  - Golang\ndate: 2021-08-12 17:35:09\nupdated: 2021-08-12 17:35:09\n---\n# Golang中字符串和各种int类型之间的相互转换方式：\n\n## string转成int：\n```go\nint, err := strconv.Atoi(string)\n```\n\n## string转成int64：\n```go\nint64, err := strconv.ParseInt(string, 10, 64)\n```\n\n## int转成string：\n```go\nstring := strconv.Itoa(int)\n```\n\n## int64转成string：\n```go\nstring := strconv.FormatInt(int64,10)\n```\n","slug":"go/GolangStringIntInterconversion","published":1,"_id":"cks8qtwrq0008sku4fx8313vd","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Golang中字符串和各种int类型之间的相互转换方式：\"><a href=\"#Golang中字符串和各种int类型之间的相互转换方式：\" class=\"headerlink\" title=\"Golang中字符串和各种int类型之间的相互转换方式：\"></a>Golang中字符串和各种int类型之间的相互转换方式：</h1><h2 id=\"string转成int：\"><a href=\"#string转成int：\" class=\"headerlink\" title=\"string转成int：\"></a>string转成int：</h2><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>, err := strconv.Atoi(<span class=\"keyword\">string</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"string转成int64：\"><a href=\"#string转成int64：\" class=\"headerlink\" title=\"string转成int64：\"></a>string转成int64：</h2><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int64</span>, err := strconv.ParseInt(<span class=\"keyword\">string</span>, <span class=\"number\">10</span>, <span class=\"number\">64</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"int转成string：\"><a href=\"#int转成string：\" class=\"headerlink\" title=\"int转成string：\"></a>int转成string：</h2><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">string</span> := strconv.Itoa(<span class=\"keyword\">int</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"int64转成string：\"><a href=\"#int64转成string：\" class=\"headerlink\" title=\"int64转成string：\"></a>int64转成string：</h2><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">string</span> := strconv.FormatInt(<span class=\"keyword\">int64</span>,<span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<h1 id=\"Golang中字符串和各种int类型之间的相互转换方式：\"><a href=\"#Golang中字符串和各种int类型之间的相互转换方式：\" class=\"headerlink\" title=\"Golang中字符串和各种int类型之间的相互转换方式：\"></a>Golang中字符串和各种int类型之间的相互转换方式：</h1><h2 id=\"string转成int：\"><a href=\"#string转成int：\" class=\"headerlink\" title=\"string转成int：\"></a>string转成int：</h2><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>, err := strconv.Atoi(<span class=\"keyword\">string</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"string转成int64：\"><a href=\"#string转成int64：\" class=\"headerlink\" title=\"string转成int64：\"></a>string转成int64：</h2><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int64</span>, err := strconv.ParseInt(<span class=\"keyword\">string</span>, <span class=\"number\">10</span>, <span class=\"number\">64</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"int转成string：\"><a href=\"#int转成string：\" class=\"headerlink\" title=\"int转成string：\"></a>int转成string：</h2><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">string</span> := strconv.Itoa(<span class=\"keyword\">int</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"int64转成string：\"><a href=\"#int64转成string：\" class=\"headerlink\" title=\"int64转成string：\"></a>int64转成string：</h2><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">string</span> := strconv.FormatInt(<span class=\"keyword\">int64</span>,<span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure>\n"},{"title":"GO 生成随机数","description":"随机数，是使用一个确定性的算法计算出来随机数序。在程序开发中经常需要产生随机数，如随机数验证码登陆、作为唯一身份标识数据等等。Go 中生成随机数的有两个包,分别是 math/rand 和 crypto/rand","keywords":"Golang, 随机数, Random","top_img":"/images/golang/GolangCover.jpg","cover":"/images/golang/GolangCover.jpg","date":"2021-08-12T09:31:03.000Z","updated":"2021-08-12T09:31:03.000Z","_content":"\n# GO 生成随机数\n\n## 什么是随机数\n\n随机数，是使用一个确定性的算法计算出来随机数序。在程序开发中经常需要产生随机数，如随机数验证码登陆、作为唯一身份标识数据等等。\n\n### GO中生成随机数的包\nGo 中生成随机数的有两个包,分别是`math/rand`和`crypto/rand`\n* `math/rand`实现了伪随机数生成器\n* `crypto/rand`实现了用于加解密的跟安全的随机数生成器,当然,性能也就降下来了,毕竟鱼与熊掌不可兼得\n\n## 随机数生成\n\n```go\nfunc main() {\n\tfor i:=0; i<10; i++ {\n\t\tfmt.Print(rand.Intn(10), \" \")\n\t}\n}\n```\n\n* 结果: 1 7 7 9 1 8 5 0 6 0\n* 再来一次: 1 7 7 9 1 8 5 0 6 0\n* 还是这个结果,这叫啥子随机数,查看文档,继续试验\n\n### 初始化随机种子函数\n```go\nfunc Seed(seed int64)\n```\n* 官方文档:\n\n?> Seed uses the provided seed value to initialize the default Source to a deterministic state. If Seed is not called, the generator behaves as if seeded by Seed(1). Seed values that have the same remainder when divided by 2^31-1 generate the same pseudo-random sequence. Seed, unlike the Rand.Seed method, is safe for concurrent use.\n\n* 我的理解：\n\n?> 系统每次都会先用Seed函数初始化系统资源，如果用户不提供seed参数，则默认用seed=1来初始化，这就是为什么每次都输出一样的值的原因,而且,Seed方法是并发安全的.\n所谓种子,通俗理解可以理解为一个抽奖的奖池,我们自定义一个奖池,从我们的奖池中进行随机抽奖,种子就是我们奖池中的数据。\n\n### 使用种子生成随机数\n\n* 我们一般使用系统时间来进行初始化\n```go\nrand.Seed(time.Now().UnixNano())\nfor i:=0; i<10; i++ {\n\tfmt.Print(rand.Intn(10), \" \")\n}\n```\n\n* 或者我们可以使用rand.NewSource()\n```go\nr := rand.New(rand.NewSource(time.Now().UnixNano()))\nnum := r.Intn(128)\n```\n\n### Intn函数\n* 生成 [0,n)区间的一个随机数（注意：不包括n）\n```go\nfunc Intn(n int) int\n```\n\n### 生成指定位数的随机数\n* 以生成8位为例\n```go\ns := fmt.Sprintf(\"%08v\", rand.New(rand.NewSource(time.Now().UnixNano())).Int63n(100000000))\nfmt.Println(s)\n```\n\n## 真随机数\n* 如果我们的应用对安全性要求比较高，需要使用真随机数的话，那么可以使用 crypto/rand 包中的方法,这样生成的每次都是不同的随机数。\n```go\npackage main\nimport (\n    \"crypto/rand\"\n    \"fmt\"\n    \"math/big\"\n)\nfunc main() {\n    // 生成 10 个 [0, 128) 范围的真随机数。\n    for i := 0; i < 10; i++ {\n        result, _ := rand.Int(rand.Reader, big.NewInt(128))\n        fmt.Println(result)\n    }\n}\n```\n\n!> [转载链接](https://blog.csdn.net/study_in/article/details/102919019)","source":"_posts/go/Random.md","raw":"---\ntitle: GO 生成随机数\ndescription: 随机数，是使用一个确定性的算法计算出来随机数序。在程序开发中经常需要产生随机数，如随机数验证码登陆、作为唯一身份标识数据等等。Go 中生成随机数的有两个包,分别是 math/rand 和 crypto/rand \nkeywords: Golang, 随机数, Random\ntop_img: /images/golang/GolangCover.jpg\ncover: /images/golang/GolangCover.jpg\ntags:\n  - Golang\n  - 入门 \ncategories:\n  - Golang\ndate: 2021-08-12 17:31:03\nupdated: 2021-08-12 17:31:03\n---\n\n# GO 生成随机数\n\n## 什么是随机数\n\n随机数，是使用一个确定性的算法计算出来随机数序。在程序开发中经常需要产生随机数，如随机数验证码登陆、作为唯一身份标识数据等等。\n\n### GO中生成随机数的包\nGo 中生成随机数的有两个包,分别是`math/rand`和`crypto/rand`\n* `math/rand`实现了伪随机数生成器\n* `crypto/rand`实现了用于加解密的跟安全的随机数生成器,当然,性能也就降下来了,毕竟鱼与熊掌不可兼得\n\n## 随机数生成\n\n```go\nfunc main() {\n\tfor i:=0; i<10; i++ {\n\t\tfmt.Print(rand.Intn(10), \" \")\n\t}\n}\n```\n\n* 结果: 1 7 7 9 1 8 5 0 6 0\n* 再来一次: 1 7 7 9 1 8 5 0 6 0\n* 还是这个结果,这叫啥子随机数,查看文档,继续试验\n\n### 初始化随机种子函数\n```go\nfunc Seed(seed int64)\n```\n* 官方文档:\n\n?> Seed uses the provided seed value to initialize the default Source to a deterministic state. If Seed is not called, the generator behaves as if seeded by Seed(1). Seed values that have the same remainder when divided by 2^31-1 generate the same pseudo-random sequence. Seed, unlike the Rand.Seed method, is safe for concurrent use.\n\n* 我的理解：\n\n?> 系统每次都会先用Seed函数初始化系统资源，如果用户不提供seed参数，则默认用seed=1来初始化，这就是为什么每次都输出一样的值的原因,而且,Seed方法是并发安全的.\n所谓种子,通俗理解可以理解为一个抽奖的奖池,我们自定义一个奖池,从我们的奖池中进行随机抽奖,种子就是我们奖池中的数据。\n\n### 使用种子生成随机数\n\n* 我们一般使用系统时间来进行初始化\n```go\nrand.Seed(time.Now().UnixNano())\nfor i:=0; i<10; i++ {\n\tfmt.Print(rand.Intn(10), \" \")\n}\n```\n\n* 或者我们可以使用rand.NewSource()\n```go\nr := rand.New(rand.NewSource(time.Now().UnixNano()))\nnum := r.Intn(128)\n```\n\n### Intn函数\n* 生成 [0,n)区间的一个随机数（注意：不包括n）\n```go\nfunc Intn(n int) int\n```\n\n### 生成指定位数的随机数\n* 以生成8位为例\n```go\ns := fmt.Sprintf(\"%08v\", rand.New(rand.NewSource(time.Now().UnixNano())).Int63n(100000000))\nfmt.Println(s)\n```\n\n## 真随机数\n* 如果我们的应用对安全性要求比较高，需要使用真随机数的话，那么可以使用 crypto/rand 包中的方法,这样生成的每次都是不同的随机数。\n```go\npackage main\nimport (\n    \"crypto/rand\"\n    \"fmt\"\n    \"math/big\"\n)\nfunc main() {\n    // 生成 10 个 [0, 128) 范围的真随机数。\n    for i := 0; i < 10; i++ {\n        result, _ := rand.Int(rand.Reader, big.NewInt(128))\n        fmt.Println(result)\n    }\n}\n```\n\n!> [转载链接](https://blog.csdn.net/study_in/article/details/102919019)","slug":"go/Random","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cks8qtwru0009sku42atb8iy4","content":"<h1 id=\"GO-生成随机数\"><a href=\"#GO-生成随机数\" class=\"headerlink\" title=\"GO 生成随机数\"></a>GO 生成随机数</h1><h2 id=\"什么是随机数\"><a href=\"#什么是随机数\" class=\"headerlink\" title=\"什么是随机数\"></a>什么是随机数</h2><p>随机数，是使用一个确定性的算法计算出来随机数序。在程序开发中经常需要产生随机数，如随机数验证码登陆、作为唯一身份标识数据等等。</p>\n<h3 id=\"GO中生成随机数的包\"><a href=\"#GO中生成随机数的包\" class=\"headerlink\" title=\"GO中生成随机数的包\"></a>GO中生成随机数的包</h3><p>Go 中生成随机数的有两个包,分别是<code>math/rand</code>和<code>crypto/rand</code></p>\n<ul>\n<li><code>math/rand</code>实现了伪随机数生成器</li>\n<li><code>crypto/rand</code>实现了用于加解密的跟安全的随机数生成器,当然,性能也就降下来了,毕竟鱼与熊掌不可兼得</li>\n</ul>\n<h2 id=\"随机数生成\"><a href=\"#随机数生成\" class=\"headerlink\" title=\"随机数生成\"></a>随机数生成</h2><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i:=<span class=\"number\">0</span>; i&lt;<span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\">\t\tfmt.Print(rand.Intn(<span class=\"number\">10</span>), <span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>结果: 1 7 7 9 1 8 5 0 6 0</li>\n<li>再来一次: 1 7 7 9 1 8 5 0 6 0</li>\n<li>还是这个结果,这叫啥子随机数,查看文档,继续试验</li>\n</ul>\n<h3 id=\"初始化随机种子函数\"><a href=\"#初始化随机种子函数\" class=\"headerlink\" title=\"初始化随机种子函数\"></a>初始化随机种子函数</h3><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Seed</span><span class=\"params\">(seed <span class=\"keyword\">int64</span>)</span></span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>官方文档:</li>\n</ul>\n<p>?&gt; Seed uses the provided seed value to initialize the default Source to a deterministic state. If Seed is not called, the generator behaves as if seeded by Seed(1). Seed values that have the same remainder when divided by 2^31-1 generate the same pseudo-random sequence. Seed, unlike the Rand.Seed method, is safe for concurrent use.</p>\n<ul>\n<li>我的理解：</li>\n</ul>\n<p>?&gt; 系统每次都会先用Seed函数初始化系统资源，如果用户不提供seed参数，则默认用seed=1来初始化，这就是为什么每次都输出一样的值的原因,而且,Seed方法是并发安全的.<br>所谓种子,通俗理解可以理解为一个抽奖的奖池,我们自定义一个奖池,从我们的奖池中进行随机抽奖,种子就是我们奖池中的数据。</p>\n<h3 id=\"使用种子生成随机数\"><a href=\"#使用种子生成随机数\" class=\"headerlink\" title=\"使用种子生成随机数\"></a>使用种子生成随机数</h3><ul>\n<li><p>我们一般使用系统时间来进行初始化</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">rand.Seed(time.Now().UnixNano())</span><br><span class=\"line\"><span class=\"keyword\">for</span> i:=<span class=\"number\">0</span>; i&lt;<span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\">\tfmt.Print(rand.Intn(<span class=\"number\">10</span>), <span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>或者我们可以使用rand.NewSource()</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">r := rand.New(rand.NewSource(time.Now().UnixNano()))</span><br><span class=\"line\">num := r.Intn(<span class=\"number\">128</span>)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"Intn函数\"><a href=\"#Intn函数\" class=\"headerlink\" title=\"Intn函数\"></a>Intn函数</h3><ul>\n<li>生成 [0,n)区间的一个随机数（注意：不包括n）<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Intn</span><span class=\"params\">(n <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"生成指定位数的随机数\"><a href=\"#生成指定位数的随机数\" class=\"headerlink\" title=\"生成指定位数的随机数\"></a>生成指定位数的随机数</h3><ul>\n<li>以生成8位为例<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">s := fmt.Sprintf(<span class=\"string\">&quot;%08v&quot;</span>, rand.New(rand.NewSource(time.Now().UnixNano())).Int63n(<span class=\"number\">100000000</span>))</span><br><span class=\"line\">fmt.Println(s)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"真随机数\"><a href=\"#真随机数\" class=\"headerlink\" title=\"真随机数\"></a>真随机数</h2><ul>\n<li>如果我们的应用对安全性要求比较高，需要使用真随机数的话，那么可以使用 crypto/rand 包中的方法,这样生成的每次都是不同的随机数。<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;crypto/rand&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;math/big&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 生成 10 个 [0, 128) 范围的真随机数。</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\">        result, _ := rand.Int(rand.Reader, big.NewInt(<span class=\"number\">128</span>))</span><br><span class=\"line\">        fmt.Println(result)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>!&gt; <a href=\"https://blog.csdn.net/study_in/article/details/102919019\">转载链接</a></p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<h1 id=\"GO-生成随机数\"><a href=\"#GO-生成随机数\" class=\"headerlink\" title=\"GO 生成随机数\"></a>GO 生成随机数</h1><h2 id=\"什么是随机数\"><a href=\"#什么是随机数\" class=\"headerlink\" title=\"什么是随机数\"></a>什么是随机数</h2><p>随机数，是使用一个确定性的算法计算出来随机数序。在程序开发中经常需要产生随机数，如随机数验证码登陆、作为唯一身份标识数据等等。</p>\n<h3 id=\"GO中生成随机数的包\"><a href=\"#GO中生成随机数的包\" class=\"headerlink\" title=\"GO中生成随机数的包\"></a>GO中生成随机数的包</h3><p>Go 中生成随机数的有两个包,分别是<code>math/rand</code>和<code>crypto/rand</code></p>\n<ul>\n<li><code>math/rand</code>实现了伪随机数生成器</li>\n<li><code>crypto/rand</code>实现了用于加解密的跟安全的随机数生成器,当然,性能也就降下来了,毕竟鱼与熊掌不可兼得</li>\n</ul>\n<h2 id=\"随机数生成\"><a href=\"#随机数生成\" class=\"headerlink\" title=\"随机数生成\"></a>随机数生成</h2><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i:=<span class=\"number\">0</span>; i&lt;<span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\">\t\tfmt.Print(rand.Intn(<span class=\"number\">10</span>), <span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>结果: 1 7 7 9 1 8 5 0 6 0</li>\n<li>再来一次: 1 7 7 9 1 8 5 0 6 0</li>\n<li>还是这个结果,这叫啥子随机数,查看文档,继续试验</li>\n</ul>\n<h3 id=\"初始化随机种子函数\"><a href=\"#初始化随机种子函数\" class=\"headerlink\" title=\"初始化随机种子函数\"></a>初始化随机种子函数</h3><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Seed</span><span class=\"params\">(seed <span class=\"keyword\">int64</span>)</span></span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>官方文档:</li>\n</ul>\n<p>?&gt; Seed uses the provided seed value to initialize the default Source to a deterministic state. If Seed is not called, the generator behaves as if seeded by Seed(1). Seed values that have the same remainder when divided by 2^31-1 generate the same pseudo-random sequence. Seed, unlike the Rand.Seed method, is safe for concurrent use.</p>\n<ul>\n<li>我的理解：</li>\n</ul>\n<p>?&gt; 系统每次都会先用Seed函数初始化系统资源，如果用户不提供seed参数，则默认用seed=1来初始化，这就是为什么每次都输出一样的值的原因,而且,Seed方法是并发安全的.<br>所谓种子,通俗理解可以理解为一个抽奖的奖池,我们自定义一个奖池,从我们的奖池中进行随机抽奖,种子就是我们奖池中的数据。</p>\n<h3 id=\"使用种子生成随机数\"><a href=\"#使用种子生成随机数\" class=\"headerlink\" title=\"使用种子生成随机数\"></a>使用种子生成随机数</h3><ul>\n<li><p>我们一般使用系统时间来进行初始化</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">rand.Seed(time.Now().UnixNano())</span><br><span class=\"line\"><span class=\"keyword\">for</span> i:=<span class=\"number\">0</span>; i&lt;<span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\">\tfmt.Print(rand.Intn(<span class=\"number\">10</span>), <span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>或者我们可以使用rand.NewSource()</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">r := rand.New(rand.NewSource(time.Now().UnixNano()))</span><br><span class=\"line\">num := r.Intn(<span class=\"number\">128</span>)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"Intn函数\"><a href=\"#Intn函数\" class=\"headerlink\" title=\"Intn函数\"></a>Intn函数</h3><ul>\n<li>生成 [0,n)区间的一个随机数（注意：不包括n）<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Intn</span><span class=\"params\">(n <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"生成指定位数的随机数\"><a href=\"#生成指定位数的随机数\" class=\"headerlink\" title=\"生成指定位数的随机数\"></a>生成指定位数的随机数</h3><ul>\n<li>以生成8位为例<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">s := fmt.Sprintf(<span class=\"string\">&quot;%08v&quot;</span>, rand.New(rand.NewSource(time.Now().UnixNano())).Int63n(<span class=\"number\">100000000</span>))</span><br><span class=\"line\">fmt.Println(s)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"真随机数\"><a href=\"#真随机数\" class=\"headerlink\" title=\"真随机数\"></a>真随机数</h2><ul>\n<li>如果我们的应用对安全性要求比较高，需要使用真随机数的话，那么可以使用 crypto/rand 包中的方法,这样生成的每次都是不同的随机数。<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;crypto/rand&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;math/big&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 生成 10 个 [0, 128) 范围的真随机数。</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\">        result, _ := rand.Int(rand.Reader, big.NewInt(<span class=\"number\">128</span>))</span><br><span class=\"line\">        fmt.Println(result)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>!&gt; <a href=\"https://blog.csdn.net/study_in/article/details/102919019\">转载链接</a></p>\n"},{"title":"位移符效率对比","description":"以前总是看到位移符。因为它总是能轻易把一个数字变成我不认识的模样，所以我也没有深入了解过。在看到讨论区留言后才意识到：自己的格局太小了。简单读了读 位移符 的文档和实现原理，我觉得这种方案还是值得一试的。","keywords":"PHP, 位移符, 效率对比","top_img":"/images/php/PhpCover.png","cover":"/images/php/PhpCover.png","date":"2021-08-12T08:36:13.000Z","updated":"2021-08-12T08:36:13.000Z","_content":"# 位移符效率对比\n\n## 讨论\n在上一篇博客『[如何使用PHP最高效率的将一个正整数扩大一千倍？](/php/PhpExpandsPositiveIntegersByAFactorOf1000)』的讨论区，有人提出位移符应该才是运算最快的方案。\n\n以前总是看到位移符`<<`这样的符号。因为它总是能轻易把一个数字变成我不认识的模样，所以我也没有深入了解过。\n\n在看到讨论区留言后才意识到：自己的格局太小了。\n\n简单读了读`位移符`的文档和实现原理，我觉得这种方案还是值得一试的。按照之前两篇博客的心得，我首先抛出我的猜测：\n* 在`PHP`中，位移符方案效率要高于`*1024`，但是会低于`*1000`。\n* 在`C#`中，位移符的效率与其他两种方案持平。\n    * 论证过程见[『Golang』用计算证明：我远远低估了编译器](/go/CompiledLanguageComputationOfMultiplication)\n\n现在进行一个简单的验证。\n* 方案一：$integer * 1000\n* 方案二：($integer << 10) - ($integer * 24)\n* 方案三：($integer * 1024) - ($integer * 24)\n\n## PHP\n### 代码部分\n\n这次吸取讨论区提到的“效率权重”，将随机数部分转移出来。代码价值较低，为不影响阅读，置于[附录](/php/DisplacementEfficiencyComparison#PHP代码)\n\n### 运算结果\n\n多次运行并且调整前后顺序，均得到一个较为稳定的结果：\n\n![image01](/images/laravel/DisplacementEfficiencyComparison01.png)\n\n这个结果在意料之中，但又不完全在。位移符`<<`从理论上来讲和一般的乘法有着本质上的不同，应该有不错的效率提升。它之所以会比`$integer * 1000`效率低，应该是被第二步运算` - $integer * 24`拖累了，但是`位移符`却也没有与`*1024`拉开差距。为了证实这一点，我又补上了单独进行位移计算的测试。结果证明：\n\n?> 位移符在`PHP`这里就仅仅是一个普通的乘除法计算而已。\n\n## GO\n### 代码部分\n代码价值较低，为不影响阅读，置于[附录](/php/DisplacementEfficiencyComparison#GO代码)\n\n### 运算结果\n\n运行结果同样不出所料。\n\n![image01](/images/laravel/DisplacementEfficiencyComparison02.png)\n\n不过横向对比一下，`PHP`的计算效率被`GO`秒的渣渣都不剩了。身为一名从`PHP`入行编程，并且现在的主要技术栈和生产能力依旧在`PHP`身上的我，不免产生一种`好可怜啊`的悲凉。\n\n?> 位移符可以帮助我们理解计算机的原理，但是在`GO`这类编译型语言这里，编译器已经帮你完成了位移符能完成的计算。\n\n## 附录\n\n### PHP代码\n```php\n<?php\n\nnamespace App\\Console\\Commands;\n\nuse Carbon\\Carbon;\nuse Illuminate\\Console\\Command;\n\nclass DemoCommand extends Command\n{\n    /**\n     * The name and signature of the console command.\n     *\n     * @var string\n     */\n    protected $signature = 'demo:test';\n\n    /**\n     * The console command description.\n     *\n     * @var string\n     */\n    protected $description = 'Command description';\n\n    /**\n     * Create a new command instance.\n     *\n     * @return void\n     */\n    public function __construct()\n    {\n        parent::__construct();\n    }\n\n    /**\n     * Execute the console command.\n     *\n     * @return int\n     */\n    public function handle()\n    {\n        // 图表内容\n        $headers = ['次数', '方案1：乘1000', '方案2：移位符', '方案3：乘以 1024', '补充测试：仅位移'];\n        $data = [\n            [0 => '第一次'],\n            [0 => '第二次'],\n            [0 => '第三次']\n        ];\n\n        // 随机数提出\n        $integer = rand(1, 999);\n\n        // 每个方法执行三次\n        for ($count = 0; $count < 3; $count++) {\n            $start = Carbon::now()->getPreciseTimestamp();\n            for ($i = 0; $i < 10000000; $i++) {\n                $result = $integer * 1000;\n            }\n            $end = Carbon::now()->getPreciseTimestamp();\n            $data[$count][] = ($end - $start) / 1000000 . '秒';\n        }\n\n        for ($count = 0; $count < 3; $count++) {\n            $start = Carbon::now()->getPreciseTimestamp();\n            for ($i = 0; $i < 10000000; $i++) {\n                $result = ($integer << 10) - ($integer * 24);\n            }\n            $end = Carbon::now()->getPreciseTimestamp();\n            $data[$count][] = ($end - $start) / 1000000 . '秒';\n        }\n\n        for ($count = 0; $count < 3; $count++) {\n            $start = Carbon::now()->getPreciseTimestamp();\n            for ($i = 0; $i < 10000000; $i++) {\n                $result = ($integer * 1024) - ($integer * 24);\n            }\n            $end = Carbon::now()->getPreciseTimestamp();\n            $data[$count][] = ($end - $start) / 1000000 . '秒';\n        }\n\n        for ($count = 0; $count < 3; $count++) {\n            $start = Carbon::now()->getPreciseTimestamp();\n            for ($i = 0; $i < 10000000; $i++) {\n                $result = $integer << 10;\n            }\n            $end = Carbon::now()->getPreciseTimestamp();\n            $data[$count][] = ($end - $start) / 1000000 . '秒';\n        }\n        $this->table($headers, $data);\n    }\n}\n\n```\n\n### GO代码\n```go\nfunc main() {\n\t// 计算次数\n\tmaxI := 10000000\n\n\trand.Seed(time.Now().UnixNano())\n\tinteger := rand.Intn(999)\n\n\techoString := \"\"\n\n\tfmt.Println(\"方案1：乘1000\")\n\tfor count := 0; count < 3; count++ {\n\t\t// 开始\n\t\tstart := time.Now()\n\t\techoString += \"第\" + strconv.Itoa(count+1) + \"次:\"\n\n\t\tfor i := 0; i < maxI; i++ {\n\t\t\t_ = integer * 1000\n\t\t}\n\n\t\t// 结束\n\t\tend := time.Now()\n\n\t\tbetweenTime := float64(end.Sub(start).Nanoseconds()) / 1000000000\n\n\t\techoString += strconv.FormatFloat(betweenTime, 'f', 10, 64) + \"秒\"\n\n\t}\n\n\tfmt.Println(echoString)\n\n\techoString = \"\"\n\n\tfmt.Println(\"方案2：位移符\")\n\tfor count := 0; count < 3; count++ {\n\t\t// 开始\n\t\tstart := time.Now()\n\t\techoString += \"第\" + strconv.Itoa(count+1) + \"次:\"\n\n\t\tfor i := 0; i < maxI; i++ {\n\t\t\t_ = (integer << 10) - (integer * 24)\n\t\t}\n\n\t\t// 结束\n\t\tend := time.Now()\n\n\t\tbetweenTime := float64(end.Sub(start).Nanoseconds()) / 1000000000\n\n\t\techoString += strconv.FormatFloat(betweenTime, 'f', 10, 64) + \"秒\"\n\n\t}\n\n\tfmt.Println(echoString)\n\n\techoString = \"\"\n\n\tfmt.Println(\"方案3：乘以1024\")\n\tfor count := 0; count < 3; count++ {\n\t\t// 开始\n\t\tstart := time.Now()\n\t\techoString += \"第\" + strconv.Itoa(count+1) + \"次:\"\n\n\t\tfor i := 0; i < maxI; i++ {\n\t\t\t_ = (integer * 1024) - (integer * 24)\n\t\t}\n\n\t\t// 结束\n\t\tend := time.Now()\n\n\t\tbetweenTime := float64(end.Sub(start).Nanoseconds()) / 1000000000\n\n\t\techoString += strconv.FormatFloat(betweenTime, 'f', 10, 64) + \"秒\"\n\n\t}\n\n\tfmt.Println(echoString)\n}\n\n```","source":"_posts/php/DisplacementEfficiencyComparison.md","raw":"---\ntitle: 位移符效率对比\ndescription: 以前总是看到位移符。因为它总是能轻易把一个数字变成我不认识的模样，所以我也没有深入了解过。在看到讨论区留言后才意识到：自己的格局太小了。简单读了读 位移符 的文档和实现原理，我觉得这种方案还是值得一试的。\nkeywords: PHP, 位移符, 效率对比\ntop_img: /images/php/PhpCover.png\ncover: /images/php/PhpCover.png\ntags:\n  - PHP\n  - 算法优化\ncategories:\n  - PHP\ndate: 2021-08-12 16:36:13\nupdated: 2021-08-12 16:36:13\n---\n# 位移符效率对比\n\n## 讨论\n在上一篇博客『[如何使用PHP最高效率的将一个正整数扩大一千倍？](/php/PhpExpandsPositiveIntegersByAFactorOf1000)』的讨论区，有人提出位移符应该才是运算最快的方案。\n\n以前总是看到位移符`<<`这样的符号。因为它总是能轻易把一个数字变成我不认识的模样，所以我也没有深入了解过。\n\n在看到讨论区留言后才意识到：自己的格局太小了。\n\n简单读了读`位移符`的文档和实现原理，我觉得这种方案还是值得一试的。按照之前两篇博客的心得，我首先抛出我的猜测：\n* 在`PHP`中，位移符方案效率要高于`*1024`，但是会低于`*1000`。\n* 在`C#`中，位移符的效率与其他两种方案持平。\n    * 论证过程见[『Golang』用计算证明：我远远低估了编译器](/go/CompiledLanguageComputationOfMultiplication)\n\n现在进行一个简单的验证。\n* 方案一：$integer * 1000\n* 方案二：($integer << 10) - ($integer * 24)\n* 方案三：($integer * 1024) - ($integer * 24)\n\n## PHP\n### 代码部分\n\n这次吸取讨论区提到的“效率权重”，将随机数部分转移出来。代码价值较低，为不影响阅读，置于[附录](/php/DisplacementEfficiencyComparison#PHP代码)\n\n### 运算结果\n\n多次运行并且调整前后顺序，均得到一个较为稳定的结果：\n\n![image01](/images/laravel/DisplacementEfficiencyComparison01.png)\n\n这个结果在意料之中，但又不完全在。位移符`<<`从理论上来讲和一般的乘法有着本质上的不同，应该有不错的效率提升。它之所以会比`$integer * 1000`效率低，应该是被第二步运算` - $integer * 24`拖累了，但是`位移符`却也没有与`*1024`拉开差距。为了证实这一点，我又补上了单独进行位移计算的测试。结果证明：\n\n?> 位移符在`PHP`这里就仅仅是一个普通的乘除法计算而已。\n\n## GO\n### 代码部分\n代码价值较低，为不影响阅读，置于[附录](/php/DisplacementEfficiencyComparison#GO代码)\n\n### 运算结果\n\n运行结果同样不出所料。\n\n![image01](/images/laravel/DisplacementEfficiencyComparison02.png)\n\n不过横向对比一下，`PHP`的计算效率被`GO`秒的渣渣都不剩了。身为一名从`PHP`入行编程，并且现在的主要技术栈和生产能力依旧在`PHP`身上的我，不免产生一种`好可怜啊`的悲凉。\n\n?> 位移符可以帮助我们理解计算机的原理，但是在`GO`这类编译型语言这里，编译器已经帮你完成了位移符能完成的计算。\n\n## 附录\n\n### PHP代码\n```php\n<?php\n\nnamespace App\\Console\\Commands;\n\nuse Carbon\\Carbon;\nuse Illuminate\\Console\\Command;\n\nclass DemoCommand extends Command\n{\n    /**\n     * The name and signature of the console command.\n     *\n     * @var string\n     */\n    protected $signature = 'demo:test';\n\n    /**\n     * The console command description.\n     *\n     * @var string\n     */\n    protected $description = 'Command description';\n\n    /**\n     * Create a new command instance.\n     *\n     * @return void\n     */\n    public function __construct()\n    {\n        parent::__construct();\n    }\n\n    /**\n     * Execute the console command.\n     *\n     * @return int\n     */\n    public function handle()\n    {\n        // 图表内容\n        $headers = ['次数', '方案1：乘1000', '方案2：移位符', '方案3：乘以 1024', '补充测试：仅位移'];\n        $data = [\n            [0 => '第一次'],\n            [0 => '第二次'],\n            [0 => '第三次']\n        ];\n\n        // 随机数提出\n        $integer = rand(1, 999);\n\n        // 每个方法执行三次\n        for ($count = 0; $count < 3; $count++) {\n            $start = Carbon::now()->getPreciseTimestamp();\n            for ($i = 0; $i < 10000000; $i++) {\n                $result = $integer * 1000;\n            }\n            $end = Carbon::now()->getPreciseTimestamp();\n            $data[$count][] = ($end - $start) / 1000000 . '秒';\n        }\n\n        for ($count = 0; $count < 3; $count++) {\n            $start = Carbon::now()->getPreciseTimestamp();\n            for ($i = 0; $i < 10000000; $i++) {\n                $result = ($integer << 10) - ($integer * 24);\n            }\n            $end = Carbon::now()->getPreciseTimestamp();\n            $data[$count][] = ($end - $start) / 1000000 . '秒';\n        }\n\n        for ($count = 0; $count < 3; $count++) {\n            $start = Carbon::now()->getPreciseTimestamp();\n            for ($i = 0; $i < 10000000; $i++) {\n                $result = ($integer * 1024) - ($integer * 24);\n            }\n            $end = Carbon::now()->getPreciseTimestamp();\n            $data[$count][] = ($end - $start) / 1000000 . '秒';\n        }\n\n        for ($count = 0; $count < 3; $count++) {\n            $start = Carbon::now()->getPreciseTimestamp();\n            for ($i = 0; $i < 10000000; $i++) {\n                $result = $integer << 10;\n            }\n            $end = Carbon::now()->getPreciseTimestamp();\n            $data[$count][] = ($end - $start) / 1000000 . '秒';\n        }\n        $this->table($headers, $data);\n    }\n}\n\n```\n\n### GO代码\n```go\nfunc main() {\n\t// 计算次数\n\tmaxI := 10000000\n\n\trand.Seed(time.Now().UnixNano())\n\tinteger := rand.Intn(999)\n\n\techoString := \"\"\n\n\tfmt.Println(\"方案1：乘1000\")\n\tfor count := 0; count < 3; count++ {\n\t\t// 开始\n\t\tstart := time.Now()\n\t\techoString += \"第\" + strconv.Itoa(count+1) + \"次:\"\n\n\t\tfor i := 0; i < maxI; i++ {\n\t\t\t_ = integer * 1000\n\t\t}\n\n\t\t// 结束\n\t\tend := time.Now()\n\n\t\tbetweenTime := float64(end.Sub(start).Nanoseconds()) / 1000000000\n\n\t\techoString += strconv.FormatFloat(betweenTime, 'f', 10, 64) + \"秒\"\n\n\t}\n\n\tfmt.Println(echoString)\n\n\techoString = \"\"\n\n\tfmt.Println(\"方案2：位移符\")\n\tfor count := 0; count < 3; count++ {\n\t\t// 开始\n\t\tstart := time.Now()\n\t\techoString += \"第\" + strconv.Itoa(count+1) + \"次:\"\n\n\t\tfor i := 0; i < maxI; i++ {\n\t\t\t_ = (integer << 10) - (integer * 24)\n\t\t}\n\n\t\t// 结束\n\t\tend := time.Now()\n\n\t\tbetweenTime := float64(end.Sub(start).Nanoseconds()) / 1000000000\n\n\t\techoString += strconv.FormatFloat(betweenTime, 'f', 10, 64) + \"秒\"\n\n\t}\n\n\tfmt.Println(echoString)\n\n\techoString = \"\"\n\n\tfmt.Println(\"方案3：乘以1024\")\n\tfor count := 0; count < 3; count++ {\n\t\t// 开始\n\t\tstart := time.Now()\n\t\techoString += \"第\" + strconv.Itoa(count+1) + \"次:\"\n\n\t\tfor i := 0; i < maxI; i++ {\n\t\t\t_ = (integer * 1024) - (integer * 24)\n\t\t}\n\n\t\t// 结束\n\t\tend := time.Now()\n\n\t\tbetweenTime := float64(end.Sub(start).Nanoseconds()) / 1000000000\n\n\t\techoString += strconv.FormatFloat(betweenTime, 'f', 10, 64) + \"秒\"\n\n\t}\n\n\tfmt.Println(echoString)\n}\n\n```","slug":"php/DisplacementEfficiencyComparison","published":1,"_id":"cks8qtwrw000asku40rkv9lv8","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"位移符效率对比\"><a href=\"#位移符效率对比\" class=\"headerlink\" title=\"位移符效率对比\"></a>位移符效率对比</h1><h2 id=\"讨论\"><a href=\"#讨论\" class=\"headerlink\" title=\"讨论\"></a>讨论</h2><p>在上一篇博客『<a href=\"/php/PhpExpandsPositiveIntegersByAFactorOf1000\">如何使用PHP最高效率的将一个正整数扩大一千倍？</a>』的讨论区，有人提出位移符应该才是运算最快的方案。</p>\n<p>以前总是看到位移符<code>&lt;&lt;</code>这样的符号。因为它总是能轻易把一个数字变成我不认识的模样，所以我也没有深入了解过。</p>\n<p>在看到讨论区留言后才意识到：自己的格局太小了。</p>\n<p>简单读了读<code>位移符</code>的文档和实现原理，我觉得这种方案还是值得一试的。按照之前两篇博客的心得，我首先抛出我的猜测：</p>\n<ul>\n<li>在<code>PHP</code>中，位移符方案效率要高于<code>*1024</code>，但是会低于<code>*1000</code>。</li>\n<li>在<code>C#</code>中，位移符的效率与其他两种方案持平。<ul>\n<li>论证过程见<a href=\"/go/CompiledLanguageComputationOfMultiplication\">『Golang』用计算证明：我远远低估了编译器</a></li>\n</ul>\n</li>\n</ul>\n<p>现在进行一个简单的验证。</p>\n<ul>\n<li>方案一：$integer * 1000</li>\n<li>方案二：($integer &lt;&lt; 10) - ($integer * 24)</li>\n<li>方案三：($integer * 1024) - ($integer * 24)</li>\n</ul>\n<h2 id=\"PHP\"><a href=\"#PHP\" class=\"headerlink\" title=\"PHP\"></a>PHP</h2><h3 id=\"代码部分\"><a href=\"#代码部分\" class=\"headerlink\" title=\"代码部分\"></a>代码部分</h3><p>这次吸取讨论区提到的“效率权重”，将随机数部分转移出来。代码价值较低，为不影响阅读，置于<a href=\"/php/DisplacementEfficiencyComparison#PHP%E4%BB%A3%E7%A0%81\">附录</a></p>\n<h3 id=\"运算结果\"><a href=\"#运算结果\" class=\"headerlink\" title=\"运算结果\"></a>运算结果</h3><p>多次运行并且调整前后顺序，均得到一个较为稳定的结果：</p>\n<p><img src=\"/images/laravel/DisplacementEfficiencyComparison01.png\" alt=\"image01\"></p>\n<p>这个结果在意料之中，但又不完全在。位移符<code>&lt;&lt;</code>从理论上来讲和一般的乘法有着本质上的不同，应该有不错的效率提升。它之所以会比<code>$integer * 1000</code>效率低，应该是被第二步运算<code> - $integer * 24</code>拖累了，但是<code>位移符</code>却也没有与<code>*1024</code>拉开差距。为了证实这一点，我又补上了单独进行位移计算的测试。结果证明：</p>\n<p>?&gt; 位移符在<code>PHP</code>这里就仅仅是一个普通的乘除法计算而已。</p>\n<h2 id=\"GO\"><a href=\"#GO\" class=\"headerlink\" title=\"GO\"></a>GO</h2><h3 id=\"代码部分-1\"><a href=\"#代码部分-1\" class=\"headerlink\" title=\"代码部分\"></a>代码部分</h3><p>代码价值较低，为不影响阅读，置于<a href=\"/php/DisplacementEfficiencyComparison#GO%E4%BB%A3%E7%A0%81\">附录</a></p>\n<h3 id=\"运算结果-1\"><a href=\"#运算结果-1\" class=\"headerlink\" title=\"运算结果\"></a>运算结果</h3><p>运行结果同样不出所料。</p>\n<p><img src=\"/images/laravel/DisplacementEfficiencyComparison02.png\" alt=\"image01\"></p>\n<p>不过横向对比一下，<code>PHP</code>的计算效率被<code>GO</code>秒的渣渣都不剩了。身为一名从<code>PHP</code>入行编程，并且现在的主要技术栈和生产能力依旧在<code>PHP</code>身上的我，不免产生一种<code>好可怜啊</code>的悲凉。</p>\n<p>?&gt; 位移符可以帮助我们理解计算机的原理，但是在<code>GO</code>这类编译型语言这里，编译器已经帮你完成了位移符能完成的计算。</p>\n<h2 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h2><h3 id=\"PHP代码\"><a href=\"#PHP代码\" class=\"headerlink\" title=\"PHP代码\"></a>PHP代码</h3><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">App</span>\\<span class=\"title\">Console</span>\\<span class=\"title\">Commands</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Carbon</span>\\<span class=\"title\">Carbon</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Illuminate</span>\\<span class=\"title\">Console</span>\\<span class=\"title\">Command</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoCommand</span> <span class=\"keyword\">extends</span> <span class=\"title\">Command</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * The name and signature of the console command.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> string</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$signature</span> = <span class=\"string\">&#x27;demo:test&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * The console command description.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> string</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$description</span> = <span class=\"string\">&#x27;Command description&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Create a new command instance.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> void</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">parent</span>::__construct();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Execute the console command.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> int</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handle</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 图表内容</span></span><br><span class=\"line\">        <span class=\"variable\">$headers</span> = [<span class=\"string\">&#x27;次数&#x27;</span>, <span class=\"string\">&#x27;方案1：乘1000&#x27;</span>, <span class=\"string\">&#x27;方案2：移位符&#x27;</span>, <span class=\"string\">&#x27;方案3：乘以 1024&#x27;</span>, <span class=\"string\">&#x27;补充测试：仅位移&#x27;</span>];</span><br><span class=\"line\">        <span class=\"variable\">$data</span> = [</span><br><span class=\"line\">            [<span class=\"number\">0</span> =&gt; <span class=\"string\">&#x27;第一次&#x27;</span>],</span><br><span class=\"line\">            [<span class=\"number\">0</span> =&gt; <span class=\"string\">&#x27;第二次&#x27;</span>],</span><br><span class=\"line\">            [<span class=\"number\">0</span> =&gt; <span class=\"string\">&#x27;第三次&#x27;</span>]</span><br><span class=\"line\">        ];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 随机数提出</span></span><br><span class=\"line\">        <span class=\"variable\">$integer</span> = rand(<span class=\"number\">1</span>, <span class=\"number\">999</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 每个方法执行三次</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"variable\">$count</span> = <span class=\"number\">0</span>; <span class=\"variable\">$count</span> &lt; <span class=\"number\">3</span>; <span class=\"variable\">$count</span>++) &#123;</span><br><span class=\"line\">            <span class=\"variable\">$start</span> = Carbon::now()-&gt;getPreciseTimestamp();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"variable\">$i</span> = <span class=\"number\">0</span>; <span class=\"variable\">$i</span> &lt; <span class=\"number\">10000000</span>; <span class=\"variable\">$i</span>++) &#123;</span><br><span class=\"line\">                <span class=\"variable\">$result</span> = <span class=\"variable\">$integer</span> * <span class=\"number\">1000</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"variable\">$end</span> = Carbon::now()-&gt;getPreciseTimestamp();</span><br><span class=\"line\">            <span class=\"variable\">$data</span>[<span class=\"variable\">$count</span>][] = (<span class=\"variable\">$end</span> - <span class=\"variable\">$start</span>) / <span class=\"number\">1000000</span> . <span class=\"string\">&#x27;秒&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"variable\">$count</span> = <span class=\"number\">0</span>; <span class=\"variable\">$count</span> &lt; <span class=\"number\">3</span>; <span class=\"variable\">$count</span>++) &#123;</span><br><span class=\"line\">            <span class=\"variable\">$start</span> = Carbon::now()-&gt;getPreciseTimestamp();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"variable\">$i</span> = <span class=\"number\">0</span>; <span class=\"variable\">$i</span> &lt; <span class=\"number\">10000000</span>; <span class=\"variable\">$i</span>++) &#123;</span><br><span class=\"line\">                <span class=\"variable\">$result</span> = (<span class=\"variable\">$integer</span> &lt;&lt; <span class=\"number\">10</span>) - (<span class=\"variable\">$integer</span> * <span class=\"number\">24</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"variable\">$end</span> = Carbon::now()-&gt;getPreciseTimestamp();</span><br><span class=\"line\">            <span class=\"variable\">$data</span>[<span class=\"variable\">$count</span>][] = (<span class=\"variable\">$end</span> - <span class=\"variable\">$start</span>) / <span class=\"number\">1000000</span> . <span class=\"string\">&#x27;秒&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"variable\">$count</span> = <span class=\"number\">0</span>; <span class=\"variable\">$count</span> &lt; <span class=\"number\">3</span>; <span class=\"variable\">$count</span>++) &#123;</span><br><span class=\"line\">            <span class=\"variable\">$start</span> = Carbon::now()-&gt;getPreciseTimestamp();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"variable\">$i</span> = <span class=\"number\">0</span>; <span class=\"variable\">$i</span> &lt; <span class=\"number\">10000000</span>; <span class=\"variable\">$i</span>++) &#123;</span><br><span class=\"line\">                <span class=\"variable\">$result</span> = (<span class=\"variable\">$integer</span> * <span class=\"number\">1024</span>) - (<span class=\"variable\">$integer</span> * <span class=\"number\">24</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"variable\">$end</span> = Carbon::now()-&gt;getPreciseTimestamp();</span><br><span class=\"line\">            <span class=\"variable\">$data</span>[<span class=\"variable\">$count</span>][] = (<span class=\"variable\">$end</span> - <span class=\"variable\">$start</span>) / <span class=\"number\">1000000</span> . <span class=\"string\">&#x27;秒&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"variable\">$count</span> = <span class=\"number\">0</span>; <span class=\"variable\">$count</span> &lt; <span class=\"number\">3</span>; <span class=\"variable\">$count</span>++) &#123;</span><br><span class=\"line\">            <span class=\"variable\">$start</span> = Carbon::now()-&gt;getPreciseTimestamp();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"variable\">$i</span> = <span class=\"number\">0</span>; <span class=\"variable\">$i</span> &lt; <span class=\"number\">10000000</span>; <span class=\"variable\">$i</span>++) &#123;</span><br><span class=\"line\">                <span class=\"variable\">$result</span> = <span class=\"variable\">$integer</span> &lt;&lt; <span class=\"number\">10</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"variable\">$end</span> = Carbon::now()-&gt;getPreciseTimestamp();</span><br><span class=\"line\">            <span class=\"variable\">$data</span>[<span class=\"variable\">$count</span>][] = (<span class=\"variable\">$end</span> - <span class=\"variable\">$start</span>) / <span class=\"number\">1000000</span> . <span class=\"string\">&#x27;秒&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;table(<span class=\"variable\">$headers</span>, <span class=\"variable\">$data</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"GO代码\"><a href=\"#GO代码\" class=\"headerlink\" title=\"GO代码\"></a>GO代码</h3><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 计算次数</span></span><br><span class=\"line\">\tmaxI := <span class=\"number\">10000000</span></span><br><span class=\"line\"></span><br><span class=\"line\">\trand.Seed(time.Now().UnixNano())</span><br><span class=\"line\">\tinteger := rand.Intn(<span class=\"number\">999</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\techoString := <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;方案1：乘1000&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> count := <span class=\"number\">0</span>; count &lt; <span class=\"number\">3</span>; count++ &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 开始</span></span><br><span class=\"line\">\t\tstart := time.Now()</span><br><span class=\"line\">\t\techoString += <span class=\"string\">&quot;第&quot;</span> + strconv.Itoa(count+<span class=\"number\">1</span>) + <span class=\"string\">&quot;次:&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; maxI; i++ &#123;</span><br><span class=\"line\">\t\t\t_ = integer * <span class=\"number\">1000</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 结束</span></span><br><span class=\"line\">\t\tend := time.Now()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tbetweenTime := <span class=\"keyword\">float64</span>(end.Sub(start).Nanoseconds()) / <span class=\"number\">1000000000</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\techoString += strconv.FormatFloat(betweenTime, <span class=\"string\">&#x27;f&#x27;</span>, <span class=\"number\">10</span>, <span class=\"number\">64</span>) + <span class=\"string\">&quot;秒&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(echoString)</span><br><span class=\"line\"></span><br><span class=\"line\">\techoString = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;方案2：位移符&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> count := <span class=\"number\">0</span>; count &lt; <span class=\"number\">3</span>; count++ &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 开始</span></span><br><span class=\"line\">\t\tstart := time.Now()</span><br><span class=\"line\">\t\techoString += <span class=\"string\">&quot;第&quot;</span> + strconv.Itoa(count+<span class=\"number\">1</span>) + <span class=\"string\">&quot;次:&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; maxI; i++ &#123;</span><br><span class=\"line\">\t\t\t_ = (integer &lt;&lt; <span class=\"number\">10</span>) - (integer * <span class=\"number\">24</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 结束</span></span><br><span class=\"line\">\t\tend := time.Now()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tbetweenTime := <span class=\"keyword\">float64</span>(end.Sub(start).Nanoseconds()) / <span class=\"number\">1000000000</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\techoString += strconv.FormatFloat(betweenTime, <span class=\"string\">&#x27;f&#x27;</span>, <span class=\"number\">10</span>, <span class=\"number\">64</span>) + <span class=\"string\">&quot;秒&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(echoString)</span><br><span class=\"line\"></span><br><span class=\"line\">\techoString = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;方案3：乘以1024&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> count := <span class=\"number\">0</span>; count &lt; <span class=\"number\">3</span>; count++ &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 开始</span></span><br><span class=\"line\">\t\tstart := time.Now()</span><br><span class=\"line\">\t\techoString += <span class=\"string\">&quot;第&quot;</span> + strconv.Itoa(count+<span class=\"number\">1</span>) + <span class=\"string\">&quot;次:&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; maxI; i++ &#123;</span><br><span class=\"line\">\t\t\t_ = (integer * <span class=\"number\">1024</span>) - (integer * <span class=\"number\">24</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 结束</span></span><br><span class=\"line\">\t\tend := time.Now()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tbetweenTime := <span class=\"keyword\">float64</span>(end.Sub(start).Nanoseconds()) / <span class=\"number\">1000000000</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\techoString += strconv.FormatFloat(betweenTime, <span class=\"string\">&#x27;f&#x27;</span>, <span class=\"number\">10</span>, <span class=\"number\">64</span>) + <span class=\"string\">&quot;秒&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(echoString)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<h1 id=\"位移符效率对比\"><a href=\"#位移符效率对比\" class=\"headerlink\" title=\"位移符效率对比\"></a>位移符效率对比</h1><h2 id=\"讨论\"><a href=\"#讨论\" class=\"headerlink\" title=\"讨论\"></a>讨论</h2><p>在上一篇博客『<a href=\"/php/PhpExpandsPositiveIntegersByAFactorOf1000\">如何使用PHP最高效率的将一个正整数扩大一千倍？</a>』的讨论区，有人提出位移符应该才是运算最快的方案。</p>\n<p>以前总是看到位移符<code>&lt;&lt;</code>这样的符号。因为它总是能轻易把一个数字变成我不认识的模样，所以我也没有深入了解过。</p>\n<p>在看到讨论区留言后才意识到：自己的格局太小了。</p>\n<p>简单读了读<code>位移符</code>的文档和实现原理，我觉得这种方案还是值得一试的。按照之前两篇博客的心得，我首先抛出我的猜测：</p>\n<ul>\n<li>在<code>PHP</code>中，位移符方案效率要高于<code>*1024</code>，但是会低于<code>*1000</code>。</li>\n<li>在<code>C#</code>中，位移符的效率与其他两种方案持平。<ul>\n<li>论证过程见<a href=\"/go/CompiledLanguageComputationOfMultiplication\">『Golang』用计算证明：我远远低估了编译器</a></li>\n</ul>\n</li>\n</ul>\n<p>现在进行一个简单的验证。</p>\n<ul>\n<li>方案一：$integer * 1000</li>\n<li>方案二：($integer &lt;&lt; 10) - ($integer * 24)</li>\n<li>方案三：($integer * 1024) - ($integer * 24)</li>\n</ul>\n<h2 id=\"PHP\"><a href=\"#PHP\" class=\"headerlink\" title=\"PHP\"></a>PHP</h2><h3 id=\"代码部分\"><a href=\"#代码部分\" class=\"headerlink\" title=\"代码部分\"></a>代码部分</h3><p>这次吸取讨论区提到的“效率权重”，将随机数部分转移出来。代码价值较低，为不影响阅读，置于<a href=\"/php/DisplacementEfficiencyComparison#PHP%E4%BB%A3%E7%A0%81\">附录</a></p>\n<h3 id=\"运算结果\"><a href=\"#运算结果\" class=\"headerlink\" title=\"运算结果\"></a>运算结果</h3><p>多次运行并且调整前后顺序，均得到一个较为稳定的结果：</p>\n<p><img src=\"/images/laravel/DisplacementEfficiencyComparison01.png\" alt=\"image01\"></p>\n<p>这个结果在意料之中，但又不完全在。位移符<code>&lt;&lt;</code>从理论上来讲和一般的乘法有着本质上的不同，应该有不错的效率提升。它之所以会比<code>$integer * 1000</code>效率低，应该是被第二步运算<code> - $integer * 24</code>拖累了，但是<code>位移符</code>却也没有与<code>*1024</code>拉开差距。为了证实这一点，我又补上了单独进行位移计算的测试。结果证明：</p>\n<p>?&gt; 位移符在<code>PHP</code>这里就仅仅是一个普通的乘除法计算而已。</p>\n<h2 id=\"GO\"><a href=\"#GO\" class=\"headerlink\" title=\"GO\"></a>GO</h2><h3 id=\"代码部分-1\"><a href=\"#代码部分-1\" class=\"headerlink\" title=\"代码部分\"></a>代码部分</h3><p>代码价值较低，为不影响阅读，置于<a href=\"/php/DisplacementEfficiencyComparison#GO%E4%BB%A3%E7%A0%81\">附录</a></p>\n<h3 id=\"运算结果-1\"><a href=\"#运算结果-1\" class=\"headerlink\" title=\"运算结果\"></a>运算结果</h3><p>运行结果同样不出所料。</p>\n<p><img src=\"/images/laravel/DisplacementEfficiencyComparison02.png\" alt=\"image01\"></p>\n<p>不过横向对比一下，<code>PHP</code>的计算效率被<code>GO</code>秒的渣渣都不剩了。身为一名从<code>PHP</code>入行编程，并且现在的主要技术栈和生产能力依旧在<code>PHP</code>身上的我，不免产生一种<code>好可怜啊</code>的悲凉。</p>\n<p>?&gt; 位移符可以帮助我们理解计算机的原理，但是在<code>GO</code>这类编译型语言这里，编译器已经帮你完成了位移符能完成的计算。</p>\n<h2 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h2><h3 id=\"PHP代码\"><a href=\"#PHP代码\" class=\"headerlink\" title=\"PHP代码\"></a>PHP代码</h3><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">App</span>\\<span class=\"title\">Console</span>\\<span class=\"title\">Commands</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Carbon</span>\\<span class=\"title\">Carbon</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Illuminate</span>\\<span class=\"title\">Console</span>\\<span class=\"title\">Command</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoCommand</span> <span class=\"keyword\">extends</span> <span class=\"title\">Command</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * The name and signature of the console command.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> string</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$signature</span> = <span class=\"string\">&#x27;demo:test&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * The console command description.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> string</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$description</span> = <span class=\"string\">&#x27;Command description&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Create a new command instance.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> void</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">parent</span>::__construct();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Execute the console command.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> int</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handle</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 图表内容</span></span><br><span class=\"line\">        <span class=\"variable\">$headers</span> = [<span class=\"string\">&#x27;次数&#x27;</span>, <span class=\"string\">&#x27;方案1：乘1000&#x27;</span>, <span class=\"string\">&#x27;方案2：移位符&#x27;</span>, <span class=\"string\">&#x27;方案3：乘以 1024&#x27;</span>, <span class=\"string\">&#x27;补充测试：仅位移&#x27;</span>];</span><br><span class=\"line\">        <span class=\"variable\">$data</span> = [</span><br><span class=\"line\">            [<span class=\"number\">0</span> =&gt; <span class=\"string\">&#x27;第一次&#x27;</span>],</span><br><span class=\"line\">            [<span class=\"number\">0</span> =&gt; <span class=\"string\">&#x27;第二次&#x27;</span>],</span><br><span class=\"line\">            [<span class=\"number\">0</span> =&gt; <span class=\"string\">&#x27;第三次&#x27;</span>]</span><br><span class=\"line\">        ];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 随机数提出</span></span><br><span class=\"line\">        <span class=\"variable\">$integer</span> = rand(<span class=\"number\">1</span>, <span class=\"number\">999</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 每个方法执行三次</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"variable\">$count</span> = <span class=\"number\">0</span>; <span class=\"variable\">$count</span> &lt; <span class=\"number\">3</span>; <span class=\"variable\">$count</span>++) &#123;</span><br><span class=\"line\">            <span class=\"variable\">$start</span> = Carbon::now()-&gt;getPreciseTimestamp();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"variable\">$i</span> = <span class=\"number\">0</span>; <span class=\"variable\">$i</span> &lt; <span class=\"number\">10000000</span>; <span class=\"variable\">$i</span>++) &#123;</span><br><span class=\"line\">                <span class=\"variable\">$result</span> = <span class=\"variable\">$integer</span> * <span class=\"number\">1000</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"variable\">$end</span> = Carbon::now()-&gt;getPreciseTimestamp();</span><br><span class=\"line\">            <span class=\"variable\">$data</span>[<span class=\"variable\">$count</span>][] = (<span class=\"variable\">$end</span> - <span class=\"variable\">$start</span>) / <span class=\"number\">1000000</span> . <span class=\"string\">&#x27;秒&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"variable\">$count</span> = <span class=\"number\">0</span>; <span class=\"variable\">$count</span> &lt; <span class=\"number\">3</span>; <span class=\"variable\">$count</span>++) &#123;</span><br><span class=\"line\">            <span class=\"variable\">$start</span> = Carbon::now()-&gt;getPreciseTimestamp();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"variable\">$i</span> = <span class=\"number\">0</span>; <span class=\"variable\">$i</span> &lt; <span class=\"number\">10000000</span>; <span class=\"variable\">$i</span>++) &#123;</span><br><span class=\"line\">                <span class=\"variable\">$result</span> = (<span class=\"variable\">$integer</span> &lt;&lt; <span class=\"number\">10</span>) - (<span class=\"variable\">$integer</span> * <span class=\"number\">24</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"variable\">$end</span> = Carbon::now()-&gt;getPreciseTimestamp();</span><br><span class=\"line\">            <span class=\"variable\">$data</span>[<span class=\"variable\">$count</span>][] = (<span class=\"variable\">$end</span> - <span class=\"variable\">$start</span>) / <span class=\"number\">1000000</span> . <span class=\"string\">&#x27;秒&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"variable\">$count</span> = <span class=\"number\">0</span>; <span class=\"variable\">$count</span> &lt; <span class=\"number\">3</span>; <span class=\"variable\">$count</span>++) &#123;</span><br><span class=\"line\">            <span class=\"variable\">$start</span> = Carbon::now()-&gt;getPreciseTimestamp();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"variable\">$i</span> = <span class=\"number\">0</span>; <span class=\"variable\">$i</span> &lt; <span class=\"number\">10000000</span>; <span class=\"variable\">$i</span>++) &#123;</span><br><span class=\"line\">                <span class=\"variable\">$result</span> = (<span class=\"variable\">$integer</span> * <span class=\"number\">1024</span>) - (<span class=\"variable\">$integer</span> * <span class=\"number\">24</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"variable\">$end</span> = Carbon::now()-&gt;getPreciseTimestamp();</span><br><span class=\"line\">            <span class=\"variable\">$data</span>[<span class=\"variable\">$count</span>][] = (<span class=\"variable\">$end</span> - <span class=\"variable\">$start</span>) / <span class=\"number\">1000000</span> . <span class=\"string\">&#x27;秒&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"variable\">$count</span> = <span class=\"number\">0</span>; <span class=\"variable\">$count</span> &lt; <span class=\"number\">3</span>; <span class=\"variable\">$count</span>++) &#123;</span><br><span class=\"line\">            <span class=\"variable\">$start</span> = Carbon::now()-&gt;getPreciseTimestamp();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"variable\">$i</span> = <span class=\"number\">0</span>; <span class=\"variable\">$i</span> &lt; <span class=\"number\">10000000</span>; <span class=\"variable\">$i</span>++) &#123;</span><br><span class=\"line\">                <span class=\"variable\">$result</span> = <span class=\"variable\">$integer</span> &lt;&lt; <span class=\"number\">10</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"variable\">$end</span> = Carbon::now()-&gt;getPreciseTimestamp();</span><br><span class=\"line\">            <span class=\"variable\">$data</span>[<span class=\"variable\">$count</span>][] = (<span class=\"variable\">$end</span> - <span class=\"variable\">$start</span>) / <span class=\"number\">1000000</span> . <span class=\"string\">&#x27;秒&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;table(<span class=\"variable\">$headers</span>, <span class=\"variable\">$data</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"GO代码\"><a href=\"#GO代码\" class=\"headerlink\" title=\"GO代码\"></a>GO代码</h3><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 计算次数</span></span><br><span class=\"line\">\tmaxI := <span class=\"number\">10000000</span></span><br><span class=\"line\"></span><br><span class=\"line\">\trand.Seed(time.Now().UnixNano())</span><br><span class=\"line\">\tinteger := rand.Intn(<span class=\"number\">999</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\techoString := <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;方案1：乘1000&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> count := <span class=\"number\">0</span>; count &lt; <span class=\"number\">3</span>; count++ &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 开始</span></span><br><span class=\"line\">\t\tstart := time.Now()</span><br><span class=\"line\">\t\techoString += <span class=\"string\">&quot;第&quot;</span> + strconv.Itoa(count+<span class=\"number\">1</span>) + <span class=\"string\">&quot;次:&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; maxI; i++ &#123;</span><br><span class=\"line\">\t\t\t_ = integer * <span class=\"number\">1000</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 结束</span></span><br><span class=\"line\">\t\tend := time.Now()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tbetweenTime := <span class=\"keyword\">float64</span>(end.Sub(start).Nanoseconds()) / <span class=\"number\">1000000000</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\techoString += strconv.FormatFloat(betweenTime, <span class=\"string\">&#x27;f&#x27;</span>, <span class=\"number\">10</span>, <span class=\"number\">64</span>) + <span class=\"string\">&quot;秒&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(echoString)</span><br><span class=\"line\"></span><br><span class=\"line\">\techoString = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;方案2：位移符&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> count := <span class=\"number\">0</span>; count &lt; <span class=\"number\">3</span>; count++ &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 开始</span></span><br><span class=\"line\">\t\tstart := time.Now()</span><br><span class=\"line\">\t\techoString += <span class=\"string\">&quot;第&quot;</span> + strconv.Itoa(count+<span class=\"number\">1</span>) + <span class=\"string\">&quot;次:&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; maxI; i++ &#123;</span><br><span class=\"line\">\t\t\t_ = (integer &lt;&lt; <span class=\"number\">10</span>) - (integer * <span class=\"number\">24</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 结束</span></span><br><span class=\"line\">\t\tend := time.Now()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tbetweenTime := <span class=\"keyword\">float64</span>(end.Sub(start).Nanoseconds()) / <span class=\"number\">1000000000</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\techoString += strconv.FormatFloat(betweenTime, <span class=\"string\">&#x27;f&#x27;</span>, <span class=\"number\">10</span>, <span class=\"number\">64</span>) + <span class=\"string\">&quot;秒&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(echoString)</span><br><span class=\"line\"></span><br><span class=\"line\">\techoString = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;方案3：乘以1024&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> count := <span class=\"number\">0</span>; count &lt; <span class=\"number\">3</span>; count++ &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 开始</span></span><br><span class=\"line\">\t\tstart := time.Now()</span><br><span class=\"line\">\t\techoString += <span class=\"string\">&quot;第&quot;</span> + strconv.Itoa(count+<span class=\"number\">1</span>) + <span class=\"string\">&quot;次:&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; maxI; i++ &#123;</span><br><span class=\"line\">\t\t\t_ = (integer * <span class=\"number\">1024</span>) - (integer * <span class=\"number\">24</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 结束</span></span><br><span class=\"line\">\t\tend := time.Now()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tbetweenTime := <span class=\"keyword\">float64</span>(end.Sub(start).Nanoseconds()) / <span class=\"number\">1000000000</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\techoString += strconv.FormatFloat(betweenTime, <span class=\"string\">&#x27;f&#x27;</span>, <span class=\"number\">10</span>, <span class=\"number\">64</span>) + <span class=\"string\">&quot;秒&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(echoString)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"如何使用PHP最高效率的将一个正整数扩大一千倍？","description":"如何最高效率的将一个正整数扩大一千倍？当这个问题被抛给人脑的时候，接受过优秀的九年义务教育的我们稍加思索就能给出一个调皮而又不失大师风范的答案：添三个零就行了~但是当这个问题交给程序员用代码解决的时候，问题就要从编程的角度去考虑。","keywords":"Ubuntu, Laravel, php","top_img":"/images/php/PhpCover.png","cover":"/images/php/PhpCover.png","date":"2021-08-12T07:42:15.000Z","updated":"2021-08-12T07:42:15.000Z","_content":"# 如何使用PHP最高效率的将一个正整数扩大一千倍？\n\n## 方案制定\n\n如何最高效率的将一个正整数扩大一千倍？\n\n当这个问题被抛给人脑的时候，接受过优秀的九年义务教育的我们稍加思索就能给出一个调皮而又不失大师风范的答案：添三个零就行了~\n\n但是当这个问题交给程序员用代码解决的时候，问题就要从编程的角度去考虑。我作为`phper`第一时间想到的方案分别是\n- 方案1：在数字末尾粘连字符串 \"000\"\n- 方案2：将原数字简单的乘以 1000\n\n当我把这个问题丢给我的朋友的时候，他告诉我：\n方案1肯定不行！你应该采用方案2，但是如果你足够鸡贼的话，你应该采用`正整数 X 1024 - 正整数 X 24`!\n因为计算机是二进制，当你告诉他要乘以1000的时候，他会进行`正整数 X 512 + 正整数 X 256 + 正整数 X 128 + 正整数 X 128 + 正整数 X 64 + 正整数 X 32 + 正整数 X 8`，一直累加到凑齐 正整数的 1000 倍 为止。而运算`2的10次方`要比那一串加号更快接近结果。\n\n## 实践出真知\n大佬的这段话很快打动了我。为了践行大佬的真知，证明大佬的阐述对我犹如醍醐灌顶般点醒梦中人，我迅速写出了一小段方法，将一个随机正整数扩大1000倍的算法用三种不同的方法分别跑 一千万次，查看各个方法运行的效率\n\n```php\n// 使用 laravel 的 Commands 实现\n// 图表内容\n$headers = ['次数', '方案1：拼接法', '方案2：乘1000', '方案3：乘以 1024'];\n$data = [\n    [0=>'第一次'],\n    [0=>'第二次'],\n    [0=>'第三次']\n];\n// 每个方法执行三次\nfor ($count = 0; $count < 3; $count ++) {\n    // 生成变量名 ： plan1start1\n    $start = Carbon::now()->getPreciseTimestamp();\n    for ($i = 0; $i < 10000000; $i ++)\n    {\n        $integer = rand(1, 999);\n        $result = (int)($integer . '000');\n    }\n    $end = Carbon::now()->getPreciseTimestamp();\n    $data[$count][] = ($end - $start)/1000000 . '秒';\n}\n\nfor ($count = 0; $count < 3; $count ++) {\n    $start = Carbon::now()->getPreciseTimestamp();\n    for ($i = 0; $i < 10000000; $i ++)\n    {\n        $integer = rand(1, 999);\n        $result = $integer * 1000;\n    }\n    $end = Carbon::now()->getPreciseTimestamp();\n    $data[$count][] = ($end - $start)/1000000 . '秒';\n}\n\nfor ($count = 0; $count < 3; $count ++) {\n    $start = Carbon::now()->getPreciseTimestamp();\n    for ($i = 0; $i < 10000000; $i ++)\n    {\n        $integer = rand(1, 999);\n        $result = $integer * 1024 - $integer * 24;\n    }\n    $end = Carbon::now()->getPreciseTimestamp();\n    $data[$count][] = ($end - $start)/1000000 . '秒';\n}\n$this->table($headers, $data);\n```\n\n将这段代码运行多次后均得到一个较为稳定的结果：\n\n![php多次运行结果](/images/php/PhpExpandsPositiveIntegersByAFactorOf1000-image01.png)\n\n看到这个结果，大大的疑问重新占领了我小小的脑瓜。`乘以 1024 再减去 乘以 24` 反而比`直接乘以 1000`慢一些。当我拿着这个结果去寻找大佬解决疑惑时，得到了他这样的回答：\n\n平时工作不够多是不是？还有空做这种试验？\n\n## 对试验结果的思考\n\n暗戳戳鄙夷他一把，顺便把他在我心中的地位从`大佬`降格为`我的某个不愿透露姓名的普通朋友`。我继续了对这件事请的思考。\n\n在正整数后面拼接字符串 '000'，要把这个正整数转换为字符串，然后拼接字符串 '000'，之后再转回正整数。计算的复杂程度远超正整数的直接计算，时间上明显劣于后者，这点经过验证也毋庸置疑。\n\n但是我的某个不愿透露姓名的豆豆同学对`二进制`计算模式解释的同样头头是道。我学习的是`解释型语言 php`，这意味着有一群对代码理解达到骨灰级的玩家在我看不到的地方对`php`进行了大量的算法优化。而豆豆同学学习的是`编译型语言 C++`。是不是这种解释型语言的不同点，导致了本次运算结果的不同？\n\n所以我计划对这个问题进一步挖掘，将在下一篇博文『[用计算证明：我远远低估了编译器](/go/CompiledLanguageComputationOfMultiplication.md)』中使用`编译型语言 golang`对这个课题再次进行讨论。","source":"_posts/php/ExpandsPositiveIntegersByAFactorOf1000.md","raw":"---\ntitle: 如何使用PHP最高效率的将一个正整数扩大一千倍？\ndescription: 如何最高效率的将一个正整数扩大一千倍？当这个问题被抛给人脑的时候，接受过优秀的九年义务教育的我们稍加思索就能给出一个调皮而又不失大师风范的答案：添三个零就行了~但是当这个问题交给程序员用代码解决的时候，问题就要从编程的角度去考虑。\nkeywords: Ubuntu, Laravel, php\ntop_img: /images/php/PhpCover.png\ncover: /images/php/PhpCover.png\ntags:\n    - PHP\n    - 算法优化\ncategories:\n    - PHP\ndate: 2021-08-12 15:42:15\nupdated: 2021-08-12 15:42:15\n---\n# 如何使用PHP最高效率的将一个正整数扩大一千倍？\n\n## 方案制定\n\n如何最高效率的将一个正整数扩大一千倍？\n\n当这个问题被抛给人脑的时候，接受过优秀的九年义务教育的我们稍加思索就能给出一个调皮而又不失大师风范的答案：添三个零就行了~\n\n但是当这个问题交给程序员用代码解决的时候，问题就要从编程的角度去考虑。我作为`phper`第一时间想到的方案分别是\n- 方案1：在数字末尾粘连字符串 \"000\"\n- 方案2：将原数字简单的乘以 1000\n\n当我把这个问题丢给我的朋友的时候，他告诉我：\n方案1肯定不行！你应该采用方案2，但是如果你足够鸡贼的话，你应该采用`正整数 X 1024 - 正整数 X 24`!\n因为计算机是二进制，当你告诉他要乘以1000的时候，他会进行`正整数 X 512 + 正整数 X 256 + 正整数 X 128 + 正整数 X 128 + 正整数 X 64 + 正整数 X 32 + 正整数 X 8`，一直累加到凑齐 正整数的 1000 倍 为止。而运算`2的10次方`要比那一串加号更快接近结果。\n\n## 实践出真知\n大佬的这段话很快打动了我。为了践行大佬的真知，证明大佬的阐述对我犹如醍醐灌顶般点醒梦中人，我迅速写出了一小段方法，将一个随机正整数扩大1000倍的算法用三种不同的方法分别跑 一千万次，查看各个方法运行的效率\n\n```php\n// 使用 laravel 的 Commands 实现\n// 图表内容\n$headers = ['次数', '方案1：拼接法', '方案2：乘1000', '方案3：乘以 1024'];\n$data = [\n    [0=>'第一次'],\n    [0=>'第二次'],\n    [0=>'第三次']\n];\n// 每个方法执行三次\nfor ($count = 0; $count < 3; $count ++) {\n    // 生成变量名 ： plan1start1\n    $start = Carbon::now()->getPreciseTimestamp();\n    for ($i = 0; $i < 10000000; $i ++)\n    {\n        $integer = rand(1, 999);\n        $result = (int)($integer . '000');\n    }\n    $end = Carbon::now()->getPreciseTimestamp();\n    $data[$count][] = ($end - $start)/1000000 . '秒';\n}\n\nfor ($count = 0; $count < 3; $count ++) {\n    $start = Carbon::now()->getPreciseTimestamp();\n    for ($i = 0; $i < 10000000; $i ++)\n    {\n        $integer = rand(1, 999);\n        $result = $integer * 1000;\n    }\n    $end = Carbon::now()->getPreciseTimestamp();\n    $data[$count][] = ($end - $start)/1000000 . '秒';\n}\n\nfor ($count = 0; $count < 3; $count ++) {\n    $start = Carbon::now()->getPreciseTimestamp();\n    for ($i = 0; $i < 10000000; $i ++)\n    {\n        $integer = rand(1, 999);\n        $result = $integer * 1024 - $integer * 24;\n    }\n    $end = Carbon::now()->getPreciseTimestamp();\n    $data[$count][] = ($end - $start)/1000000 . '秒';\n}\n$this->table($headers, $data);\n```\n\n将这段代码运行多次后均得到一个较为稳定的结果：\n\n![php多次运行结果](/images/php/PhpExpandsPositiveIntegersByAFactorOf1000-image01.png)\n\n看到这个结果，大大的疑问重新占领了我小小的脑瓜。`乘以 1024 再减去 乘以 24` 反而比`直接乘以 1000`慢一些。当我拿着这个结果去寻找大佬解决疑惑时，得到了他这样的回答：\n\n平时工作不够多是不是？还有空做这种试验？\n\n## 对试验结果的思考\n\n暗戳戳鄙夷他一把，顺便把他在我心中的地位从`大佬`降格为`我的某个不愿透露姓名的普通朋友`。我继续了对这件事请的思考。\n\n在正整数后面拼接字符串 '000'，要把这个正整数转换为字符串，然后拼接字符串 '000'，之后再转回正整数。计算的复杂程度远超正整数的直接计算，时间上明显劣于后者，这点经过验证也毋庸置疑。\n\n但是我的某个不愿透露姓名的豆豆同学对`二进制`计算模式解释的同样头头是道。我学习的是`解释型语言 php`，这意味着有一群对代码理解达到骨灰级的玩家在我看不到的地方对`php`进行了大量的算法优化。而豆豆同学学习的是`编译型语言 C++`。是不是这种解释型语言的不同点，导致了本次运算结果的不同？\n\n所以我计划对这个问题进一步挖掘，将在下一篇博文『[用计算证明：我远远低估了编译器](/go/CompiledLanguageComputationOfMultiplication.md)』中使用`编译型语言 golang`对这个课题再次进行讨论。","slug":"php/ExpandsPositiveIntegersByAFactorOf1000","published":1,"_id":"cks8qtwry000dsku42turftub","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"如何使用PHP最高效率的将一个正整数扩大一千倍？\"><a href=\"#如何使用PHP最高效率的将一个正整数扩大一千倍？\" class=\"headerlink\" title=\"如何使用PHP最高效率的将一个正整数扩大一千倍？\"></a>如何使用PHP最高效率的将一个正整数扩大一千倍？</h1><h2 id=\"方案制定\"><a href=\"#方案制定\" class=\"headerlink\" title=\"方案制定\"></a>方案制定</h2><p>如何最高效率的将一个正整数扩大一千倍？</p>\n<p>当这个问题被抛给人脑的时候，接受过优秀的九年义务教育的我们稍加思索就能给出一个调皮而又不失大师风范的答案：添三个零就行了~</p>\n<p>但是当这个问题交给程序员用代码解决的时候，问题就要从编程的角度去考虑。我作为<code>phper</code>第一时间想到的方案分别是</p>\n<ul>\n<li>方案1：在数字末尾粘连字符串 “000”</li>\n<li>方案2：将原数字简单的乘以 1000</li>\n</ul>\n<p>当我把这个问题丢给我的朋友的时候，他告诉我：<br>方案1肯定不行！你应该采用方案2，但是如果你足够鸡贼的话，你应该采用<code>正整数 X 1024 - 正整数 X 24</code>!<br>因为计算机是二进制，当你告诉他要乘以1000的时候，他会进行<code>正整数 X 512 + 正整数 X 256 + 正整数 X 128 + 正整数 X 128 + 正整数 X 64 + 正整数 X 32 + 正整数 X 8</code>，一直累加到凑齐 正整数的 1000 倍 为止。而运算<code>2的10次方</code>要比那一串加号更快接近结果。</p>\n<h2 id=\"实践出真知\"><a href=\"#实践出真知\" class=\"headerlink\" title=\"实践出真知\"></a>实践出真知</h2><p>大佬的这段话很快打动了我。为了践行大佬的真知，证明大佬的阐述对我犹如醍醐灌顶般点醒梦中人，我迅速写出了一小段方法，将一个随机正整数扩大1000倍的算法用三种不同的方法分别跑 一千万次，查看各个方法运行的效率</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用 laravel 的 Commands 实现</span></span><br><span class=\"line\"><span class=\"comment\">// 图表内容</span></span><br><span class=\"line\"><span class=\"variable\">$headers</span> = [<span class=\"string\">&#x27;次数&#x27;</span>, <span class=\"string\">&#x27;方案1：拼接法&#x27;</span>, <span class=\"string\">&#x27;方案2：乘1000&#x27;</span>, <span class=\"string\">&#x27;方案3：乘以 1024&#x27;</span>];</span><br><span class=\"line\"><span class=\"variable\">$data</span> = [</span><br><span class=\"line\">    [<span class=\"number\">0</span>=&gt;<span class=\"string\">&#x27;第一次&#x27;</span>],</span><br><span class=\"line\">    [<span class=\"number\">0</span>=&gt;<span class=\"string\">&#x27;第二次&#x27;</span>],</span><br><span class=\"line\">    [<span class=\"number\">0</span>=&gt;<span class=\"string\">&#x27;第三次&#x27;</span>]</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"comment\">// 每个方法执行三次</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"variable\">$count</span> = <span class=\"number\">0</span>; <span class=\"variable\">$count</span> &lt; <span class=\"number\">3</span>; <span class=\"variable\">$count</span> ++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 生成变量名 ： plan1start1</span></span><br><span class=\"line\">    <span class=\"variable\">$start</span> = Carbon::now()-&gt;getPreciseTimestamp();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"variable\">$i</span> = <span class=\"number\">0</span>; <span class=\"variable\">$i</span> &lt; <span class=\"number\">10000000</span>; <span class=\"variable\">$i</span> ++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"variable\">$integer</span> = rand(<span class=\"number\">1</span>, <span class=\"number\">999</span>);</span><br><span class=\"line\">        <span class=\"variable\">$result</span> = (<span class=\"keyword\">int</span>)(<span class=\"variable\">$integer</span> . <span class=\"string\">&#x27;000&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable\">$end</span> = Carbon::now()-&gt;getPreciseTimestamp();</span><br><span class=\"line\">    <span class=\"variable\">$data</span>[<span class=\"variable\">$count</span>][] = (<span class=\"variable\">$end</span> - <span class=\"variable\">$start</span>)/<span class=\"number\">1000000</span> . <span class=\"string\">&#x27;秒&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"variable\">$count</span> = <span class=\"number\">0</span>; <span class=\"variable\">$count</span> &lt; <span class=\"number\">3</span>; <span class=\"variable\">$count</span> ++) &#123;</span><br><span class=\"line\">    <span class=\"variable\">$start</span> = Carbon::now()-&gt;getPreciseTimestamp();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"variable\">$i</span> = <span class=\"number\">0</span>; <span class=\"variable\">$i</span> &lt; <span class=\"number\">10000000</span>; <span class=\"variable\">$i</span> ++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"variable\">$integer</span> = rand(<span class=\"number\">1</span>, <span class=\"number\">999</span>);</span><br><span class=\"line\">        <span class=\"variable\">$result</span> = <span class=\"variable\">$integer</span> * <span class=\"number\">1000</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable\">$end</span> = Carbon::now()-&gt;getPreciseTimestamp();</span><br><span class=\"line\">    <span class=\"variable\">$data</span>[<span class=\"variable\">$count</span>][] = (<span class=\"variable\">$end</span> - <span class=\"variable\">$start</span>)/<span class=\"number\">1000000</span> . <span class=\"string\">&#x27;秒&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"variable\">$count</span> = <span class=\"number\">0</span>; <span class=\"variable\">$count</span> &lt; <span class=\"number\">3</span>; <span class=\"variable\">$count</span> ++) &#123;</span><br><span class=\"line\">    <span class=\"variable\">$start</span> = Carbon::now()-&gt;getPreciseTimestamp();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"variable\">$i</span> = <span class=\"number\">0</span>; <span class=\"variable\">$i</span> &lt; <span class=\"number\">10000000</span>; <span class=\"variable\">$i</span> ++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"variable\">$integer</span> = rand(<span class=\"number\">1</span>, <span class=\"number\">999</span>);</span><br><span class=\"line\">        <span class=\"variable\">$result</span> = <span class=\"variable\">$integer</span> * <span class=\"number\">1024</span> - <span class=\"variable\">$integer</span> * <span class=\"number\">24</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable\">$end</span> = Carbon::now()-&gt;getPreciseTimestamp();</span><br><span class=\"line\">    <span class=\"variable\">$data</span>[<span class=\"variable\">$count</span>][] = (<span class=\"variable\">$end</span> - <span class=\"variable\">$start</span>)/<span class=\"number\">1000000</span> . <span class=\"string\">&#x27;秒&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">$this</span>-&gt;table(<span class=\"variable\">$headers</span>, <span class=\"variable\">$data</span>);</span><br></pre></td></tr></table></figure>\n\n<p>将这段代码运行多次后均得到一个较为稳定的结果：</p>\n<p><img src=\"/images/php/PhpExpandsPositiveIntegersByAFactorOf1000-image01.png\" alt=\"php多次运行结果\"></p>\n<p>看到这个结果，大大的疑问重新占领了我小小的脑瓜。<code>乘以 1024 再减去 乘以 24</code> 反而比<code>直接乘以 1000</code>慢一些。当我拿着这个结果去寻找大佬解决疑惑时，得到了他这样的回答：</p>\n<p>平时工作不够多是不是？还有空做这种试验？</p>\n<h2 id=\"对试验结果的思考\"><a href=\"#对试验结果的思考\" class=\"headerlink\" title=\"对试验结果的思考\"></a>对试验结果的思考</h2><p>暗戳戳鄙夷他一把，顺便把他在我心中的地位从<code>大佬</code>降格为<code>我的某个不愿透露姓名的普通朋友</code>。我继续了对这件事请的思考。</p>\n<p>在正整数后面拼接字符串 ‘000’，要把这个正整数转换为字符串，然后拼接字符串 ‘000’，之后再转回正整数。计算的复杂程度远超正整数的直接计算，时间上明显劣于后者，这点经过验证也毋庸置疑。</p>\n<p>但是我的某个不愿透露姓名的豆豆同学对<code>二进制</code>计算模式解释的同样头头是道。我学习的是<code>解释型语言 php</code>，这意味着有一群对代码理解达到骨灰级的玩家在我看不到的地方对<code>php</code>进行了大量的算法优化。而豆豆同学学习的是<code>编译型语言 C++</code>。是不是这种解释型语言的不同点，导致了本次运算结果的不同？</p>\n<p>所以我计划对这个问题进一步挖掘，将在下一篇博文『<a href=\"/go/CompiledLanguageComputationOfMultiplication.md\">用计算证明：我远远低估了编译器</a>』中使用<code>编译型语言 golang</code>对这个课题再次进行讨论。</p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<h1 id=\"如何使用PHP最高效率的将一个正整数扩大一千倍？\"><a href=\"#如何使用PHP最高效率的将一个正整数扩大一千倍？\" class=\"headerlink\" title=\"如何使用PHP最高效率的将一个正整数扩大一千倍？\"></a>如何使用PHP最高效率的将一个正整数扩大一千倍？</h1><h2 id=\"方案制定\"><a href=\"#方案制定\" class=\"headerlink\" title=\"方案制定\"></a>方案制定</h2><p>如何最高效率的将一个正整数扩大一千倍？</p>\n<p>当这个问题被抛给人脑的时候，接受过优秀的九年义务教育的我们稍加思索就能给出一个调皮而又不失大师风范的答案：添三个零就行了~</p>\n<p>但是当这个问题交给程序员用代码解决的时候，问题就要从编程的角度去考虑。我作为<code>phper</code>第一时间想到的方案分别是</p>\n<ul>\n<li>方案1：在数字末尾粘连字符串 “000”</li>\n<li>方案2：将原数字简单的乘以 1000</li>\n</ul>\n<p>当我把这个问题丢给我的朋友的时候，他告诉我：<br>方案1肯定不行！你应该采用方案2，但是如果你足够鸡贼的话，你应该采用<code>正整数 X 1024 - 正整数 X 24</code>!<br>因为计算机是二进制，当你告诉他要乘以1000的时候，他会进行<code>正整数 X 512 + 正整数 X 256 + 正整数 X 128 + 正整数 X 128 + 正整数 X 64 + 正整数 X 32 + 正整数 X 8</code>，一直累加到凑齐 正整数的 1000 倍 为止。而运算<code>2的10次方</code>要比那一串加号更快接近结果。</p>\n<h2 id=\"实践出真知\"><a href=\"#实践出真知\" class=\"headerlink\" title=\"实践出真知\"></a>实践出真知</h2><p>大佬的这段话很快打动了我。为了践行大佬的真知，证明大佬的阐述对我犹如醍醐灌顶般点醒梦中人，我迅速写出了一小段方法，将一个随机正整数扩大1000倍的算法用三种不同的方法分别跑 一千万次，查看各个方法运行的效率</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用 laravel 的 Commands 实现</span></span><br><span class=\"line\"><span class=\"comment\">// 图表内容</span></span><br><span class=\"line\"><span class=\"variable\">$headers</span> = [<span class=\"string\">&#x27;次数&#x27;</span>, <span class=\"string\">&#x27;方案1：拼接法&#x27;</span>, <span class=\"string\">&#x27;方案2：乘1000&#x27;</span>, <span class=\"string\">&#x27;方案3：乘以 1024&#x27;</span>];</span><br><span class=\"line\"><span class=\"variable\">$data</span> = [</span><br><span class=\"line\">    [<span class=\"number\">0</span>=&gt;<span class=\"string\">&#x27;第一次&#x27;</span>],</span><br><span class=\"line\">    [<span class=\"number\">0</span>=&gt;<span class=\"string\">&#x27;第二次&#x27;</span>],</span><br><span class=\"line\">    [<span class=\"number\">0</span>=&gt;<span class=\"string\">&#x27;第三次&#x27;</span>]</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"comment\">// 每个方法执行三次</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"variable\">$count</span> = <span class=\"number\">0</span>; <span class=\"variable\">$count</span> &lt; <span class=\"number\">3</span>; <span class=\"variable\">$count</span> ++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 生成变量名 ： plan1start1</span></span><br><span class=\"line\">    <span class=\"variable\">$start</span> = Carbon::now()-&gt;getPreciseTimestamp();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"variable\">$i</span> = <span class=\"number\">0</span>; <span class=\"variable\">$i</span> &lt; <span class=\"number\">10000000</span>; <span class=\"variable\">$i</span> ++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"variable\">$integer</span> = rand(<span class=\"number\">1</span>, <span class=\"number\">999</span>);</span><br><span class=\"line\">        <span class=\"variable\">$result</span> = (<span class=\"keyword\">int</span>)(<span class=\"variable\">$integer</span> . <span class=\"string\">&#x27;000&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable\">$end</span> = Carbon::now()-&gt;getPreciseTimestamp();</span><br><span class=\"line\">    <span class=\"variable\">$data</span>[<span class=\"variable\">$count</span>][] = (<span class=\"variable\">$end</span> - <span class=\"variable\">$start</span>)/<span class=\"number\">1000000</span> . <span class=\"string\">&#x27;秒&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"variable\">$count</span> = <span class=\"number\">0</span>; <span class=\"variable\">$count</span> &lt; <span class=\"number\">3</span>; <span class=\"variable\">$count</span> ++) &#123;</span><br><span class=\"line\">    <span class=\"variable\">$start</span> = Carbon::now()-&gt;getPreciseTimestamp();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"variable\">$i</span> = <span class=\"number\">0</span>; <span class=\"variable\">$i</span> &lt; <span class=\"number\">10000000</span>; <span class=\"variable\">$i</span> ++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"variable\">$integer</span> = rand(<span class=\"number\">1</span>, <span class=\"number\">999</span>);</span><br><span class=\"line\">        <span class=\"variable\">$result</span> = <span class=\"variable\">$integer</span> * <span class=\"number\">1000</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable\">$end</span> = Carbon::now()-&gt;getPreciseTimestamp();</span><br><span class=\"line\">    <span class=\"variable\">$data</span>[<span class=\"variable\">$count</span>][] = (<span class=\"variable\">$end</span> - <span class=\"variable\">$start</span>)/<span class=\"number\">1000000</span> . <span class=\"string\">&#x27;秒&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"variable\">$count</span> = <span class=\"number\">0</span>; <span class=\"variable\">$count</span> &lt; <span class=\"number\">3</span>; <span class=\"variable\">$count</span> ++) &#123;</span><br><span class=\"line\">    <span class=\"variable\">$start</span> = Carbon::now()-&gt;getPreciseTimestamp();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"variable\">$i</span> = <span class=\"number\">0</span>; <span class=\"variable\">$i</span> &lt; <span class=\"number\">10000000</span>; <span class=\"variable\">$i</span> ++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"variable\">$integer</span> = rand(<span class=\"number\">1</span>, <span class=\"number\">999</span>);</span><br><span class=\"line\">        <span class=\"variable\">$result</span> = <span class=\"variable\">$integer</span> * <span class=\"number\">1024</span> - <span class=\"variable\">$integer</span> * <span class=\"number\">24</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable\">$end</span> = Carbon::now()-&gt;getPreciseTimestamp();</span><br><span class=\"line\">    <span class=\"variable\">$data</span>[<span class=\"variable\">$count</span>][] = (<span class=\"variable\">$end</span> - <span class=\"variable\">$start</span>)/<span class=\"number\">1000000</span> . <span class=\"string\">&#x27;秒&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">$this</span>-&gt;table(<span class=\"variable\">$headers</span>, <span class=\"variable\">$data</span>);</span><br></pre></td></tr></table></figure>\n\n<p>将这段代码运行多次后均得到一个较为稳定的结果：</p>\n<p><img src=\"/images/php/PhpExpandsPositiveIntegersByAFactorOf1000-image01.png\" alt=\"php多次运行结果\"></p>\n<p>看到这个结果，大大的疑问重新占领了我小小的脑瓜。<code>乘以 1024 再减去 乘以 24</code> 反而比<code>直接乘以 1000</code>慢一些。当我拿着这个结果去寻找大佬解决疑惑时，得到了他这样的回答：</p>\n<p>平时工作不够多是不是？还有空做这种试验？</p>\n<h2 id=\"对试验结果的思考\"><a href=\"#对试验结果的思考\" class=\"headerlink\" title=\"对试验结果的思考\"></a>对试验结果的思考</h2><p>暗戳戳鄙夷他一把，顺便把他在我心中的地位从<code>大佬</code>降格为<code>我的某个不愿透露姓名的普通朋友</code>。我继续了对这件事请的思考。</p>\n<p>在正整数后面拼接字符串 ‘000’，要把这个正整数转换为字符串，然后拼接字符串 ‘000’，之后再转回正整数。计算的复杂程度远超正整数的直接计算，时间上明显劣于后者，这点经过验证也毋庸置疑。</p>\n<p>但是我的某个不愿透露姓名的豆豆同学对<code>二进制</code>计算模式解释的同样头头是道。我学习的是<code>解释型语言 php</code>，这意味着有一群对代码理解达到骨灰级的玩家在我看不到的地方对<code>php</code>进行了大量的算法优化。而豆豆同学学习的是<code>编译型语言 C++</code>。是不是这种解释型语言的不同点，导致了本次运算结果的不同？</p>\n<p>所以我计划对这个问题进一步挖掘，将在下一篇博文『<a href=\"/go/CompiledLanguageComputationOfMultiplication.md\">用计算证明：我远远低估了编译器</a>』中使用<code>编译型语言 golang</code>对这个课题再次进行讨论。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cks8qtwru0009sku42atb8iy4","category_id":"cks8qtwro0006sku463z98y9z","_id":"cks8qtwrz000esku4d1ajav0j"},{"post_id":"cks8qtwrk0004sku48dht9yb0","category_id":"cks8qtwro0006sku463z98y9z","_id":"cks8qtws0000hsku40l8g5agc"},{"post_id":"cks8qtwrn0005sku4gela99f5","category_id":"cks8qtwro0006sku463z98y9z","_id":"cks8qtws1000ksku46kt6c4kf"},{"post_id":"cks8qtwrq0008sku4fx8313vd","category_id":"cks8qtwro0006sku463z98y9z","_id":"cks8qtws2000nsku47jje8msk"},{"post_id":"cks8qtwrw000asku40rkv9lv8","category_id":"cks8qtws1000jsku423qm75cr","_id":"cks8qtws2000rsku4h0d1bc0j"},{"post_id":"cks8qtwry000dsku42turftub","category_id":"cks8qtws1000jsku423qm75cr","_id":"cks8qtws3000usku497t4ghms"}],"PostTag":[{"post_id":"cks8qtwrk0004sku48dht9yb0","tag_id":"cks8qtwrq0007sku4fsvgfxbw","_id":"cks8qtws0000isku402ty0jxb"},{"post_id":"cks8qtwrk0004sku48dht9yb0","tag_id":"cks8qtwrx000csku43d7ga387","_id":"cks8qtws1000lsku48nfy6506"},{"post_id":"cks8qtwrn0005sku4gela99f5","tag_id":"cks8qtwrq0007sku4fsvgfxbw","_id":"cks8qtws2000qsku4czwm4yww"},{"post_id":"cks8qtwrn0005sku4gela99f5","tag_id":"cks8qtws1000msku4f4qz5bnv","_id":"cks8qtws2000ssku47ibw203l"},{"post_id":"cks8qtwrq0008sku4fx8313vd","tag_id":"cks8qtwrq0007sku4fsvgfxbw","_id":"cks8qtws3000wsku42hx56m74"},{"post_id":"cks8qtwrq0008sku4fx8313vd","tag_id":"cks8qtws1000msku4f4qz5bnv","_id":"cks8qtws3000xsku4gbbn8peu"},{"post_id":"cks8qtwru0009sku42atb8iy4","tag_id":"cks8qtwrq0007sku4fsvgfxbw","_id":"cks8qtws3000zsku4cbhnceha"},{"post_id":"cks8qtwru0009sku42atb8iy4","tag_id":"cks8qtws1000msku4f4qz5bnv","_id":"cks8qtws40010sku4hpkla4xo"},{"post_id":"cks8qtwrw000asku40rkv9lv8","tag_id":"cks8qtws3000ysku4esyd99uy","_id":"cks8qtws40013sku45x0uaayx"},{"post_id":"cks8qtwrw000asku40rkv9lv8","tag_id":"cks8qtws40011sku4gxon9vc4","_id":"cks8qtws40014sku44ihe0x8k"},{"post_id":"cks8qtwry000dsku42turftub","tag_id":"cks8qtws3000ysku4esyd99uy","_id":"cks8qtws50016sku41rg80mzs"},{"post_id":"cks8qtwry000dsku42turftub","tag_id":"cks8qtws40011sku4gxon9vc4","_id":"cks8qtws50017sku466sr2o58"}],"Tag":[{"name":"Golang","_id":"cks8qtwrq0007sku4fsvgfxbw"},{"name":"研讨","_id":"cks8qtwrx000csku43d7ga387"},{"name":"入门","_id":"cks8qtws1000msku4f4qz5bnv"},{"name":"PHP","_id":"cks8qtws3000ysku4esyd99uy"},{"name":"算法优化","_id":"cks8qtws40011sku4gxon9vc4"}]}}