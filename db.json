{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/algolia.svg","path":"img/algolia.svg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":0},{"_id":"source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":0},{"_id":"source/img/home_page_background.png","path":"img/home_page_background.png","modified":0,"renderable":0},{"_id":"source/images/golang/CompiledLanguageComputationOfMultiplication01.png","path":"images/golang/CompiledLanguageComputationOfMultiplication01.png","modified":0,"renderable":0},{"_id":"source/images/golang/GolangCover1.png","path":"images/golang/GolangCover1.png","modified":0,"renderable":0},{"_id":"source/images/golang/CompiledLanguageComputationOfMultiplication02.png","path":"images/golang/CompiledLanguageComputationOfMultiplication02.png","modified":0,"renderable":0},{"_id":"source/images/golang/GolangCover2.jpg","path":"images/golang/GolangCover2.jpg","modified":0,"renderable":0},{"_id":"source/images/golang/GolangCover3.png","path":"images/golang/GolangCover3.png","modified":0,"renderable":0},{"_id":"source/images/golang/GolangCover4.png","path":"images/golang/GolangCover4.png","modified":0,"renderable":0},{"_id":"source/images/golang/golang-top-image.png","path":"images/golang/golang-top-image.png","modified":0,"renderable":0},{"_id":"source/images/laravel/laravel-top-image.png","path":"images/laravel/laravel-top-image.png","modified":0,"renderable":0},{"_id":"source/images/mysql/mysql-top-image.png","path":"images/mysql/mysql-top-image.png","modified":0,"renderable":0},{"_id":"source/images/mysql/MySQLCover1.png","path":"images/mysql/MySQLCover1.png","modified":0,"renderable":0},{"_id":"source/images/three-party/ThreePartyCover1.jpg","path":"images/three-party/ThreePartyCover1.jpg","modified":0,"renderable":0},{"_id":"source/images/three-party/ThreePartyCover2.png","path":"images/three-party/ThreePartyCover2.png","modified":0,"renderable":0},{"_id":"source/images/three-party/three-party-top-image.jpg","path":"images/three-party/three-party-top-image.jpg","modified":0,"renderable":0},{"_id":"source/images/tripartite/AgoraRecordTestReport01.png","path":"images/tripartite/AgoraRecordTestReport01.png","modified":0,"renderable":0},{"_id":"source/images/tripartite/AgoraRecordTestReport02.png","path":"images/tripartite/AgoraRecordTestReport02.png","modified":0,"renderable":0},{"_id":"source/images/tripartite/AgoraRecordTestReport03.png","path":"images/tripartite/AgoraRecordTestReport03.png","modified":0,"renderable":0},{"_id":"source/images/tripartite/AgoraRecordTestReport04.png","path":"images/tripartite/AgoraRecordTestReport04.png","modified":0,"renderable":0},{"_id":"source/images/tripartite/AgoraRecordTestReport05.png","path":"images/tripartite/AgoraRecordTestReport05.png","modified":0,"renderable":0},{"_id":"source/images/tripartite/AgoraRecordTestReport06.png","path":"images/tripartite/AgoraRecordTestReport06.png","modified":0,"renderable":0},{"_id":"source/images/tripartite/AgoraRecordTestReport07.png","path":"images/tripartite/AgoraRecordTestReport07.png","modified":0,"renderable":0},{"_id":"source/images/tripartite/AgoraRecordTestReport08.png","path":"images/tripartite/AgoraRecordTestReport08.png","modified":0,"renderable":0},{"_id":"source/images/tripartite/AgoraRecordTestReport09.png","path":"images/tripartite/AgoraRecordTestReport09.png","modified":0,"renderable":0},{"_id":"source/images/tripartite/AgoraRecordTestReport11.png","path":"images/tripartite/AgoraRecordTestReport11.png","modified":0,"renderable":0},{"_id":"source/images/tripartite/AgoraRecordTestReport10.png","path":"images/tripartite/AgoraRecordTestReport10.png","modified":0,"renderable":0},{"_id":"source/images/tripartite/AgoraRecordTestReport12.png","path":"images/tripartite/AgoraRecordTestReport12.png","modified":0,"renderable":0},{"_id":"source/images/tripartite/AgoraRecordTestReport13.png","path":"images/tripartite/AgoraRecordTestReport13.png","modified":0,"renderable":0},{"_id":"source/images/tripartite/AgoraRecordTestReport14.png","path":"images/tripartite/AgoraRecordTestReport14.png","modified":0,"renderable":0},{"_id":"source/images/tripartite/AgoraRecordTestReport15.png","path":"images/tripartite/AgoraRecordTestReport15.png","modified":0,"renderable":0},{"_id":"source/images/web/WebCover1.jpg","path":"images/web/WebCover1.jpg","modified":0,"renderable":0},{"_id":"source/images/web/web-top-image.jpg","path":"images/web/web-top-image.jpg","modified":0,"renderable":0},{"_id":"source/images/php/DisplacementEfficiencyComparison01.png","path":"images/php/DisplacementEfficiencyComparison01.png","modified":0,"renderable":0},{"_id":"source/images/php/DisplacementEfficiencyComparison02.png","path":"images/php/DisplacementEfficiencyComparison02.png","modified":0,"renderable":0},{"_id":"source/images/php/PHPCover1.png","path":"images/php/PHPCover1.png","modified":0,"renderable":0},{"_id":"source/images/php/PHPCover2.png","path":"images/php/PHPCover2.png","modified":0,"renderable":0},{"_id":"source/images/php/PhpExpandsPositiveIntegersByAFactorOf1000-image01.png","path":"images/php/PhpExpandsPositiveIntegersByAFactorOf1000-image01.png","modified":0,"renderable":0},{"_id":"source/images/php/php-top-image.png","path":"images/php/php-top-image.png","modified":0,"renderable":0},{"_id":"source/images/ggt-coder/ggt-coder-cover.png","path":"images/ggt-coder/ggt-coder-cover.png","modified":0,"renderable":0},{"_id":"source/images/ggt-coder/menu-title.png","path":"images/ggt-coder/menu-title.png","modified":0,"renderable":0},{"_id":"source/images/ggt-coder/module_content.png","path":"images/ggt-coder/module_content.png","modified":0,"renderable":0},{"_id":"source/images/ggt-coder/project_content.png","path":"images/ggt-coder/project_content.png","modified":0,"renderable":0},{"_id":"source/images/ubuntu/UbuntuCover1.jpg","path":"images/ubuntu/UbuntuCover1.jpg","modified":0,"renderable":0},{"_id":"source/images/ubuntu/ubuntu-top-image.png","path":"images/ubuntu/ubuntu-top-image.png","modified":0,"renderable":0},{"_id":"source/images/vue/vue-top-image.png","path":"images/vue/vue-top-image.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/manifest.json","hash":"e09bee62d9836a09452457de91d7ffd5b7ebb34d","modified":1628747423816},{"_id":"source/_data/link.yml","hash":"3c9182c098ad951a57220e41ec8770bdcd6c4899","modified":1628654633219},{"_id":"source/categories/index.md","hash":"37aa1b8eb3e4a820cfa6d3e10d88a2c4730ea6fd","modified":1628654310091},{"_id":"source/img/favicon.png","hash":"2a3bc4b58ff26c14fdd61070d4c8bd666de9db14","modified":1628585095269},{"_id":"source/tags/index.md","hash":"9300253d04807c55516bcbcadca071d635bad7d7","modified":1628654336092},{"_id":"source/link/index.md","hash":"ee6d32372a3afd2ac2f1aecbf84a826008a37bc0","modified":1628654593841},{"_id":"source/_posts/ggt-coder/README.md","hash":"5360fd132d534008f8a026c82a9191b118bb884c","modified":1628840207443},{"_id":"source/_posts/ggt-coder/README_zh.md","hash":"4be6e7b8d15eecac9a398e63dfe8dcde8b7c9a5a","modified":1628840226675},{"_id":"source/_posts/mysql/CreateUserAndAuthorization.md","hash":"0e704bcd5689e5f8718b0dc7eae4945ea6eb90d9","modified":1628837257913},{"_id":"source/_posts/golang/CompiledLanguageComputationOfMultiplication.md","hash":"08b5dbc7e7b7b4aa845eee479fd43e4bc3a492d4","modified":1628837170068},{"_id":"source/_posts/golang/StartGolang.md","hash":"75ed6f95caf236408d2d1d5c9eef14c71768f479","modified":1628820370280},{"_id":"source/_posts/golang/GolangStringIntInterconversion.md","hash":"638dd6261ad6c1512b3f800786ada26ccc59fefc","modified":1628820380629},{"_id":"source/_posts/golang/Random.md","hash":"a8afe879297d8c9d0de9957847d43a1e1e91be3d","modified":1628837246380},{"_id":"source/_posts/php/ExpandsPositiveIntegersByAFactorOf1000.md","hash":"b392c7c6c77118944794dff9f70ea4c4980bbe3c","modified":1628840350198},{"_id":"source/_posts/php/DisplacementEfficiencyComparison.md","hash":"0913f6b277e10e3e43ad3444386d61acaaeed8a6","modified":1628837092056},{"_id":"source/_posts/web/LayuiDirectUploadToOSS.md","hash":"7ad074b8545d52e4d456b94533cbfa3102cc00da","modified":1628826946715},{"_id":"source/_posts/ubuntu/BuildLNMP.md","hash":"9342208de90906e1e8f110dfb0513ec39ae23b22","modified":1629960585418},{"_id":"source/_posts/three-party/AliyunSDK.md","hash":"973163d7a7ea15ca89b0c4eb591a274dc7c79ef4","modified":1628834786595},{"_id":"source/_posts/three-party/SentryBuild.md","hash":"199ac68e306b7328e0e9d8e3c89130dba830b519","modified":1628840300807},{"_id":"source/images/golang/CompiledLanguageComputationOfMultiplication01.png","hash":"402a8ae3357d34f807b7e5742219e610dc03504e","modified":1628757124122},{"_id":"source/_posts/three-party/SentryUse.md","hash":"5c0672f3e3b5d8d9c439f22c4bdf04d874e4032c","modified":1628837732510},{"_id":"source/images/golang/CompiledLanguageComputationOfMultiplication02.png","hash":"dc33261d172a05cd49f64766cb05cf8adddcdbca","modified":1628757124123},{"_id":"source/images/golang/GolangCover1.png","hash":"822c573b6e9037c3e2e666673564e03ce72407ff","modified":1628818392024},{"_id":"source/images/golang/GolangCover4.png","hash":"5e5f0b9784b51f5e8f91190c67bbab596b37cd31","modified":1628818233982},{"_id":"source/images/mysql/mysql-top-image.png","hash":"c363a2722bbdff4b245945af13235153c692dabe","modified":1628759917204},{"_id":"source/images/three-party/ThreePartyCover1.jpg","hash":"2dba18a4e251822854993d1b21694af029e39cba","modified":1628834127903},{"_id":"source/images/three-party/three-party-top-image.jpg","hash":"2d15c10fe5ebac17732602d696531617a0e2c39a","modified":1628834013333},{"_id":"source/images/tripartite/AgoraRecordTestReport05.png","hash":"350d64668d4e61e6da5f240e6168a037a59e5bc6","modified":1628757124136},{"_id":"source/images/tripartite/AgoraRecordTestReport06.png","hash":"12e5841c2278dc31794e0e0647fc6fee908041b9","modified":1628757124137},{"_id":"source/images/php/DisplacementEfficiencyComparison01.png","hash":"79e8107d4624df187b5fc98c329f22cdc8f78809","modified":1628757124125},{"_id":"source/images/php/DisplacementEfficiencyComparison02.png","hash":"36eb2ecf2b2dcb1f94f8442aa9f52f4e00a64b8b","modified":1628757124126},{"_id":"source/images/php/PHPCover2.png","hash":"2346374ac2440e91214a93af17d1b3d56105788a","modified":1628761608225},{"_id":"source/images/php/PhpExpandsPositiveIntegersByAFactorOf1000-image01.png","hash":"8bfb84d21b8c383a6bc871ecfa0ac146c2284c8a","modified":1628757124127},{"_id":"source/images/ggt-coder/ggt-coder-cover.png","hash":"8b6ffff3787fdca3801e07f0199e4933493f6d00","modified":1628821003718},{"_id":"source/images/ggt-coder/project_content.png","hash":"09c542d2d1c1a71bc58ab16265298a1c880ed79c","modified":1628757124121},{"_id":"source/images/ubuntu/UbuntuCover1.jpg","hash":"653525895405397f0df08e858e86234438aa1694","modified":1628838258233},{"_id":"source/img/avatar.jpg","hash":"1114527e4092d6e96767b79eb9fca5a10a028291","modified":1627889668202},{"_id":"source/images/golang/GolangCover2.jpg","hash":"2ab6265ad7320636fd4618b7d812153479f43ea5","modified":1628760538691},{"_id":"source/images/laravel/laravel-top-image.png","hash":"7a75f8b09e4003ae7b72239a43f161a0b922b632","modified":1628759997537},{"_id":"source/images/golang/golang-top-image.png","hash":"a2bb3dd27d3ffa0d6e2ea4a8f5a5d63c26a7b33e","modified":1628820077432},{"_id":"source/images/tripartite/AgoraRecordTestReport04.png","hash":"10aa4341ce489a4d527d2a4db56eaf6a7ad292ca","modified":1628757124135},{"_id":"source/images/tripartite/AgoraRecordTestReport07.png","hash":"1a79045b3565bfdcc3f9f8af486d6dc671b0fc22","modified":1628757124138},{"_id":"source/images/tripartite/AgoraRecordTestReport08.png","hash":"5dd7ef070e76c285a3d5a5072684d9ecfd5537f5","modified":1628757124139},{"_id":"source/images/tripartite/AgoraRecordTestReport09.png","hash":"255a63c2ca9c3362a646e20f5ce12b27515d8a15","modified":1628757124140},{"_id":"source/images/tripartite/AgoraRecordTestReport10.png","hash":"1f5263f6181e851a8a166bb0cf6d19d7a77dda3b","modified":1628757124142},{"_id":"source/images/tripartite/AgoraRecordTestReport12.png","hash":"a9101bb943da60c663a9b2a45ba67984327dc52b","modified":1628757124148},{"_id":"source/images/php/php-top-image.png","hash":"d9d4efb563bd4c7a620c4a3706d9d46d96aef1e8","modified":1628759748611},{"_id":"source/images/ggt-coder/menu-title.png","hash":"0f56df1cbd2380132305429c5ab8d3b4accae5ce","modified":1628757124119},{"_id":"source/images/ggt-coder/module_content.png","hash":"fe49e209058da5252b8a6c5015955881dbfbbf2d","modified":1628757124120},{"_id":"source/images/golang/GolangCover3.png","hash":"0d9ecda7e4115983e036751fd40f8e676bc8e8b6","modified":1628818333034},{"_id":"source/images/mysql/MySQLCover1.png","hash":"cd337ffa90fa6f23962bcbc5cf691c7db38230e2","modified":1628827260897},{"_id":"source/images/tripartite/AgoraRecordTestReport01.png","hash":"9df7febe6c4774e4491ea4d0b72dd2be2aa786f7","modified":1628757124131},{"_id":"source/images/tripartite/AgoraRecordTestReport03.png","hash":"8c446c125944bb59ad1c296fde8b827f8da7c034","modified":1628757124134},{"_id":"source/images/tripartite/AgoraRecordTestReport13.png","hash":"720e44948d2c7fc2086993e08b308158e65c88c2","modified":1628757124150},{"_id":"source/images/web/web-top-image.jpg","hash":"daa0b62b3d4820aafdbc5480b6af3da5ebf94a50","modified":1628822547078},{"_id":"source/images/three-party/ThreePartyCover2.png","hash":"76e1414dd73a622e821d2e1ba5498de54b293023","modified":1628835857451},{"_id":"source/images/tripartite/AgoraRecordTestReport02.png","hash":"ec9b70e7d67a6d498cb1be20096c368a2a97e0a3","modified":1628757124132},{"_id":"source/images/tripartite/AgoraRecordTestReport14.png","hash":"5f05c160578dc29df8abd9c74f3a59d12c9a9beb","modified":1628757124152},{"_id":"source/images/php/PHPCover1.png","hash":"36a8bce7a9a5e7c1eb4abed529dbb2425749aa5e","modified":1628820246895},{"_id":"source/images/tripartite/AgoraRecordTestReport15.png","hash":"62ff962a120b2300eecd9a0907316bcf06cbaa31","modified":1628757124154},{"_id":"source/images/web/WebCover1.jpg","hash":"eb3b0ff944f9cf14dfb07d08647c29520fbce1bf","modified":1628823222856},{"_id":"source/images/vue/vue-top-image.png","hash":"b614ae0edb3da4e7171f919e50416fda1dfa8c74","modified":1628822445872},{"_id":"themes/butterfly/README.md","hash":"0f0eaee9c30ef1e9aed588fbb3e8263401348b55","modified":1628581041375},{"_id":"themes/butterfly/LICENSE","hash":"c8bc7df08db9dd3b39c2c2259a163a36cf2f6808","modified":1628581041374},{"_id":"themes/butterfly/README_CN.md","hash":"70ec43a8aa0776b5a0a2a6b6009dd253fa3679eb","modified":1628581041376},{"_id":"themes/butterfly/package.json","hash":"40fd25d5ec0895596ecba874740e90167fdb0d0d","modified":1628581041448},{"_id":"themes/butterfly/_config.yml","hash":"d9593b423071020f7b970dd932128be03b9ad3e3","modified":1628581041377},{"_id":"themes/butterfly/.github/stale.yml","hash":"7a131b8aa4936fbcedea3517299e1cdc1bcbcaab","modified":1628581041373},{"_id":"themes/butterfly/languages/default.yml","hash":"b9dbdb20bd1f1c7ca8a8f38635bdc4ed8bb1d44c","modified":1628581041378},{"_id":"themes/butterfly/languages/en.yml","hash":"fd1c1211c8f166d089a7697872185a81182d92e1","modified":1628581041378},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"736bec8eeb3a29d0d43669d81f1fa686e02be18e","modified":1628581041380},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"46685048a05b419ed9c72cf31bd6e5efef7524f2","modified":1628581041379},{"_id":"themes/butterfly/layout/archive.pug","hash":"2d5bf4b1755f89898c579c18d601be83d2bc8ebd","modified":1628581041381},{"_id":"themes/butterfly/layout/page.pug","hash":"cae76ce64c114fd192b5da5a7d14aa0240df2f06","modified":1628581041445},{"_id":"themes/butterfly/layout/category.pug","hash":"5ac3cd8172088843cec03175c612a9c85f49cf2e","modified":1628581041381},{"_id":"themes/butterfly/layout/post.pug","hash":"8f2f13c9ae099dd83827ce3dbac5abc8d7d5bde3","modified":1628581041446},{"_id":"themes/butterfly/layout/index.pug","hash":"648dcbdb3d145a710de81c909e000e8664d2ac9c","modified":1628581041445},{"_id":"themes/butterfly/layout/tag.pug","hash":"4bb5efc6dabdf1626685bf6771aaa1467155ae86","modified":1628581041447},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.md","hash":"205a69ba038cf76affcdc1f39d88a8cb8079fc12","modified":1628581041371},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/custom.md","hash":"b41123ce5f0ccfa9e06a68b9f3cb59ba040a049a","modified":1628581041371},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"e320b40c051bae1549156cd5ea4a51383cf78598","modified":1628581041374},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.md","hash":"0b7979a908ebe8c350d73b6731f0be3e29d401c2","modified":1628581041370},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"bd29f20fad3d3fab600940e7a6dc9a803943cb33","modified":1628581041451},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"98ef86305b8d2ad9dbab969715e1ac93b407f036","modified":1628581041450},{"_id":"themes/butterfly/scripts/events/init.js","hash":"5803aa55d9c21e51ea64c1ae50c9b602979aaee2","modified":1628581041449},{"_id":"themes/butterfly/scripts/events/404.js","hash":"f1d1c378356b776e9b2a8411e6dca88dc8c3245c","modified":1628581041449},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"8cb7ef368cc2ac7f4a13c2959908b1574e572acf","modified":1628581041457},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"7ffbe625f184116e442648c8416ea58614a1cef8","modified":1628581041457},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"1e1da036fae593be7e2cc502f0a5cbeb2e7881d1","modified":1628581041450},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"7641adb0d520c5ff29dd36fc1fb8617c52ecc9fb","modified":1628581041458},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"551f1b8edc973bd8afc5cce2eae546f002fa84c3","modified":1628581041459},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"eb019da8c190923e759d2fd7cb846281eef8594e","modified":1628581041458},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"08ea00791bd4738952234cb5d8360e119df6f875","modified":1628581041460},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"420ba8b11e7316b4c09eb301d39814bc9bae9f90","modified":1628581041460},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"4f712b4ea383b59a3122683db1d54c04a79ccc5d","modified":1628581041453},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"829229b0074b332ba779e159219eb2466612ff6e","modified":1628581041459},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"376e1884ea764404c38b1e73b16de0358ece519e","modified":1628581041454},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"98ab13a60413d68bd9d02d54d121c66a6d4634d2","modified":1628581041455},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"384de3c04809ec5fa996e8aa0628f770cd4bff3e","modified":1628581041455},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"51112d3db07f87034422ff4acc69ca2eb4215b4e","modified":1628581041456},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"3cdc5e32d0f1e5866bcf86f94a0d76aaf7142937","modified":1628581041382},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"a1ca58fdff74b890cade94479f8f0eb9ce7e5e73","modified":1628581041382},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"8715948b93e7508b84d913be1969b28c6b067b9b","modified":1628581041383},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"f4dcc0a596eb9801c4d3c033d018d0abb413c8e5","modified":1628581041384},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"f2e1d8a05d2e409c4804f67a98f5f59f527d6627","modified":1628581041394},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"bb1847f45e713cc88b1c0a97035ec01f0209c995","modified":1628581041400},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"9b5243385f7a90e0103c25c531a1e7f2f1884c15","modified":1628581041403},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"66b14189a1913119ff5927c0b933b5c73fb37f48","modified":1628581041402},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1628581041495},{"_id":"themes/butterfly/source/img/algolia.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1628581041495},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1628581041496},{"_id":"themes/butterfly/source/js/main.js","hash":"5daa345abeda9de55a9912c30944fe80c084a2bf","modified":1628581041498},{"_id":"themes/butterfly/source/js/utils.js","hash":"1b8bf1e6d50fa8ffe2aff7548b141cab72540ba0","modified":1628581041501},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"4db1170be7a9360e2c5399d281b979da730df2a3","modified":1628581041500},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1628581041497},{"_id":"themes/butterfly/source/css/index.styl","hash":"c7924868adcb046b46498626a9223c7a7b3f2e30","modified":1628581041493},{"_id":"themes/butterfly/source/css/var.styl","hash":"31198af95fecc6819d3b2cb7ef03988ef67257da","modified":1628581041494},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"903d12250ce70713dd5b8ac7e1f7a20fe15eb815","modified":1628581041385},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"07380718ed3af19a7e64b30e8c13726fe5983947","modified":1628581041384},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"3ca9d9cdfd6e61df1d5b07de40f34349cda7a7c7","modified":1628581041385},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"73c04d62055840545112dd12d73807835ca62347","modified":1628581041386},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"f29123e603cbbcc6ce277d4e8f600ba67498077c","modified":1628581041386},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"72efaa09ff60843567458bd54152e06f0cb2757e","modified":1628581041387},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"6dc2c9b85df9ab4f5b554305339fd80a90a6cf43","modified":1628581041388},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"d6556d5396eb0e10ea0ec10158779c21dc78f738","modified":1628581041388},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"5168caadc4cf541f5d6676a9c5e8ae47a948f9ad","modified":1628581041389},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"3a2797d2744607ba6cdb5a02853851957c0f7e29","modified":1628581041389},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"419807903e5586b8804b1f8f17cea97bd05f0b17","modified":1628581041390},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"4d52000cae1fce333329c382dac6c9a21ad0b195","modified":1628581041390},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"7677911bd3f43edaf8230eea02f60a248eee9934","modified":1628581041391},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"631ec7000fd4d6cfa2de118ee02ad8a42ffb34f5","modified":1628581041392},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"971038debf539333b1687b4a1d87cf4fc965a846","modified":1628581041397},{"_id":"themes/butterfly/layout/includes/loading/loading-js.pug","hash":"2e1ab0c2ca59a1ff5a5ba9b6ef60f3e34af5430c","modified":1628581041395},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"dcccb1425fabcf12a1bed955518b0e7b1054cab0","modified":1628581041397},{"_id":"themes/butterfly/layout/includes/loading/loading.pug","hash":"dd8e6813976be64e80eba6562b54e74527ab306d","modified":1628581041396},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"95924d28d71b28769963529f82b376a9dc731fad","modified":1628581041398},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"f5ea1e10a169aeb98e42b19ac084c4eb27693b46","modified":1628581041399},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"9aa743b1f6fb7fafabee38f9204ce9c8f1be7f9a","modified":1628581041399},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"62dc2e683d56ddc9b588abc44dc1cfb778a2c68f","modified":1628581041400},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"6ec54b77e3a90e148e66e317e5bb6c89624fddca","modified":1628581041401},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"c762732e200ff2627bc046af5f170b3269343341","modified":1628581041402},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"bee06b3f01fa1f0d8fa08c154234b452da425101","modified":1628581041404},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"4c3da5a89b4e6fd3ab527f5c6d27790359d57f71","modified":1628581041421},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"ad59dcce32e4e67066303a1ffd1dd95874d9953e","modified":1628581041429},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"d06dafe7faf3a2e328ef62f26166a51ffe7a5579","modified":1628581041428},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"2448b243ded58aa1d5fc22fd115e6d06b636f9fd","modified":1628581041429},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"a8312b527493dabbadbb1280760168d3bc909a3b","modified":1628581041436},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"4a2ea9fe59f1dc8cb4f4f6a28cf24a40fc300254","modified":1628581041435},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"009bdbef23381f10664622fafdc602f2ff5bf1ec","modified":1628581041437},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"73d33b6930e7944187a4b3403daf25d27077a2dd","modified":1628581041437},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"1dba77d250eeebfb6e293d504352c7e9ea31980b","modified":1628581041439},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"66e383b4ef374951eb87dd1bf4cdb7a667193fb5","modified":1628581041440},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"6c3449a44ae1a80f71dd4d9d6a85cec1781ceff1","modified":1628581041438},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"0b5c165664f9f8691551fc5ff435b40e7f73c737","modified":1628581041441},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"471b20e71a19db1f5115727082e5188200c49383","modified":1628581041442},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"0f1a5c356c1ffd47ff49e153226e2d670dc61057","modified":1628581041440},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"9755cac8424dc578e9ec07dbcaa429fddbedd392","modified":1628581041442},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"62adef7998fb9bebc5891a49472cfea944a1bf7a","modified":1628581041443},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"7b5ae404a1205546b7de4be42291315cf918f2b3","modified":1628581041443},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"e4c39101d7087066a86f7743985a53d6a246470b","modified":1628581041444},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"a19f12257b14f70806a0c3cb0e9df1090f36e919","modified":1628581041499},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"3234942decaa1fde5b872766d4943a2e8cb9ef72","modified":1628581041499},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"f9de9db2a49ac4d5447660ab159171ac5c228e3c","modified":1628581041462},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"03164bca4546707543828cb2a41bc672b77bfa5a","modified":1628581041462},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"2e8e391b211b2416d3c9430ab5361659c073f348","modified":1628581041463},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"3f0b8699f529f0842c3b101006f60cb7933c16ff","modified":1628581041467},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"23ea60f8becc91f6e9f6cfb1cbfd25689c263b9c","modified":1628581041468},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"8e6c9a2c1881985e4b2ae14ef1bdfdbb1bc83b37","modified":1628581041469},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"f27ad7b5d781c98bcac5c12c2d70b69b830e0374","modified":1628581041468},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"bfc4b9d8df66593c11c9ae78899f54e69785ca90","modified":1628581041469},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"807f18717c29b5c41de6fc600a69a80ce8b7a19c","modified":1628581041471},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"db7fe645662d87be4f8dfc08e55bbe1a3734bf93","modified":1628581041473},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"dd71e34edece4e06b59e941fb3cc5ad9a3ad09cf","modified":1628581041470},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"814729d1d71f4326623a4f34b621bf0421503103","modified":1628581041473},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"8c4e08c8a63dacdfb2a733a0d0035fa97c7f5e9e","modified":1628581041474},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"4ae98e703440b616d2a36da139bda844c94d425e","modified":1628581041475},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"191ce31ce0f2b1d22a64225801a88cee6054f574","modified":1628581041476},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"943aa34c83c87d0225db65ae90621870472972fa","modified":1628581041476},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"a00ad74074513a1c7f6e02977b8fa778beaa2108","modified":1628581041475},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"25ac939fc57346de07ba9e15a1a760b492baefd7","modified":1628581041484},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"e65ed98056e6c91e622f94bad5283d00fdb22142","modified":1628581041485},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"fa2985afd08556b25f5f1a01bc1a7c76b294a962","modified":1628581041485},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"8489722684aa9b4baa38386f4d4b39f4dbd60113","modified":1628581041477},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"89a6cb63a97cc08675319c403e4a89391f6ab401","modified":1628581041478},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"c3369a14f4111c098d0177036ca57df6deb59d72","modified":1628581041486},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"6c12a03e26ca5d538537d472657d3d03a7fcbb87","modified":1628581041487},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"56691537c7f06c2cf1ffa1509a328f506d938ee8","modified":1628581041488},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"aa0728c556af75f5d66ecd44fa207722d474c26d","modified":1628581041487},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"5a873d01fabebcf7ddf7a6b1c2e2e5e2714097f4","modified":1628581041488},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"c91609b7f431cacecc3718ae2fb7403c55f8267a","modified":1628581041489},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"8520674768dd0b1837f947892e8402b192a4f9c1","modified":1628581041490},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"75a5c15c7029197ec5cffd27f7c5455891c946c9","modified":1628581041490},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"8549829fb7d3c21cd9e119884962e8c463a4a267","modified":1628581041491},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"190b85de3e686393e45869d12464995f23b304dc","modified":1628581041480},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"ca1d3a885a85a91fcd6f7b55fca96cafb6a1b0a3","modified":1628581041481},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"87c576a3361f30eefafec27a872ad76e9fbb2765","modified":1628581041479},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"48ad198d0ea97a25db4d2a3e587a16ef41617c0b","modified":1628581041482},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"5e5c1d6d104cc15314ae365d0da7cb07334a6457","modified":1628581041481},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"0da09b1811a776106ca66c56be6e2a396dca5680","modified":1628581041482},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"26e26797b3175498e20b2a8bf1679d3ed9fac5a6","modified":1628581041483},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"a18415004d03c0a1783eccac522fbcb6ce0ea1f1","modified":1628581041406},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"f4d21dcbc3b00eed9b1f604e132c4c6811a0a059","modified":1628581041405},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"4eebb2d94ca75809ef0cf32d70f13e9bf1e87091","modified":1628581041405},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"896dc0b7480151562c5717771e3000c5a7fc1b16","modified":1628581041407},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"eb2d840fa42de3ec7a7fda0eaa30246d52f543e2","modified":1628581041406},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"f3db5c5e738e097a191dc0de59c61d3e1444f7c3","modified":1628581041408},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"b741b5e942481d779a8a1fe94c45154a62a6b748","modified":1628581041409},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"f3f6eaecbcf9352342e259f4a5a3ad7160f31fc9","modified":1628581041408},{"_id":"themes/butterfly/layout/includes/third-party/chat/gitter.pug","hash":"794ce3911f17d354b7196deb8c36d191afac63fb","modified":1628581041410},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"e5af55cdb87d1ffd3d8702bc77097159acf95b54","modified":1628581041410},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"bb467bb22f3d0775b33f9eacbfc086ecb7831e78","modified":1628581041411},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"d5f81fd5443a1b09efb165b5f4447a35949d14ad","modified":1628581041413},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"cd7ab4a776be93eea96a6f6fd0a547977fbe1ea3","modified":1628581041412},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"0bf6a47e804fb793b40f82690a24816b902edd41","modified":1628581041415},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"0254203aae73e70b90dfce6ec4f9c9d3be9ac9f8","modified":1628581041415},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"50126b2e841b01584b8b65b2f834038e3997b694","modified":1628581041414},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"e877c98949873a62659db7501d19eb3d66650b51","modified":1628581041416},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"589f8503f264d4fda971c8daf2028f45c4f2867b","modified":1628581041418},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"d97403cdd58c759cfd1752dd85aa4a0f9b73dc46","modified":1628581041416},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"1c7e9fe86b7d7ef18cc876dfce19263fd4e73066","modified":1628581041419},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"afffc4ac8ce93d39dcc892bd518805cf33531244","modified":1628581041418},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"8290994cf1ee2faff60214ff245cf513fbbe94aa","modified":1628581041420},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"0bf1c53b914443c66be5077ff09cfc218f111e11","modified":1628581041420},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"2afa4c21dd19890f47fb568cfb0d90efb676a253","modified":1628581041422},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"87e40f0c315407ab88571a2b3450d640f15c96bc","modified":1628581041423},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"faf1113de12d6db0486572d7e99b03cbd0c4a896","modified":1628581041423},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"8890becd8220c57db2c7451409710942c103a7f4","modified":1628581041424},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"767c38e3dfa0097b0dc1fdfd0df292c16f757d05","modified":1628581041426},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"266caf985dc0703ff81b871b8f8d206f57db6e79","modified":1628581041422},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"0ad766ae491e6fcba2ef3d136a7af6158cd4153e","modified":1628581041425},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"16cf05cf9649322da57e9b8d316573bb65f8d8d8","modified":1628581041426},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"a3d43cc360666b5b9730e8bb9e5c8fd940ae5b3d","modified":1628581041427},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"ff3727c3ec698ec61a28c55cbc8c8508f0efb0a0","modified":1628581041431},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"83103bad0db195bce095330c4a84e7529bbd40dd","modified":1628581041428},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"fbcf94ecdca30bed7cfc4f4ec08b200579c2614e","modified":1628581041431},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"1c06e60b120c946c1856904848ceba6ab58d1f82","modified":1628581041430},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"fbac21a6c5924fb2f8d1190fd634105fdbc603d4","modified":1628581041433},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"8b4034e53ca5bf85097f681a6e76a53ce685c205","modified":1628581041432},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"4898a09d8e67fb358ffd74b3a1f0014f555dd856","modified":1628581041434},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"7e9a7347dd8ca4c33c564fb62512743b6012bb2d","modified":1628581041435},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"b0916c8c7d15b67b55cb1618be8370870fedbf42","modified":1628581041464},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"b74c61f6e15b422e9d2df23133552bbd1b5fe513","modified":1628581041465},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"0b8aea62d1550113e1fcc237fae1b03743190208","modified":1628581041466},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"1309292f1c8c53d96cd7333507b106bcc24ca8fc","modified":1628581041465},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"4d71aab9082c67d3ee52ad58dfc3c1c9b41f2ab1","modified":1628581041466},{"_id":"source/images/ubuntu/ubuntu-top-image.png","hash":"4e0839f7dd598e1b672c63f68a1f621ef5fd1766","modified":1628759843238},{"_id":"source/images/tripartite/AgoraRecordTestReport11.png","hash":"d6ffe805ba62ed1cc27b5351891242f2fdc3fba0","modified":1628757124146},{"_id":"source/img/home_page_background.png","hash":"000daff5290fa8c2b7ae6c02d0a6fbdf7e5a7a40","modified":1628753832541},{"_id":"public/manifest.json","hash":"8a615233e4258d03b9dfefef9dfc7bb34781d2a4","modified":1628840800345},{"_id":"public/404.html","hash":"6129397290c16db7882fa242af626474f1560e4b","modified":1639464036086},{"_id":"public/tags/index.html","hash":"b6c039840f22fe912f41750eb8cb39b8ab37a6e1","modified":1639464036086},{"_id":"public/categories/index.html","hash":"737cdbd362a1c423b242cce6c795ebc3fc96da81","modified":1639464036086},{"_id":"public/link/index.html","hash":"ae866a06406cd964e366ed8b23bf316eed07f959","modified":1639464036086},{"_id":"public/ubuntu/BuildLNMP/index.html","hash":"2cbdff051eabc8be134781e513d8e2fd31ce3b5d","modified":1639464036086},{"_id":"public/three-party/SentryBuild/index.html","hash":"64138462844db9025a799ff8e70fef7a74d1d2c8","modified":1639464036086},{"_id":"public/three-party/SentryUse/index.html","hash":"977110bf4d1ba09bdf1c8605a0ef86185cc9ca3e","modified":1639464036086},{"_id":"public/three-party/AliyunSDK/index.html","hash":"f0f32ae6d01b68fcf71b60c9b12e340c89a4fe65","modified":1639464036086},{"_id":"public/mysql/CreateUserAndAuthorization/index.html","hash":"f2d11e146e630253cc772dbe70cfd223ca670874","modified":1639464036086},{"_id":"public/web/LayuiDirectUploadToOSS/index.html","hash":"cf57dc70f3df476d0344364050cb4840bfe23dc9","modified":1639464036086},{"_id":"public/ggt-coder/README_zh/index.html","hash":"69bb850284aa82ac9d9213677aef4895f9dde019","modified":1639464036086},{"_id":"public/ggt-coder/README/index.html","hash":"8c6ad8add84834f66a90468c8a1efabc20a6c031","modified":1639464036086},{"_id":"public/golang/CompiledLanguageComputationOfMultiplication/index.html","hash":"b9706589ce183edea68aa9a2a305309ac14ec633","modified":1639464036086},{"_id":"public/golang/GolangStringIntInterconversion/index.html","hash":"f4f9ab559006f48d9726420e1644559921d901ed","modified":1639464036086},{"_id":"public/golang/Random/index.html","hash":"1d4667b4a46dc3263c78c127a3a9e27181a66004","modified":1639464036086},{"_id":"public/golang/StartGolang/index.html","hash":"859943be6419206ca5ec5bf9797232e1babcbde9","modified":1639464036086},{"_id":"public/php/DisplacementEfficiencyComparison/index.html","hash":"913028225ebecd3342c9b3dd9860ccc0eb7124a0","modified":1639464036086},{"_id":"public/php/ExpandsPositiveIntegersByAFactorOf1000/index.html","hash":"c64751b01d63a134107c0c4bfd13232153b7b493","modified":1639464036086},{"_id":"public/categories/ggt-coder/index.html","hash":"c1fb3113dde66703389a358df399253920124a8c","modified":1639464036086},{"_id":"public/categories/Golang/index.html","hash":"e6542dde5fcad1a1ff8d6d3a92d5158d427b5d84","modified":1639464036086},{"_id":"public/categories/MySQL/index.html","hash":"b774d37c106bd439c67db5ca718dc2bab175d587","modified":1639464036086},{"_id":"public/categories/PHP/index.html","hash":"f46b6f590796b04048c8b16751fe7bb71a8db712","modified":1639464036086},{"_id":"public/categories/Web/index.html","hash":"dc1d9b8678e64dc9b848835c2fbdd1e4c76daf81","modified":1639464036086},{"_id":"public/categories/Ubuntu/index.html","hash":"291a213bd01bd940e83c6c9a4bce27f1e1dc8c12","modified":1639464036086},{"_id":"public/categories/ThreeParty/index.html","hash":"7ee272cc91c537672c5c276735431106be41a2b7","modified":1639464036086},{"_id":"public/index.html","hash":"183f4e2a9d7c4cdaf4267d207cfb46cbeb957eed","modified":1639464036086},{"_id":"public/page/2/index.html","hash":"f5df79f2f5b805092043307deb4febe05d60c624","modified":1639464036086},{"_id":"public/tags/ggt-coder/index.html","hash":"f52fddba9a98a35ea740c28a028887e842ac14e6","modified":1639464036086},{"_id":"public/tags/入门/index.html","hash":"a742811ee8b48a1e0610185f829b75018d180be1","modified":1639464036086},{"_id":"public/tags/Golang/index.html","hash":"4da805d52be9499e9aff736a88ed28e25da16075","modified":1639464036086},{"_id":"public/tags/MySQL/index.html","hash":"4c6ed3b711609e668b9ce44d96c44c8f905ae737","modified":1639464036086},{"_id":"public/tags/探讨/index.html","hash":"b0a130d2db837a2cec61ef69b1e7777fd923f111","modified":1639464036086},{"_id":"public/tags/PHP/index.html","hash":"dd27a2de614a6991cdc7feb93a6e51133477068d","modified":1639464036086},{"_id":"public/tags/Web/index.html","hash":"63c51c4a569d1f8e223296efa7841b5bfbcf29f3","modified":1639464036086},{"_id":"public/tags/进阶/index.html","hash":"39719462f6cb719e25317494e6d60369004ff3b4","modified":1639464036086},{"_id":"public/tags/Ubuntu/index.html","hash":"e0d704f9f1693635c4eef02a57c626f3a229ffdf","modified":1639464036086},{"_id":"public/tags/ThreeParty/index.html","hash":"b7419074cfdd2dbf075cb3134e4e6e73ca3f0dc8","modified":1639464036086},{"_id":"public/archives/index.html","hash":"a0d16fd5a58dc336b9a647827e8833f6969acc78","modified":1639464036086},{"_id":"public/archives/page/2/index.html","hash":"9fba65f40172e002369e3ff4ffac2a6737e6e0af","modified":1639464036086},{"_id":"public/archives/2021/index.html","hash":"53b64f1f99ffc64fc6943b641712265bbec40995","modified":1639464036086},{"_id":"public/archives/2021/page/2/index.html","hash":"79e2d729e82b1e9bc30fecd55b1ec73a4d47331c","modified":1639464036086},{"_id":"public/archives/2021/08/page/2/index.html","hash":"da7e2f7b92eb137d3e44e697c429f5cfafb58902","modified":1639464036086},{"_id":"public/archives/2021/08/index.html","hash":"0b97ea8aa8d3881069d22566ec316ed167bada3c","modified":1639464036086},{"_id":"public/img/favicon.png","hash":"2a3bc4b58ff26c14fdd61070d4c8bd666de9db14","modified":1628840800345},{"_id":"public/img/algolia.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1628840800345},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1628840800345},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1628840800345},{"_id":"public/images/golang/CompiledLanguageComputationOfMultiplication01.png","hash":"402a8ae3357d34f807b7e5742219e610dc03504e","modified":1628840800345},{"_id":"public/images/golang/GolangCover1.png","hash":"822c573b6e9037c3e2e666673564e03ce72407ff","modified":1628840800345},{"_id":"public/images/golang/CompiledLanguageComputationOfMultiplication02.png","hash":"dc33261d172a05cd49f64766cb05cf8adddcdbca","modified":1628840800345},{"_id":"public/images/golang/GolangCover4.png","hash":"5e5f0b9784b51f5e8f91190c67bbab596b37cd31","modified":1628840800345},{"_id":"public/images/three-party/ThreePartyCover1.jpg","hash":"2dba18a4e251822854993d1b21694af029e39cba","modified":1628840800345},{"_id":"public/images/three-party/three-party-top-image.jpg","hash":"2d15c10fe5ebac17732602d696531617a0e2c39a","modified":1628840800345},{"_id":"public/images/mysql/mysql-top-image.png","hash":"c363a2722bbdff4b245945af13235153c692dabe","modified":1628840800345},{"_id":"public/images/tripartite/AgoraRecordTestReport06.png","hash":"12e5841c2278dc31794e0e0647fc6fee908041b9","modified":1628840800345},{"_id":"public/images/tripartite/AgoraRecordTestReport05.png","hash":"350d64668d4e61e6da5f240e6168a037a59e5bc6","modified":1628840800345},{"_id":"public/images/php/DisplacementEfficiencyComparison02.png","hash":"36eb2ecf2b2dcb1f94f8442aa9f52f4e00a64b8b","modified":1628840800345},{"_id":"public/images/php/PHPCover2.png","hash":"2346374ac2440e91214a93af17d1b3d56105788a","modified":1628840800345},{"_id":"public/images/php/DisplacementEfficiencyComparison01.png","hash":"79e8107d4624df187b5fc98c329f22cdc8f78809","modified":1628840800345},{"_id":"public/images/php/PhpExpandsPositiveIntegersByAFactorOf1000-image01.png","hash":"8bfb84d21b8c383a6bc871ecfa0ac146c2284c8a","modified":1628840800345},{"_id":"public/images/ggt-coder/ggt-coder-cover.png","hash":"8b6ffff3787fdca3801e07f0199e4933493f6d00","modified":1628840800345},{"_id":"public/images/ubuntu/UbuntuCover1.jpg","hash":"653525895405397f0df08e858e86234438aa1694","modified":1628840800345},{"_id":"public/images/ggt-coder/project_content.png","hash":"09c542d2d1c1a71bc58ab16265298a1c880ed79c","modified":1628840800345},{"_id":"public/img/avatar.jpg","hash":"1114527e4092d6e96767b79eb9fca5a10a028291","modified":1628840800345},{"_id":"public/images/golang/GolangCover2.jpg","hash":"2ab6265ad7320636fd4618b7d812153479f43ea5","modified":1628840800345},{"_id":"public/images/laravel/laravel-top-image.png","hash":"7a75f8b09e4003ae7b72239a43f161a0b922b632","modified":1628840800345},{"_id":"public/images/golang/golang-top-image.png","hash":"a2bb3dd27d3ffa0d6e2ea4a8f5a5d63c26a7b33e","modified":1628840800345},{"_id":"public/images/tripartite/AgoraRecordTestReport04.png","hash":"10aa4341ce489a4d527d2a4db56eaf6a7ad292ca","modified":1628840800345},{"_id":"public/images/tripartite/AgoraRecordTestReport07.png","hash":"1a79045b3565bfdcc3f9f8af486d6dc671b0fc22","modified":1628840800345},{"_id":"public/images/tripartite/AgoraRecordTestReport09.png","hash":"255a63c2ca9c3362a646e20f5ce12b27515d8a15","modified":1628840800345},{"_id":"public/images/tripartite/AgoraRecordTestReport10.png","hash":"1f5263f6181e851a8a166bb0cf6d19d7a77dda3b","modified":1628840800345},{"_id":"public/images/tripartite/AgoraRecordTestReport08.png","hash":"5dd7ef070e76c285a3d5a5072684d9ecfd5537f5","modified":1628840800345},{"_id":"public/images/tripartite/AgoraRecordTestReport12.png","hash":"a9101bb943da60c663a9b2a45ba67984327dc52b","modified":1628840800345},{"_id":"public/images/php/php-top-image.png","hash":"d9d4efb563bd4c7a620c4a3706d9d46d96aef1e8","modified":1628840800345},{"_id":"public/images/ggt-coder/menu-title.png","hash":"0f56df1cbd2380132305429c5ab8d3b4accae5ce","modified":1628840800345},{"_id":"public/images/ggt-coder/module_content.png","hash":"fe49e209058da5252b8a6c5015955881dbfbbf2d","modified":1628840800345},{"_id":"public/images/golang/GolangCover3.png","hash":"0d9ecda7e4115983e036751fd40f8e676bc8e8b6","modified":1628840800345},{"_id":"public/images/mysql/MySQLCover1.png","hash":"cd337ffa90fa6f23962bcbc5cf691c7db38230e2","modified":1628840800345},{"_id":"public/images/tripartite/AgoraRecordTestReport03.png","hash":"8c446c125944bb59ad1c296fde8b827f8da7c034","modified":1628840800345},{"_id":"public/images/tripartite/AgoraRecordTestReport01.png","hash":"9df7febe6c4774e4491ea4d0b72dd2be2aa786f7","modified":1628840800345},{"_id":"public/images/tripartite/AgoraRecordTestReport13.png","hash":"720e44948d2c7fc2086993e08b308158e65c88c2","modified":1628840800345},{"_id":"public/images/web/web-top-image.jpg","hash":"daa0b62b3d4820aafdbc5480b6af3da5ebf94a50","modified":1628840800345},{"_id":"public/js/utils.js","hash":"8319b59c26ce8cd2b0ae7d030c4912215148fa92","modified":1628840800345},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1628840800345},{"_id":"public/js/search/local-search.js","hash":"459e2541afda483916d16fce4aaa56b41bcd42ba","modified":1628840800345},{"_id":"public/js/search/algolia.js","hash":"65b45e61586f7e66c3f338370bfd9daadd71a4b7","modified":1628840800345},{"_id":"public/css/index.css","hash":"e25cbc3cb44fbe4db849cd4ac0395c206aa8bcc6","modified":1628840800345},{"_id":"public/images/three-party/ThreePartyCover2.png","hash":"76e1414dd73a622e821d2e1ba5498de54b293023","modified":1628840800345},{"_id":"public/images/tripartite/AgoraRecordTestReport02.png","hash":"ec9b70e7d67a6d498cb1be20096c368a2a97e0a3","modified":1628840800345},{"_id":"public/images/tripartite/AgoraRecordTestReport14.png","hash":"5f05c160578dc29df8abd9c74f3a59d12c9a9beb","modified":1628840800345},{"_id":"public/images/php/PHPCover1.png","hash":"36a8bce7a9a5e7c1eb4abed529dbb2425749aa5e","modified":1628840800345},{"_id":"public/js/main.js","hash":"8ef2821ceb92d81aa0f8c02ee932f094adcafb2b","modified":1628840800345},{"_id":"public/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":1628840800345},{"_id":"public/images/tripartite/AgoraRecordTestReport15.png","hash":"62ff962a120b2300eecd9a0907316bcf06cbaa31","modified":1628840800345},{"_id":"public/images/web/WebCover1.jpg","hash":"eb3b0ff944f9cf14dfb07d08647c29520fbce1bf","modified":1628840800345},{"_id":"public/images/vue/vue-top-image.png","hash":"b614ae0edb3da4e7171f919e50416fda1dfa8c74","modified":1628840800345},{"_id":"public/images/ubuntu/ubuntu-top-image.png","hash":"4e0839f7dd598e1b672c63f68a1f621ef5fd1766","modified":1628840800345},{"_id":"public/images/tripartite/AgoraRecordTestReport11.png","hash":"d6ffe805ba62ed1cc27b5351891242f2fdc3fba0","modified":1628840800345},{"_id":"public/img/home_page_background.png","hash":"000daff5290fa8c2b7ae6c02d0a6fbdf7e5a7a40","modified":1628840800345},{"_id":"source/_posts/php/RemoveDuplicate.md","hash":"384455ca8b1bcf446ba3c7b5a3e04d8281e1fbc4","modified":1629086125979},{"_id":"source/_posts/three-party/ESSOUserJoinUp.md","hash":"0292362c978f0ea51771c979dd3fbe05c801c981","modified":1639461654240},{"_id":"public/php/RemoveDuplicate/index.html","hash":"ee89da85d6bdc2b2cd25510c648a803d609a6844","modified":1639464036086},{"_id":"public/three-party/ESSOUserJoinUp/index.html","hash":"1ef116fa9026368db41286ee17672d50fbae4d08","modified":1639464036086},{"_id":"public/archives/2021/12/index.html","hash":"50d63eef10253777cb30924ff394b5847bd85ec4","modified":1639464036086},{"_id":"public/tags/1111/index.html","hash":"318c6a158e552913d7f834e704a08018bccbafef","modified":1639464036086},{"_id":"public/tags/ESSO/index.html","hash":"f74aeb63f54ed2bd37eb0132c04d41626312c660","modified":1639464036086},{"_id":"public/tags/浙里办/index.html","hash":"ba7369ba451c956a0455f7f69387c44b7b635a69","modified":1639464036086}],"Category":[{"name":"ggt-coder","_id":"cksa1rbx40004z4u42a9n0apl"},{"name":"Golang","_id":"cksa1rbxd000fz4u49taw5g05"},{"name":"MySQL","_id":"cksa1rbxh000pz4u4ccih5tbl"},{"name":"PHP","_id":"cksa1rbxj0012z4u4an2l09f5"},{"name":"Web","_id":"cksa1rbxk0016z4u44t8k4jfc"},{"name":"Ubuntu","_id":"cksa1rbxs001xz4u4hozaf0ti"},{"name":"ThreeParty","_id":"cksa1rbxx0023z4u493abgvk6"}],"Data":[{"_id":"link","data":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}],"Page":[{"_content":"{\n  \"name\": \"string\",\n  \"short_name\": \"CuratorC\",\n  \"theme_color\": \"#49b1f5\",\n  \"background_color\": \"#49b1f5\",\n  \"display\": \"standalone\",\n  \"scope\": \"/\",\n  \"start_url\": \"/\",\n  \"icons\": [\n    {\n      \"src\": \"images/pwaicons/36.png\",\n      \"sizes\": \"36x36\",\n      \"type\": \"image/png\"\n    },\n    {\n      \"src\": \"images/pwaicons/48.png\",\n      \"sizes\": \"48x48\",\n      \"type\": \"image/png\"\n    },\n    {\n      \"src\": \"images/pwaicons/72.png\",\n      \"sizes\": \"72x72\",\n      \"type\": \"image/png\"\n    },\n    {\n      \"src\": \"images/pwaicons/96.png\",\n      \"sizes\": \"96x96\",\n      \"type\": \"image/png\"\n    },\n    {\n      \"src\": \"images/pwaicons/144.png\",\n      \"sizes\": \"144x144\",\n      \"type\": \"image/png\"\n    },\n    {\n      \"src\": \"images/pwaicons/192.png\",\n      \"sizes\": \"192x192\",\n      \"type\": \"image/png\"\n    },\n    {\n      \"src\": \"images/pwaicons/512.png\",\n      \"sizes\": \"512x512\",\n      \"type\": \"image/png\"\n    }\n  ],\n  \"splash_pages\": null\n}","source":"manifest.json","raw":"{\n  \"name\": \"string\",\n  \"short_name\": \"CuratorC\",\n  \"theme_color\": \"#49b1f5\",\n  \"background_color\": \"#49b1f5\",\n  \"display\": \"standalone\",\n  \"scope\": \"/\",\n  \"start_url\": \"/\",\n  \"icons\": [\n    {\n      \"src\": \"images/pwaicons/36.png\",\n      \"sizes\": \"36x36\",\n      \"type\": \"image/png\"\n    },\n    {\n      \"src\": \"images/pwaicons/48.png\",\n      \"sizes\": \"48x48\",\n      \"type\": \"image/png\"\n    },\n    {\n      \"src\": \"images/pwaicons/72.png\",\n      \"sizes\": \"72x72\",\n      \"type\": \"image/png\"\n    },\n    {\n      \"src\": \"images/pwaicons/96.png\",\n      \"sizes\": \"96x96\",\n      \"type\": \"image/png\"\n    },\n    {\n      \"src\": \"images/pwaicons/144.png\",\n      \"sizes\": \"144x144\",\n      \"type\": \"image/png\"\n    },\n    {\n      \"src\": \"images/pwaicons/192.png\",\n      \"sizes\": \"192x192\",\n      \"type\": \"image/png\"\n    },\n    {\n      \"src\": \"images/pwaicons/512.png\",\n      \"sizes\": \"512x512\",\n      \"type\": \"image/png\"\n    }\n  ],\n  \"splash_pages\": null\n}","date":"2021-08-12T05:50:23.816Z","updated":"2021-08-12T05:50:23.816Z","path":"manifest.json","layout":"false","title":"","comments":1,"_id":"cksa1rbwx0000z4u4ai7z85dr","content":"{\"name\":\"string\",\"short_name\":\"CuratorC\",\"theme_color\":\"#49b1f5\",\"background_color\":\"#49b1f5\",\"display\":\"standalone\",\"scope\":\"/\",\"start_url\":\"/\",\"icons\":[{\"src\":\"images/pwaicons/36.png\",\"sizes\":\"36x36\",\"type\":\"image/png\"},{\"src\":\"images/pwaicons/48.png\",\"sizes\":\"48x48\",\"type\":\"image/png\"},{\"src\":\"images/pwaicons/72.png\",\"sizes\":\"72x72\",\"type\":\"image/png\"},{\"src\":\"images/pwaicons/96.png\",\"sizes\":\"96x96\",\"type\":\"image/png\"},{\"src\":\"images/pwaicons/144.png\",\"sizes\":\"144x144\",\"type\":\"image/png\"},{\"src\":\"images/pwaicons/192.png\",\"sizes\":\"192x192\",\"type\":\"image/png\"},{\"src\":\"images/pwaicons/512.png\",\"sizes\":\"512x512\",\"type\":\"image/png\"}],\"splash_pages\":null}","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"/img/home_page_background.png","excerpt":"","more":"{\"name\":\"string\",\"short_name\":\"CuratorC\",\"theme_color\":\"#49b1f5\",\"background_color\":\"#49b1f5\",\"display\":\"standalone\",\"scope\":\"/\",\"start_url\":\"/\",\"icons\":[{\"src\":\"images/pwaicons/36.png\",\"sizes\":\"36x36\",\"type\":\"image/png\"},{\"src\":\"images/pwaicons/48.png\",\"sizes\":\"48x48\",\"type\":\"image/png\"},{\"src\":\"images/pwaicons/72.png\",\"sizes\":\"72x72\",\"type\":\"image/png\"},{\"src\":\"images/pwaicons/96.png\",\"sizes\":\"96x96\",\"type\":\"image/png\"},{\"src\":\"images/pwaicons/144.png\",\"sizes\":\"144x144\",\"type\":\"image/png\"},{\"src\":\"images/pwaicons/192.png\",\"sizes\":\"192x192\",\"type\":\"image/png\"},{\"src\":\"images/pwaicons/512.png\",\"sizes\":\"512x512\",\"type\":\"image/png\"}],\"splash_pages\":null}"},{"title":"标签","date":"2021-08-11T03:55:46.000Z","type":"tags","_content":"## 测试\n* 这里是标签页","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2021-08-11 11:55:46\ntype: \"tags\"\n---\n## 测试\n* 这里是标签页","updated":"2021-08-11T03:58:56.092Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cksa1rbx20002z4u44oq60u1h","content":"<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><ul>\n<li>这里是标签页</li>\n</ul>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"/img/home_page_background.png","excerpt":"","more":"<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><ul>\n<li>这里是标签页</li>\n</ul>\n"},{"title":"分类","date":"2021-08-11T03:58:08.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2021-08-11 11:58:08\ntype: \"categories\"\n---\n","updated":"2021-08-11T03:58:30.091Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cksa1rbx60006z4u4hdh7ejmi","content":"","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"/img/home_page_background.png","excerpt":"","more":""},{"title":"友情链接","date":"2021-08-11T04:02:50.000Z","type":"link","_content":"","source":"link/index.md","raw":"---\ntitle: 友情链接\ndate: 2021-08-11 12:02:50\ntype: \"link\"\n---\n","updated":"2021-08-11T04:03:13.841Z","path":"link/index.html","comments":1,"layout":"page","_id":"cksa1rbx70008z4u411z40deo","content":"","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"/img/home_page_background.png","excerpt":"","more":""}],"Post":[{"title":"GGT Coder 中文文档","description":"将你从流水线式的编程中解放出来","keywords":"ggt-coder","top_img":"/images/ggt-coder/ggt-coder-cover.png","cover":"/images/ggt-coder/ggt-coder-cover.png","date":"2021-08-13T02:14:55.000Z","updated":"2021-08-13T02:14:55.000Z","swiper_index":5,"swiper_desc":"将你从流水线式的编程中解放出来","swiper_cover":"/images/ggt-coder/ggt-coder-cover.png","_content":"<h1 align=\"center\">罐罐头 Coder</h1>\n<p align=\"center\"><a href=\"https://github.com/CuratorC/ggt-coder-exe\"><img alt=\"For Laravel 8\" src=\"https://cdn.learnku.com/uploads/images/202103/10/32395/lcpvzujM5j.svg\" style=\"max-width:100%;\"></a>\n\n<h2 align=\"right\">将你从流水线式的编程中解放出来</h2>\n\n翻译:\n\n* [English](/ggt-coder/README)\n\n## Features\n* 可视化设计项目模型关系\n* 一键生成项目\n* 完整的 laravel 技术栈实现\n* 根据字段设计，自动完成以下模块的编写，实现增删改查基础功能的全部流程，为复杂逻辑提供全面的对接空间\n    * Model         - 模型文件\n    * Observer      - 观察者\n    * Resource      - API 资源\n    * Collection    - 资源集合\n    * Controller    - 控制器\n    * Request       - 表单验证\n    * Rule          - 表单规则\n    * Policy        - 权限\n    * Route         - 路由\n    * Migration     - 数据库\n    * Seeder        - 虚拟数据\n    * Factory       - 模型工厂\n    * Test          - 测试文件\n    * Docs          - API文档\n\n* `罐罐头`生成出来的项目应用了大量`laravel`知识。如果以上大部分功能您都不明所以，建议您先阅读一下`learnku`论坛中的 [laravel 实战教程一](https://learnku.com/courses/laravel-essential-training/8.x) 和 [laravel 实战教程三](https://learnku.com/courses/laravel-advance-training/8.x) 。\n\n```\n项目地址\ngithub : git clone https://github.com/CuratorC/ggt-coder.git\ngitee : git clone https://gitee.com/Curator/ggt-coder.git\n```\n\n## Start\n\n双击 ggt-coder.exe ，就像是打开一款游戏一样，享受编码的过程！\n\n### 设置 Setting\n#### 项目作者名称\n* 将这一项改为你的名称，以后这个字段将会填入注释当中的 `@author` 里！\n#### 编程语言\n* 很抱歉目前仅支持 Laravel 8.12 ,目前修改这一栏不会产生任何效果，以后会加入 Go 语言的一键生成。欢迎其他小伙伴加入我们一起完成这个项目！\n#### 模型关系类型\n* 众所周知改需求是甲方的传统艺能。有次我在做一个项目，一开始的需求是`一个业务员维护一个合同`，他们的对应关系是 `Contract BelongsTo Salesman`。\n  这个项目上线运行了好久，甲方突然要我改成 `多个业务员维护一个合同`，他们的模型关系是 `Contract BelongsToMany Salesmen`。\n  虽然只是换了一个单词，但是熟悉 `laravel 模型关联`的小伙伴已经知道了，这个改动涉及到新的数据表和多个字段的改动。\n  而且甲方还要把合同和公司，联系人的关系由`多对一对多`改为`多对多对多`。\n  甲方千不该万不该，甲方给我钱就是我的爸爸。所以出了问题我就要在自己身上反思：如果我在一开始就有一张中间表`Middle`来记录他们的关系，无论甲方怎么改，对我而言都是几个关键字的替换就可以了。\n* 所以就产生了这个`All For Middle`的设计理念。如果你无法适应这样的理念，可以将其改为`Real Relation`，`罐罐头`将忠实的为你生成你设计的模型关联。但我依旧建议你采用`All For Middle`的设计理念。\n* 或许你认为多了一张中间表 `Middle`，我的项目“脏了”，它会变得更慢，我想要精益求精，我要设计最快的结构，哪怕以后要面对崩山一般的改动。但是`罐罐头`本就是为了`将你从流水线式的编程中解放出来`而存在的。相信我，省去这些时间去钻研新的技术，你的项目运行效率会取得千百倍的提升，而不是在一两微秒之间打转。\n#### 默认字段\n* 这些字段会在你创建模型的时候自动加入表中。\n* 第一位是`字段描述`， 第二位是`字段名`，第三位是`字段类型`。前两个好理解，`字段类型`将会在之后详细说明，如果有必要的话，您完全可以凭借直觉自行决定修改默认字段。\n\n### 项目列表 Project List\n* 就是你的项目列表\n* `罐罐头`的数据以`SQLite`的方式保存在本地，只要备份好数据库文件：`.\\ggt-coder_Data\\ggt-coder.db`，你就可以在任何地方完全重现属于你的`罐罐头`\n\n### 项目详情 Project Content\n<img alt=\"Project Content Image\" src=\"/images/ggt-coder/project_content.png\">\n\n* 在项目列表界面点击 `新项目` 或者之前创建的项目，都能进入这个界面。\n* 顶部是项目名，建议采用像默认名称那样的 `英文单词 并用 - 连接`。因为域名解析更认可这种格式。\n* 主要版面展示了这个项目中你设计的模型关系。模型关系以可视化的形式展示在这里，更好的梳理项目结构和设计思路。\n* 你别管可视化做的好看不好看，它现在有个可视化的空间，以后就会有个更好的可视化的空间，对不对？\n* 底部按钮分别是 `创建模型`,`完整生成：为你一键生成项目`,`退出`,`删除`\n\n### 模型详情 Module Content\n<img alt=\"Module Content Image\" src=\"/images/ggt-coder/module_content.png\">\n\n* 在项目详情页面点击`创建模型`或者之前创建的模型，都能进入这个界面。\n* 顶部是模型名和模型说明，模型名建议采用大驼峰单数格式。因为`laravel`的模型名就是这个规矩。如果你不想遵守这个规矩，`罐罐头`会帮你守规矩。\n* 主要版面列出了你对这个模型的设计。\n#### 模型关系\n* 左侧六种模型关系分别是\n    * BelongsTo\n    * HasMany\n    * BelongsToMany\n    * HasOne\n    * HasOneThrough\n    * HasManyThrough\n* 您只需要根据设计选择相应的对于关系即可，`罐罐头`会在生成项目的时候自动为您填充所需的字段，表格，对应方法。\n* 当您在 `B` 模型中设计了 `B BelongsTo A `的时候，`罐罐头` 会自动为您在 `A` 模型中填入 `A HasMany B`\n#### 模型字段\n* 右侧十三种字段类型分别是\n    * integer: 常用于人数统计等情况下的正整数字段\n    * integer-index: 常用于数字编号的带索引的正整数字段\n    * string: 常用于名称的短字符串字段\n    * string-index:  常用于帐户名的带索引的短字符字段\n    * tinyInteger:   常用于状态码的枚举型字段\n    * text: 常用于产品描述的长文章字段\n    * storage: 仅用于存储图片类资源的字段。关于这个字段有必要在下方正式介绍一下。\n    * decimal: 常用于金额的存在小数的字段\n    * datetime: 常用于截止时间的日期型字段\n    * array: 常用于规格等拥有不定项键值对的 json 字段\n    * primary: 主键，请确保一个模型内唯一\n    * timestamps: created_at 和 updated_at 的集合，建议一个模型内有且仅有一个此字段\n    * softDelete: 软删除，自以为是的`罐罐头`将默认所有模型都是软删除，若不想采用软删除，请在 `app\\Models\\Model.php` 中自行修改\n* 字段的内容不仅仅是设计了数据库内的字段，`罐罐头`还将为你在`factory`, `model`, `request` 等多个模块中制定相符的处理策略。详细区别恕无法在此一一描述。\n* 字段名请采用下划线蛇形命名法。\n* 现在您可以自行设计模型字段，来感受`罐罐头`一键生成项目带给您的愉悦体验。\n\n#### storage\n* 简介\n    * storage 将流量上下行压力完全转移给 `OSS`，极高提升了响应速度，降低服务器对带宽的要求。\n    * storage 字段的逻辑\n        * 前端从服务器中获得签名\n        * 前端使用签名将图片类资源上传到`阿里云 OSS`服务当中\n        * 前端将 资源id 填到字段中，将其保存到服务器\n        * 在前端需求此资源的时候，后台生成一个带有签名的`OSS 服务临时地址`，前端去 `OSS` 服务器取得资源\n* 如何使用\n    * 按注释将`阿里云OSS配置`填入`.env`当中。\n    * 将项目中的`docs/project_api.yaml`文档交给前端。\n    * 如果不够，就将 [阿里云OSS PostObject 官方文档](https://help.aliyun.com/document_detail/31988.html?spm=a2c4g.11186623.6.1690.31751c20qeGNUZ) 交给前端。\n    * 如果还不够，就将项目中的 `vendor/iidestiny/laravel-filesystem-oss/README.md`交给任劳任怨的前端。这里包含一个 CV 战士的专供demo\n* 注意：\n    * 服务器需要每隔一段时间将那些没有被使用到的 storage 清理掉来节约空间。它是通过定时任务实现的。所以你需要启动此项目的定时任务\n\n~~~\nexport EDITOR=vi && crontab -e\n~~~\n\n此时进入 VI 编辑器界面：\n\n* 按大写的 G （或者按方向键）将光标移动到最底端；\n* 然后按键盘上的 『小写 i 键』进入 INSERT 模式；\n* 黏贴下面这一行，并替换项目路径；\n ``` \n * * * * * php 项目路径/artisan schedule:run >> /dev/null 2>&1\n ```\n* 黏贴成功后按下键盘左上角的『ESC 键』进入 VI 的命令模式；\n* 键盘输入 :wq 并敲击回车键保存退出。\n\n## 完整创建\n* 之前我们在设置页，项目详情，模型详情进行了那么多的操作，为的就是这一刻一键生成我们的项目。相信您一定已经等不及了吧。\n* 点击项目详情页的`完整生成`,输入一个空路径，`罐罐头` 将为您创建上述所有的饼。现在，有了完成增删改查基础功能和完整空间的项目，将您的精力尽情的投入到 Coding 中去吧！\n* 当项目生成过之后，就会转变为`增量生成`，即：根据你对模型的调整，在你的项目中做出对应的调整。很抱歉这一点还没有完成，不过它即将在下一版中到来。\n* 项目中存在大量的 ` <------ some string` 的标记，它是为`增量生成`埋下的锚点。请勿修改本行内容，否则将导致`罐罐头`无法准确找到项目。\n* Happy Coding !\n* 感谢您的尝试，`罐罐头`将与您一同成长！\n\n## 版本信息\n### v1.1.0\n* 支持增量更新\n\n### V1.0.0\n* 罐罐头发布\n\n### 当前版本缺陷\n* 仅支持`php laravel`语言\n* 生成会直接生成全部的功能文件\n* 模型关系不够清晰\n* 项目详情界面滚动条BUG。（暂时请使用方向键）\n\n### 即将到来\n生成文件可选","source":"_posts/ggt-coder/README_zh.md","raw":"---\ntitle: GGT coder 中文文档\ndescription: 将你从流水线式的编程中解放出来\nkeywords: ggt-coder\ntop_img: /images/ggt-coder/ggt-coder-cover.png\ncover: /images/ggt-coder/ggt-coder-cover.png\ntags:\n    - ggt-coder\n    - 入门\ncategories:\n    - ggt-coder\ndate: 2021-08-13 10:14:55\nupdated: 2021-08-13 10:14:55\nswiper_index: 5\nswiper_desc: 将你从流水线式的编程中解放出来\nswiper_cover: /images/ggt-coder/ggt-coder-cover.png\n---\n<h1 align=\"center\">罐罐头 Coder</h1>\n<p align=\"center\"><a href=\"https://github.com/CuratorC/ggt-coder-exe\"><img alt=\"For Laravel 8\" src=\"https://cdn.learnku.com/uploads/images/202103/10/32395/lcpvzujM5j.svg\" style=\"max-width:100%;\"></a>\n\n<h2 align=\"right\">将你从流水线式的编程中解放出来</h2>\n\n翻译:\n\n* [English](/ggt-coder/README)\n\n## Features\n* 可视化设计项目模型关系\n* 一键生成项目\n* 完整的 laravel 技术栈实现\n* 根据字段设计，自动完成以下模块的编写，实现增删改查基础功能的全部流程，为复杂逻辑提供全面的对接空间\n    * Model         - 模型文件\n    * Observer      - 观察者\n    * Resource      - API 资源\n    * Collection    - 资源集合\n    * Controller    - 控制器\n    * Request       - 表单验证\n    * Rule          - 表单规则\n    * Policy        - 权限\n    * Route         - 路由\n    * Migration     - 数据库\n    * Seeder        - 虚拟数据\n    * Factory       - 模型工厂\n    * Test          - 测试文件\n    * Docs          - API文档\n\n* `罐罐头`生成出来的项目应用了大量`laravel`知识。如果以上大部分功能您都不明所以，建议您先阅读一下`learnku`论坛中的 [laravel 实战教程一](https://learnku.com/courses/laravel-essential-training/8.x) 和 [laravel 实战教程三](https://learnku.com/courses/laravel-advance-training/8.x) 。\n\n```\n项目地址\ngithub : git clone https://github.com/CuratorC/ggt-coder.git\ngitee : git clone https://gitee.com/Curator/ggt-coder.git\n```\n\n## Start\n\n双击 ggt-coder.exe ，就像是打开一款游戏一样，享受编码的过程！\n\n### 设置 Setting\n#### 项目作者名称\n* 将这一项改为你的名称，以后这个字段将会填入注释当中的 `@author` 里！\n#### 编程语言\n* 很抱歉目前仅支持 Laravel 8.12 ,目前修改这一栏不会产生任何效果，以后会加入 Go 语言的一键生成。欢迎其他小伙伴加入我们一起完成这个项目！\n#### 模型关系类型\n* 众所周知改需求是甲方的传统艺能。有次我在做一个项目，一开始的需求是`一个业务员维护一个合同`，他们的对应关系是 `Contract BelongsTo Salesman`。\n  这个项目上线运行了好久，甲方突然要我改成 `多个业务员维护一个合同`，他们的模型关系是 `Contract BelongsToMany Salesmen`。\n  虽然只是换了一个单词，但是熟悉 `laravel 模型关联`的小伙伴已经知道了，这个改动涉及到新的数据表和多个字段的改动。\n  而且甲方还要把合同和公司，联系人的关系由`多对一对多`改为`多对多对多`。\n  甲方千不该万不该，甲方给我钱就是我的爸爸。所以出了问题我就要在自己身上反思：如果我在一开始就有一张中间表`Middle`来记录他们的关系，无论甲方怎么改，对我而言都是几个关键字的替换就可以了。\n* 所以就产生了这个`All For Middle`的设计理念。如果你无法适应这样的理念，可以将其改为`Real Relation`，`罐罐头`将忠实的为你生成你设计的模型关联。但我依旧建议你采用`All For Middle`的设计理念。\n* 或许你认为多了一张中间表 `Middle`，我的项目“脏了”，它会变得更慢，我想要精益求精，我要设计最快的结构，哪怕以后要面对崩山一般的改动。但是`罐罐头`本就是为了`将你从流水线式的编程中解放出来`而存在的。相信我，省去这些时间去钻研新的技术，你的项目运行效率会取得千百倍的提升，而不是在一两微秒之间打转。\n#### 默认字段\n* 这些字段会在你创建模型的时候自动加入表中。\n* 第一位是`字段描述`， 第二位是`字段名`，第三位是`字段类型`。前两个好理解，`字段类型`将会在之后详细说明，如果有必要的话，您完全可以凭借直觉自行决定修改默认字段。\n\n### 项目列表 Project List\n* 就是你的项目列表\n* `罐罐头`的数据以`SQLite`的方式保存在本地，只要备份好数据库文件：`.\\ggt-coder_Data\\ggt-coder.db`，你就可以在任何地方完全重现属于你的`罐罐头`\n\n### 项目详情 Project Content\n<img alt=\"Project Content Image\" src=\"/images/ggt-coder/project_content.png\">\n\n* 在项目列表界面点击 `新项目` 或者之前创建的项目，都能进入这个界面。\n* 顶部是项目名，建议采用像默认名称那样的 `英文单词 并用 - 连接`。因为域名解析更认可这种格式。\n* 主要版面展示了这个项目中你设计的模型关系。模型关系以可视化的形式展示在这里，更好的梳理项目结构和设计思路。\n* 你别管可视化做的好看不好看，它现在有个可视化的空间，以后就会有个更好的可视化的空间，对不对？\n* 底部按钮分别是 `创建模型`,`完整生成：为你一键生成项目`,`退出`,`删除`\n\n### 模型详情 Module Content\n<img alt=\"Module Content Image\" src=\"/images/ggt-coder/module_content.png\">\n\n* 在项目详情页面点击`创建模型`或者之前创建的模型，都能进入这个界面。\n* 顶部是模型名和模型说明，模型名建议采用大驼峰单数格式。因为`laravel`的模型名就是这个规矩。如果你不想遵守这个规矩，`罐罐头`会帮你守规矩。\n* 主要版面列出了你对这个模型的设计。\n#### 模型关系\n* 左侧六种模型关系分别是\n    * BelongsTo\n    * HasMany\n    * BelongsToMany\n    * HasOne\n    * HasOneThrough\n    * HasManyThrough\n* 您只需要根据设计选择相应的对于关系即可，`罐罐头`会在生成项目的时候自动为您填充所需的字段，表格，对应方法。\n* 当您在 `B` 模型中设计了 `B BelongsTo A `的时候，`罐罐头` 会自动为您在 `A` 模型中填入 `A HasMany B`\n#### 模型字段\n* 右侧十三种字段类型分别是\n    * integer: 常用于人数统计等情况下的正整数字段\n    * integer-index: 常用于数字编号的带索引的正整数字段\n    * string: 常用于名称的短字符串字段\n    * string-index:  常用于帐户名的带索引的短字符字段\n    * tinyInteger:   常用于状态码的枚举型字段\n    * text: 常用于产品描述的长文章字段\n    * storage: 仅用于存储图片类资源的字段。关于这个字段有必要在下方正式介绍一下。\n    * decimal: 常用于金额的存在小数的字段\n    * datetime: 常用于截止时间的日期型字段\n    * array: 常用于规格等拥有不定项键值对的 json 字段\n    * primary: 主键，请确保一个模型内唯一\n    * timestamps: created_at 和 updated_at 的集合，建议一个模型内有且仅有一个此字段\n    * softDelete: 软删除，自以为是的`罐罐头`将默认所有模型都是软删除，若不想采用软删除，请在 `app\\Models\\Model.php` 中自行修改\n* 字段的内容不仅仅是设计了数据库内的字段，`罐罐头`还将为你在`factory`, `model`, `request` 等多个模块中制定相符的处理策略。详细区别恕无法在此一一描述。\n* 字段名请采用下划线蛇形命名法。\n* 现在您可以自行设计模型字段，来感受`罐罐头`一键生成项目带给您的愉悦体验。\n\n#### storage\n* 简介\n    * storage 将流量上下行压力完全转移给 `OSS`，极高提升了响应速度，降低服务器对带宽的要求。\n    * storage 字段的逻辑\n        * 前端从服务器中获得签名\n        * 前端使用签名将图片类资源上传到`阿里云 OSS`服务当中\n        * 前端将 资源id 填到字段中，将其保存到服务器\n        * 在前端需求此资源的时候，后台生成一个带有签名的`OSS 服务临时地址`，前端去 `OSS` 服务器取得资源\n* 如何使用\n    * 按注释将`阿里云OSS配置`填入`.env`当中。\n    * 将项目中的`docs/project_api.yaml`文档交给前端。\n    * 如果不够，就将 [阿里云OSS PostObject 官方文档](https://help.aliyun.com/document_detail/31988.html?spm=a2c4g.11186623.6.1690.31751c20qeGNUZ) 交给前端。\n    * 如果还不够，就将项目中的 `vendor/iidestiny/laravel-filesystem-oss/README.md`交给任劳任怨的前端。这里包含一个 CV 战士的专供demo\n* 注意：\n    * 服务器需要每隔一段时间将那些没有被使用到的 storage 清理掉来节约空间。它是通过定时任务实现的。所以你需要启动此项目的定时任务\n\n~~~\nexport EDITOR=vi && crontab -e\n~~~\n\n此时进入 VI 编辑器界面：\n\n* 按大写的 G （或者按方向键）将光标移动到最底端；\n* 然后按键盘上的 『小写 i 键』进入 INSERT 模式；\n* 黏贴下面这一行，并替换项目路径；\n ``` \n * * * * * php 项目路径/artisan schedule:run >> /dev/null 2>&1\n ```\n* 黏贴成功后按下键盘左上角的『ESC 键』进入 VI 的命令模式；\n* 键盘输入 :wq 并敲击回车键保存退出。\n\n## 完整创建\n* 之前我们在设置页，项目详情，模型详情进行了那么多的操作，为的就是这一刻一键生成我们的项目。相信您一定已经等不及了吧。\n* 点击项目详情页的`完整生成`,输入一个空路径，`罐罐头` 将为您创建上述所有的饼。现在，有了完成增删改查基础功能和完整空间的项目，将您的精力尽情的投入到 Coding 中去吧！\n* 当项目生成过之后，就会转变为`增量生成`，即：根据你对模型的调整，在你的项目中做出对应的调整。很抱歉这一点还没有完成，不过它即将在下一版中到来。\n* 项目中存在大量的 ` <------ some string` 的标记，它是为`增量生成`埋下的锚点。请勿修改本行内容，否则将导致`罐罐头`无法准确找到项目。\n* Happy Coding !\n* 感谢您的尝试，`罐罐头`将与您一同成长！\n\n## 版本信息\n### v1.1.0\n* 支持增量更新\n\n### V1.0.0\n* 罐罐头发布\n\n### 当前版本缺陷\n* 仅支持`php laravel`语言\n* 生成会直接生成全部的功能文件\n* 模型关系不够清晰\n* 项目详情界面滚动条BUG。（暂时请使用方向键）\n\n### 即将到来\n生成文件可选","slug":"ggt-coder/README_zh","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cksa1rbwz0001z4u4b6qmbbzx","content":"<h1 align=\"center\">罐罐头 Coder</h1>\n<p align=\"center\"><a href=\"https://github.com/CuratorC/ggt-coder-exe\"><img alt=\"For Laravel 8\" src=\"https://cdn.learnku.com/uploads/images/202103/10/32395/lcpvzujM5j.svg\" style=\"max-width:100%;\"></a>\n\n<h2 align=\"right\">将你从流水线式的编程中解放出来</h2>\n\n<p>翻译:</p>\n<ul>\n<li><a href=\"/ggt-coder/README\">English</a></li>\n</ul>\n<h2 id=\"Features\"><a href=\"#Features\" class=\"headerlink\" title=\"Features\"></a>Features</h2><ul>\n<li><p>可视化设计项目模型关系</p>\n</li>\n<li><p>一键生成项目</p>\n</li>\n<li><p>完整的 laravel 技术栈实现</p>\n</li>\n<li><p>根据字段设计，自动完成以下模块的编写，实现增删改查基础功能的全部流程，为复杂逻辑提供全面的对接空间</p>\n<ul>\n<li>Model         - 模型文件</li>\n<li>Observer      - 观察者</li>\n<li>Resource      - API 资源</li>\n<li>Collection    - 资源集合</li>\n<li>Controller    - 控制器</li>\n<li>Request       - 表单验证</li>\n<li>Rule          - 表单规则</li>\n<li>Policy        - 权限</li>\n<li>Route         - 路由</li>\n<li>Migration     - 数据库</li>\n<li>Seeder        - 虚拟数据</li>\n<li>Factory       - 模型工厂</li>\n<li>Test          - 测试文件</li>\n<li>Docs          - API文档</li>\n</ul>\n</li>\n<li><p><code>罐罐头</code>生成出来的项目应用了大量<code>laravel</code>知识。如果以上大部分功能您都不明所以，建议您先阅读一下<code>learnku</code>论坛中的 <a href=\"https://learnku.com/courses/laravel-essential-training/8.x\">laravel 实战教程一</a> 和 <a href=\"https://learnku.com/courses/laravel-advance-training/8.x\">laravel 实战教程三</a> 。</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">项目地址</span><br><span class=\"line\">github : git clone https://github.com/CuratorC/ggt-coder.git</span><br><span class=\"line\">gitee : git clone https://gitee.com/Curator/ggt-coder.git</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Start\"><a href=\"#Start\" class=\"headerlink\" title=\"Start\"></a>Start</h2><p>双击 ggt-coder.exe ，就像是打开一款游戏一样，享受编码的过程！</p>\n<h3 id=\"设置-Setting\"><a href=\"#设置-Setting\" class=\"headerlink\" title=\"设置 Setting\"></a>设置 Setting</h3><h4 id=\"项目作者名称\"><a href=\"#项目作者名称\" class=\"headerlink\" title=\"项目作者名称\"></a>项目作者名称</h4><ul>\n<li>将这一项改为你的名称，以后这个字段将会填入注释当中的 <code>@author</code> 里！<h4 id=\"编程语言\"><a href=\"#编程语言\" class=\"headerlink\" title=\"编程语言\"></a>编程语言</h4></li>\n<li>很抱歉目前仅支持 Laravel 8.12 ,目前修改这一栏不会产生任何效果，以后会加入 Go 语言的一键生成。欢迎其他小伙伴加入我们一起完成这个项目！<h4 id=\"模型关系类型\"><a href=\"#模型关系类型\" class=\"headerlink\" title=\"模型关系类型\"></a>模型关系类型</h4></li>\n<li>众所周知改需求是甲方的传统艺能。有次我在做一个项目，一开始的需求是<code>一个业务员维护一个合同</code>，他们的对应关系是 <code>Contract BelongsTo Salesman</code>。<br>这个项目上线运行了好久，甲方突然要我改成 <code>多个业务员维护一个合同</code>，他们的模型关系是 <code>Contract BelongsToMany Salesmen</code>。<br>虽然只是换了一个单词，但是熟悉 <code>laravel 模型关联</code>的小伙伴已经知道了，这个改动涉及到新的数据表和多个字段的改动。<br>而且甲方还要把合同和公司，联系人的关系由<code>多对一对多</code>改为<code>多对多对多</code>。<br>甲方千不该万不该，甲方给我钱就是我的爸爸。所以出了问题我就要在自己身上反思：如果我在一开始就有一张中间表<code>Middle</code>来记录他们的关系，无论甲方怎么改，对我而言都是几个关键字的替换就可以了。</li>\n<li>所以就产生了这个<code>All For Middle</code>的设计理念。如果你无法适应这样的理念，可以将其改为<code>Real Relation</code>，<code>罐罐头</code>将忠实的为你生成你设计的模型关联。但我依旧建议你采用<code>All For Middle</code>的设计理念。</li>\n<li>或许你认为多了一张中间表 <code>Middle</code>，我的项目“脏了”，它会变得更慢，我想要精益求精，我要设计最快的结构，哪怕以后要面对崩山一般的改动。但是<code>罐罐头</code>本就是为了<code>将你从流水线式的编程中解放出来</code>而存在的。相信我，省去这些时间去钻研新的技术，你的项目运行效率会取得千百倍的提升，而不是在一两微秒之间打转。<h4 id=\"默认字段\"><a href=\"#默认字段\" class=\"headerlink\" title=\"默认字段\"></a>默认字段</h4></li>\n<li>这些字段会在你创建模型的时候自动加入表中。</li>\n<li>第一位是<code>字段描述</code>， 第二位是<code>字段名</code>，第三位是<code>字段类型</code>。前两个好理解，<code>字段类型</code>将会在之后详细说明，如果有必要的话，您完全可以凭借直觉自行决定修改默认字段。</li>\n</ul>\n<h3 id=\"项目列表-Project-List\"><a href=\"#项目列表-Project-List\" class=\"headerlink\" title=\"项目列表 Project List\"></a>项目列表 Project List</h3><ul>\n<li>就是你的项目列表</li>\n<li><code>罐罐头</code>的数据以<code>SQLite</code>的方式保存在本地，只要备份好数据库文件：<code>.\\ggt-coder_Data\\ggt-coder.db</code>，你就可以在任何地方完全重现属于你的<code>罐罐头</code></li>\n</ul>\n<h3 id=\"项目详情-Project-Content\"><a href=\"#项目详情-Project-Content\" class=\"headerlink\" title=\"项目详情 Project Content\"></a>项目详情 Project Content</h3><img alt=\"Project Content Image\" src=\"/images/ggt-coder/project_content.png\">\n\n<ul>\n<li>在项目列表界面点击 <code>新项目</code> 或者之前创建的项目，都能进入这个界面。</li>\n<li>顶部是项目名，建议采用像默认名称那样的 <code>英文单词 并用 - 连接</code>。因为域名解析更认可这种格式。</li>\n<li>主要版面展示了这个项目中你设计的模型关系。模型关系以可视化的形式展示在这里，更好的梳理项目结构和设计思路。</li>\n<li>你别管可视化做的好看不好看，它现在有个可视化的空间，以后就会有个更好的可视化的空间，对不对？</li>\n<li>底部按钮分别是 <code>创建模型</code>,<code>完整生成：为你一键生成项目</code>,<code>退出</code>,<code>删除</code></li>\n</ul>\n<h3 id=\"模型详情-Module-Content\"><a href=\"#模型详情-Module-Content\" class=\"headerlink\" title=\"模型详情 Module Content\"></a>模型详情 Module Content</h3><img alt=\"Module Content Image\" src=\"/images/ggt-coder/module_content.png\">\n\n<ul>\n<li>在项目详情页面点击<code>创建模型</code>或者之前创建的模型，都能进入这个界面。</li>\n<li>顶部是模型名和模型说明，模型名建议采用大驼峰单数格式。因为<code>laravel</code>的模型名就是这个规矩。如果你不想遵守这个规矩，<code>罐罐头</code>会帮你守规矩。</li>\n<li>主要版面列出了你对这个模型的设计。<h4 id=\"模型关系\"><a href=\"#模型关系\" class=\"headerlink\" title=\"模型关系\"></a>模型关系</h4></li>\n<li>左侧六种模型关系分别是<ul>\n<li>BelongsTo</li>\n<li>HasMany</li>\n<li>BelongsToMany</li>\n<li>HasOne</li>\n<li>HasOneThrough</li>\n<li>HasManyThrough</li>\n</ul>\n</li>\n<li>您只需要根据设计选择相应的对于关系即可，<code>罐罐头</code>会在生成项目的时候自动为您填充所需的字段，表格，对应方法。</li>\n<li>当您在 <code>B</code> 模型中设计了 <code>B BelongsTo A </code>的时候，<code>罐罐头</code> 会自动为您在 <code>A</code> 模型中填入 <code>A HasMany B</code><h4 id=\"模型字段\"><a href=\"#模型字段\" class=\"headerlink\" title=\"模型字段\"></a>模型字段</h4></li>\n<li>右侧十三种字段类型分别是<ul>\n<li>integer: 常用于人数统计等情况下的正整数字段</li>\n<li>integer-index: 常用于数字编号的带索引的正整数字段</li>\n<li>string: 常用于名称的短字符串字段</li>\n<li>string-index:  常用于帐户名的带索引的短字符字段</li>\n<li>tinyInteger:   常用于状态码的枚举型字段</li>\n<li>text: 常用于产品描述的长文章字段</li>\n<li>storage: 仅用于存储图片类资源的字段。关于这个字段有必要在下方正式介绍一下。</li>\n<li>decimal: 常用于金额的存在小数的字段</li>\n<li>datetime: 常用于截止时间的日期型字段</li>\n<li>array: 常用于规格等拥有不定项键值对的 json 字段</li>\n<li>primary: 主键，请确保一个模型内唯一</li>\n<li>timestamps: created_at 和 updated_at 的集合，建议一个模型内有且仅有一个此字段</li>\n<li>softDelete: 软删除，自以为是的<code>罐罐头</code>将默认所有模型都是软删除，若不想采用软删除，请在 <code>app\\Models\\Model.php</code> 中自行修改</li>\n</ul>\n</li>\n<li>字段的内容不仅仅是设计了数据库内的字段，<code>罐罐头</code>还将为你在<code>factory</code>, <code>model</code>, <code>request</code> 等多个模块中制定相符的处理策略。详细区别恕无法在此一一描述。</li>\n<li>字段名请采用下划线蛇形命名法。</li>\n<li>现在您可以自行设计模型字段，来感受<code>罐罐头</code>一键生成项目带给您的愉悦体验。</li>\n</ul>\n<h4 id=\"storage\"><a href=\"#storage\" class=\"headerlink\" title=\"storage\"></a>storage</h4><ul>\n<li>简介<ul>\n<li>storage 将流量上下行压力完全转移给 <code>OSS</code>，极高提升了响应速度，降低服务器对带宽的要求。</li>\n<li>storage 字段的逻辑<ul>\n<li>前端从服务器中获得签名</li>\n<li>前端使用签名将图片类资源上传到<code>阿里云 OSS</code>服务当中</li>\n<li>前端将 资源id 填到字段中，将其保存到服务器</li>\n<li>在前端需求此资源的时候，后台生成一个带有签名的<code>OSS 服务临时地址</code>，前端去 <code>OSS</code> 服务器取得资源</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>如何使用<ul>\n<li>按注释将<code>阿里云OSS配置</code>填入<code>.env</code>当中。</li>\n<li>将项目中的<code>docs/project_api.yaml</code>文档交给前端。</li>\n<li>如果不够，就将 <a href=\"https://help.aliyun.com/document_detail/31988.html?spm=a2c4g.11186623.6.1690.31751c20qeGNUZ\">阿里云OSS PostObject 官方文档</a> 交给前端。</li>\n<li>如果还不够，就将项目中的 <code>vendor/iidestiny/laravel-filesystem-oss/README.md</code>交给任劳任怨的前端。这里包含一个 CV 战士的专供demo</li>\n</ul>\n</li>\n<li>注意：<ul>\n<li>服务器需要每隔一段时间将那些没有被使用到的 storage 清理掉来节约空间。它是通过定时任务实现的。所以你需要启动此项目的定时任务</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">export EDITOR=vi &amp;&amp; crontab -e</span><br></pre></td></tr></table></figure>\n\n<p>此时进入 VI 编辑器界面：</p>\n<ul>\n<li>按大写的 G （或者按方向键）将光标移动到最底端；</li>\n<li>然后按键盘上的 『小写 i 键』进入 INSERT 模式；</li>\n<li>黏贴下面这一行，并替换项目路径；<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">* * * * * php 项目路径/artisan schedule:run &gt;&gt; /dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure></li>\n<li>黏贴成功后按下键盘左上角的『ESC 键』进入 VI 的命令模式；</li>\n<li>键盘输入 :wq 并敲击回车键保存退出。</li>\n</ul>\n<h2 id=\"完整创建\"><a href=\"#完整创建\" class=\"headerlink\" title=\"完整创建\"></a>完整创建</h2><ul>\n<li>之前我们在设置页，项目详情，模型详情进行了那么多的操作，为的就是这一刻一键生成我们的项目。相信您一定已经等不及了吧。</li>\n<li>点击项目详情页的<code>完整生成</code>,输入一个空路径，<code>罐罐头</code> 将为您创建上述所有的饼。现在，有了完成增删改查基础功能和完整空间的项目，将您的精力尽情的投入到 Coding 中去吧！</li>\n<li>当项目生成过之后，就会转变为<code>增量生成</code>，即：根据你对模型的调整，在你的项目中做出对应的调整。很抱歉这一点还没有完成，不过它即将在下一版中到来。</li>\n<li>项目中存在大量的 <code> &lt;------ some string</code> 的标记，它是为<code>增量生成</code>埋下的锚点。请勿修改本行内容，否则将导致<code>罐罐头</code>无法准确找到项目。</li>\n<li>Happy Coding !</li>\n<li>感谢您的尝试，<code>罐罐头</code>将与您一同成长！</li>\n</ul>\n<h2 id=\"版本信息\"><a href=\"#版本信息\" class=\"headerlink\" title=\"版本信息\"></a>版本信息</h2><h3 id=\"v1-1-0\"><a href=\"#v1-1-0\" class=\"headerlink\" title=\"v1.1.0\"></a>v1.1.0</h3><ul>\n<li>支持增量更新</li>\n</ul>\n<h3 id=\"V1-0-0\"><a href=\"#V1-0-0\" class=\"headerlink\" title=\"V1.0.0\"></a>V1.0.0</h3><ul>\n<li>罐罐头发布</li>\n</ul>\n<h3 id=\"当前版本缺陷\"><a href=\"#当前版本缺陷\" class=\"headerlink\" title=\"当前版本缺陷\"></a>当前版本缺陷</h3><ul>\n<li>仅支持<code>php laravel</code>语言</li>\n<li>生成会直接生成全部的功能文件</li>\n<li>模型关系不够清晰</li>\n<li>项目详情界面滚动条BUG。（暂时请使用方向键）</li>\n</ul>\n<h3 id=\"即将到来\"><a href=\"#即将到来\" class=\"headerlink\" title=\"即将到来\"></a>即将到来</h3><p>生成文件可选</p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<h1 align=\"center\">罐罐头 Coder</h1>\n<p align=\"center\"><a href=\"https://github.com/CuratorC/ggt-coder-exe\"><img alt=\"For Laravel 8\" src=\"https://cdn.learnku.com/uploads/images/202103/10/32395/lcpvzujM5j.svg\" style=\"max-width:100%;\"></a>\n\n<h2 align=\"right\">将你从流水线式的编程中解放出来</h2>\n\n<p>翻译:</p>\n<ul>\n<li><a href=\"/ggt-coder/README\">English</a></li>\n</ul>\n<h2 id=\"Features\"><a href=\"#Features\" class=\"headerlink\" title=\"Features\"></a>Features</h2><ul>\n<li><p>可视化设计项目模型关系</p>\n</li>\n<li><p>一键生成项目</p>\n</li>\n<li><p>完整的 laravel 技术栈实现</p>\n</li>\n<li><p>根据字段设计，自动完成以下模块的编写，实现增删改查基础功能的全部流程，为复杂逻辑提供全面的对接空间</p>\n<ul>\n<li>Model         - 模型文件</li>\n<li>Observer      - 观察者</li>\n<li>Resource      - API 资源</li>\n<li>Collection    - 资源集合</li>\n<li>Controller    - 控制器</li>\n<li>Request       - 表单验证</li>\n<li>Rule          - 表单规则</li>\n<li>Policy        - 权限</li>\n<li>Route         - 路由</li>\n<li>Migration     - 数据库</li>\n<li>Seeder        - 虚拟数据</li>\n<li>Factory       - 模型工厂</li>\n<li>Test          - 测试文件</li>\n<li>Docs          - API文档</li>\n</ul>\n</li>\n<li><p><code>罐罐头</code>生成出来的项目应用了大量<code>laravel</code>知识。如果以上大部分功能您都不明所以，建议您先阅读一下<code>learnku</code>论坛中的 <a href=\"https://learnku.com/courses/laravel-essential-training/8.x\">laravel 实战教程一</a> 和 <a href=\"https://learnku.com/courses/laravel-advance-training/8.x\">laravel 实战教程三</a> 。</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">项目地址</span><br><span class=\"line\">github : git clone https://github.com/CuratorC/ggt-coder.git</span><br><span class=\"line\">gitee : git clone https://gitee.com/Curator/ggt-coder.git</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Start\"><a href=\"#Start\" class=\"headerlink\" title=\"Start\"></a>Start</h2><p>双击 ggt-coder.exe ，就像是打开一款游戏一样，享受编码的过程！</p>\n<h3 id=\"设置-Setting\"><a href=\"#设置-Setting\" class=\"headerlink\" title=\"设置 Setting\"></a>设置 Setting</h3><h4 id=\"项目作者名称\"><a href=\"#项目作者名称\" class=\"headerlink\" title=\"项目作者名称\"></a>项目作者名称</h4><ul>\n<li>将这一项改为你的名称，以后这个字段将会填入注释当中的 <code>@author</code> 里！<h4 id=\"编程语言\"><a href=\"#编程语言\" class=\"headerlink\" title=\"编程语言\"></a>编程语言</h4></li>\n<li>很抱歉目前仅支持 Laravel 8.12 ,目前修改这一栏不会产生任何效果，以后会加入 Go 语言的一键生成。欢迎其他小伙伴加入我们一起完成这个项目！<h4 id=\"模型关系类型\"><a href=\"#模型关系类型\" class=\"headerlink\" title=\"模型关系类型\"></a>模型关系类型</h4></li>\n<li>众所周知改需求是甲方的传统艺能。有次我在做一个项目，一开始的需求是<code>一个业务员维护一个合同</code>，他们的对应关系是 <code>Contract BelongsTo Salesman</code>。<br>这个项目上线运行了好久，甲方突然要我改成 <code>多个业务员维护一个合同</code>，他们的模型关系是 <code>Contract BelongsToMany Salesmen</code>。<br>虽然只是换了一个单词，但是熟悉 <code>laravel 模型关联</code>的小伙伴已经知道了，这个改动涉及到新的数据表和多个字段的改动。<br>而且甲方还要把合同和公司，联系人的关系由<code>多对一对多</code>改为<code>多对多对多</code>。<br>甲方千不该万不该，甲方给我钱就是我的爸爸。所以出了问题我就要在自己身上反思：如果我在一开始就有一张中间表<code>Middle</code>来记录他们的关系，无论甲方怎么改，对我而言都是几个关键字的替换就可以了。</li>\n<li>所以就产生了这个<code>All For Middle</code>的设计理念。如果你无法适应这样的理念，可以将其改为<code>Real Relation</code>，<code>罐罐头</code>将忠实的为你生成你设计的模型关联。但我依旧建议你采用<code>All For Middle</code>的设计理念。</li>\n<li>或许你认为多了一张中间表 <code>Middle</code>，我的项目“脏了”，它会变得更慢，我想要精益求精，我要设计最快的结构，哪怕以后要面对崩山一般的改动。但是<code>罐罐头</code>本就是为了<code>将你从流水线式的编程中解放出来</code>而存在的。相信我，省去这些时间去钻研新的技术，你的项目运行效率会取得千百倍的提升，而不是在一两微秒之间打转。<h4 id=\"默认字段\"><a href=\"#默认字段\" class=\"headerlink\" title=\"默认字段\"></a>默认字段</h4></li>\n<li>这些字段会在你创建模型的时候自动加入表中。</li>\n<li>第一位是<code>字段描述</code>， 第二位是<code>字段名</code>，第三位是<code>字段类型</code>。前两个好理解，<code>字段类型</code>将会在之后详细说明，如果有必要的话，您完全可以凭借直觉自行决定修改默认字段。</li>\n</ul>\n<h3 id=\"项目列表-Project-List\"><a href=\"#项目列表-Project-List\" class=\"headerlink\" title=\"项目列表 Project List\"></a>项目列表 Project List</h3><ul>\n<li>就是你的项目列表</li>\n<li><code>罐罐头</code>的数据以<code>SQLite</code>的方式保存在本地，只要备份好数据库文件：<code>.\\ggt-coder_Data\\ggt-coder.db</code>，你就可以在任何地方完全重现属于你的<code>罐罐头</code></li>\n</ul>\n<h3 id=\"项目详情-Project-Content\"><a href=\"#项目详情-Project-Content\" class=\"headerlink\" title=\"项目详情 Project Content\"></a>项目详情 Project Content</h3><img alt=\"Project Content Image\" src=\"/images/ggt-coder/project_content.png\">\n\n<ul>\n<li>在项目列表界面点击 <code>新项目</code> 或者之前创建的项目，都能进入这个界面。</li>\n<li>顶部是项目名，建议采用像默认名称那样的 <code>英文单词 并用 - 连接</code>。因为域名解析更认可这种格式。</li>\n<li>主要版面展示了这个项目中你设计的模型关系。模型关系以可视化的形式展示在这里，更好的梳理项目结构和设计思路。</li>\n<li>你别管可视化做的好看不好看，它现在有个可视化的空间，以后就会有个更好的可视化的空间，对不对？</li>\n<li>底部按钮分别是 <code>创建模型</code>,<code>完整生成：为你一键生成项目</code>,<code>退出</code>,<code>删除</code></li>\n</ul>\n<h3 id=\"模型详情-Module-Content\"><a href=\"#模型详情-Module-Content\" class=\"headerlink\" title=\"模型详情 Module Content\"></a>模型详情 Module Content</h3><img alt=\"Module Content Image\" src=\"/images/ggt-coder/module_content.png\">\n\n<ul>\n<li>在项目详情页面点击<code>创建模型</code>或者之前创建的模型，都能进入这个界面。</li>\n<li>顶部是模型名和模型说明，模型名建议采用大驼峰单数格式。因为<code>laravel</code>的模型名就是这个规矩。如果你不想遵守这个规矩，<code>罐罐头</code>会帮你守规矩。</li>\n<li>主要版面列出了你对这个模型的设计。<h4 id=\"模型关系\"><a href=\"#模型关系\" class=\"headerlink\" title=\"模型关系\"></a>模型关系</h4></li>\n<li>左侧六种模型关系分别是<ul>\n<li>BelongsTo</li>\n<li>HasMany</li>\n<li>BelongsToMany</li>\n<li>HasOne</li>\n<li>HasOneThrough</li>\n<li>HasManyThrough</li>\n</ul>\n</li>\n<li>您只需要根据设计选择相应的对于关系即可，<code>罐罐头</code>会在生成项目的时候自动为您填充所需的字段，表格，对应方法。</li>\n<li>当您在 <code>B</code> 模型中设计了 <code>B BelongsTo A </code>的时候，<code>罐罐头</code> 会自动为您在 <code>A</code> 模型中填入 <code>A HasMany B</code><h4 id=\"模型字段\"><a href=\"#模型字段\" class=\"headerlink\" title=\"模型字段\"></a>模型字段</h4></li>\n<li>右侧十三种字段类型分别是<ul>\n<li>integer: 常用于人数统计等情况下的正整数字段</li>\n<li>integer-index: 常用于数字编号的带索引的正整数字段</li>\n<li>string: 常用于名称的短字符串字段</li>\n<li>string-index:  常用于帐户名的带索引的短字符字段</li>\n<li>tinyInteger:   常用于状态码的枚举型字段</li>\n<li>text: 常用于产品描述的长文章字段</li>\n<li>storage: 仅用于存储图片类资源的字段。关于这个字段有必要在下方正式介绍一下。</li>\n<li>decimal: 常用于金额的存在小数的字段</li>\n<li>datetime: 常用于截止时间的日期型字段</li>\n<li>array: 常用于规格等拥有不定项键值对的 json 字段</li>\n<li>primary: 主键，请确保一个模型内唯一</li>\n<li>timestamps: created_at 和 updated_at 的集合，建议一个模型内有且仅有一个此字段</li>\n<li>softDelete: 软删除，自以为是的<code>罐罐头</code>将默认所有模型都是软删除，若不想采用软删除，请在 <code>app\\Models\\Model.php</code> 中自行修改</li>\n</ul>\n</li>\n<li>字段的内容不仅仅是设计了数据库内的字段，<code>罐罐头</code>还将为你在<code>factory</code>, <code>model</code>, <code>request</code> 等多个模块中制定相符的处理策略。详细区别恕无法在此一一描述。</li>\n<li>字段名请采用下划线蛇形命名法。</li>\n<li>现在您可以自行设计模型字段，来感受<code>罐罐头</code>一键生成项目带给您的愉悦体验。</li>\n</ul>\n<h4 id=\"storage\"><a href=\"#storage\" class=\"headerlink\" title=\"storage\"></a>storage</h4><ul>\n<li>简介<ul>\n<li>storage 将流量上下行压力完全转移给 <code>OSS</code>，极高提升了响应速度，降低服务器对带宽的要求。</li>\n<li>storage 字段的逻辑<ul>\n<li>前端从服务器中获得签名</li>\n<li>前端使用签名将图片类资源上传到<code>阿里云 OSS</code>服务当中</li>\n<li>前端将 资源id 填到字段中，将其保存到服务器</li>\n<li>在前端需求此资源的时候，后台生成一个带有签名的<code>OSS 服务临时地址</code>，前端去 <code>OSS</code> 服务器取得资源</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>如何使用<ul>\n<li>按注释将<code>阿里云OSS配置</code>填入<code>.env</code>当中。</li>\n<li>将项目中的<code>docs/project_api.yaml</code>文档交给前端。</li>\n<li>如果不够，就将 <a href=\"https://help.aliyun.com/document_detail/31988.html?spm=a2c4g.11186623.6.1690.31751c20qeGNUZ\">阿里云OSS PostObject 官方文档</a> 交给前端。</li>\n<li>如果还不够，就将项目中的 <code>vendor/iidestiny/laravel-filesystem-oss/README.md</code>交给任劳任怨的前端。这里包含一个 CV 战士的专供demo</li>\n</ul>\n</li>\n<li>注意：<ul>\n<li>服务器需要每隔一段时间将那些没有被使用到的 storage 清理掉来节约空间。它是通过定时任务实现的。所以你需要启动此项目的定时任务</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">export EDITOR=vi &amp;&amp; crontab -e</span><br></pre></td></tr></table></figure>\n\n<p>此时进入 VI 编辑器界面：</p>\n<ul>\n<li>按大写的 G （或者按方向键）将光标移动到最底端；</li>\n<li>然后按键盘上的 『小写 i 键』进入 INSERT 模式；</li>\n<li>黏贴下面这一行，并替换项目路径；<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">* * * * * php 项目路径/artisan schedule:run &gt;&gt; /dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure></li>\n<li>黏贴成功后按下键盘左上角的『ESC 键』进入 VI 的命令模式；</li>\n<li>键盘输入 :wq 并敲击回车键保存退出。</li>\n</ul>\n<h2 id=\"完整创建\"><a href=\"#完整创建\" class=\"headerlink\" title=\"完整创建\"></a>完整创建</h2><ul>\n<li>之前我们在设置页，项目详情，模型详情进行了那么多的操作，为的就是这一刻一键生成我们的项目。相信您一定已经等不及了吧。</li>\n<li>点击项目详情页的<code>完整生成</code>,输入一个空路径，<code>罐罐头</code> 将为您创建上述所有的饼。现在，有了完成增删改查基础功能和完整空间的项目，将您的精力尽情的投入到 Coding 中去吧！</li>\n<li>当项目生成过之后，就会转变为<code>增量生成</code>，即：根据你对模型的调整，在你的项目中做出对应的调整。很抱歉这一点还没有完成，不过它即将在下一版中到来。</li>\n<li>项目中存在大量的 <code> &lt;------ some string</code> 的标记，它是为<code>增量生成</code>埋下的锚点。请勿修改本行内容，否则将导致<code>罐罐头</code>无法准确找到项目。</li>\n<li>Happy Coding !</li>\n<li>感谢您的尝试，<code>罐罐头</code>将与您一同成长！</li>\n</ul>\n<h2 id=\"版本信息\"><a href=\"#版本信息\" class=\"headerlink\" title=\"版本信息\"></a>版本信息</h2><h3 id=\"v1-1-0\"><a href=\"#v1-1-0\" class=\"headerlink\" title=\"v1.1.0\"></a>v1.1.0</h3><ul>\n<li>支持增量更新</li>\n</ul>\n<h3 id=\"V1-0-0\"><a href=\"#V1-0-0\" class=\"headerlink\" title=\"V1.0.0\"></a>V1.0.0</h3><ul>\n<li>罐罐头发布</li>\n</ul>\n<h3 id=\"当前版本缺陷\"><a href=\"#当前版本缺陷\" class=\"headerlink\" title=\"当前版本缺陷\"></a>当前版本缺陷</h3><ul>\n<li>仅支持<code>php laravel</code>语言</li>\n<li>生成会直接生成全部的功能文件</li>\n<li>模型关系不够清晰</li>\n<li>项目详情界面滚动条BUG。（暂时请使用方向键）</li>\n</ul>\n<h3 id=\"即将到来\"><a href=\"#即将到来\" class=\"headerlink\" title=\"即将到来\"></a>即将到来</h3><p>生成文件可选</p>\n"},{"title":"GGT Coder English Document","description":"我的英文能力有限，要不我们先看 中文文档?","keywords":"ggt-coder","top_img":"/images/ggt-coder/ggt-coder-cover.png","cover":"/images/ggt-coder/ggt-coder-cover.png","date":"2021-08-13T02:13:23.000Z","updated":"2021-08-13T02:13:23.000Z","_content":"<h1 align=\"center\">GGT Coder</h1>\n<p align=\"center\"><a href=\"https://github.com/CuratorC/ggt-coder-exe\"><img alt=\"For Laravel 5\" src=\"https://img.shields.io/badge/laravel-8.12-green.svg\" style=\"max-width:100%;\"></a>\n\nTranslations:\n\n* 我的英文能力有限，要不我们先看 [中文文档](/ggt-coder/README_zh/) ?","source":"_posts/ggt-coder/README.md","raw":"---\ntitle: GGT coder English document\ndescription: 我的英文能力有限，要不我们先看 中文文档?\nkeywords: ggt-coder\ntop_img: /images/ggt-coder/ggt-coder-cover.png\ncover: /images/ggt-coder/ggt-coder-cover.png\ntags:\n  - ggt-coder\n  - 入门\ncategories:\n  - ggt-coder\ndate: 2021-08-13 10:13:23\nupdated: 2021-08-13 10:13:23 \n---\n<h1 align=\"center\">GGT Coder</h1>\n<p align=\"center\"><a href=\"https://github.com/CuratorC/ggt-coder-exe\"><img alt=\"For Laravel 5\" src=\"https://img.shields.io/badge/laravel-8.12-green.svg\" style=\"max-width:100%;\"></a>\n\nTranslations:\n\n* 我的英文能力有限，要不我们先看 [中文文档](/ggt-coder/README_zh/) ?","slug":"ggt-coder/README","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cksa1rbx30003z4u4cp99cdiq","content":"<h1 align=\"center\">GGT Coder</h1>\n<p align=\"center\"><a href=\"https://github.com/CuratorC/ggt-coder-exe\"><img alt=\"For Laravel 5\" src=\"https://img.shields.io/badge/laravel-8.12-green.svg\" style=\"max-width:100%;\"></a>\n\n<p>Translations:</p>\n<ul>\n<li>我的英文能力有限，要不我们先看 <a href=\"/ggt-coder/README_zh/\">中文文档</a> ?</li>\n</ul>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<h1 align=\"center\">GGT Coder</h1>\n<p align=\"center\"><a href=\"https://github.com/CuratorC/ggt-coder-exe\"><img alt=\"For Laravel 5\" src=\"https://img.shields.io/badge/laravel-8.12-green.svg\" style=\"max-width:100%;\"></a>\n\n<p>Translations:</p>\n<ul>\n<li>我的英文能力有限，要不我们先看 <a href=\"/ggt-coder/README_zh/\">中文文档</a> ?</li>\n</ul>\n"},{"title":"Start Golang","description":"下载并安装 Golang","keywords":"Golang, 下载, 安装","top_img":"/images/golang/GolangCover4.png","cover":"/images/golang/GolangCover4.png","date":"2021-08-12T08:49:48.000Z","updated":"2021-08-12T08:49:48.000Z","_content":"# Start Golang\n\n## 安装 Go\n\n### 下载 Golang\n* 下载地址 [https://golang.google.cn/dl/](https://golang.google.cn/dl/)\n* 当前版本 go1.16.5\n\n### 设置 Go Module\n* 查看 Go 环境变量\n  ```bash\n  go env\n  ```\n* 开启 Go Module\n  ```bash\n  go env -w GO111MODULE=on\n  ```\n* 开启GOPROXY\n  ```bash\n  go env -w GO111MODULE=on\n  ```\n* 安装 Go 文档\n  ```bash\n  go get golang.org/x/tools/cmd/godoc\n  ```","source":"_posts/golang/StartGolang.md","raw":"---\ntitle: Start Golang\ndescription: 下载并安装 Golang\nkeywords: Golang, 下载, 安装\ntop_img: /images/golang/GolangCover4.png\ncover: /images/golang/GolangCover4.png\ntags:\n  - Golang\n  - 入门\ncategories:\n  - Golang\ndate: 2021-08-12 16:49:48\nupdated: 2021-08-12 16:49:48\n---\n# Start Golang\n\n## 安装 Go\n\n### 下载 Golang\n* 下载地址 [https://golang.google.cn/dl/](https://golang.google.cn/dl/)\n* 当前版本 go1.16.5\n\n### 设置 Go Module\n* 查看 Go 环境变量\n  ```bash\n  go env\n  ```\n* 开启 Go Module\n  ```bash\n  go env -w GO111MODULE=on\n  ```\n* 开启GOPROXY\n  ```bash\n  go env -w GO111MODULE=on\n  ```\n* 安装 Go 文档\n  ```bash\n  go get golang.org/x/tools/cmd/godoc\n  ```","slug":"golang/StartGolang","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cksa1rbx60007z4u4827t617b","content":"<h1 id=\"Start-Golang\"><a href=\"#Start-Golang\" class=\"headerlink\" title=\"Start Golang\"></a>Start Golang</h1><h2 id=\"安装-Go\"><a href=\"#安装-Go\" class=\"headerlink\" title=\"安装 Go\"></a>安装 Go</h2><h3 id=\"下载-Golang\"><a href=\"#下载-Golang\" class=\"headerlink\" title=\"下载 Golang\"></a>下载 Golang</h3><ul>\n<li>下载地址 <a href=\"https://golang.google.cn/dl/\">https://golang.google.cn/dl/</a></li>\n<li>当前版本 go1.16.5</li>\n</ul>\n<h3 id=\"设置-Go-Module\"><a href=\"#设置-Go-Module\" class=\"headerlink\" title=\"设置 Go Module\"></a>设置 Go Module</h3><ul>\n<li>查看 Go 环境变量<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">go env</span><br></pre></td></tr></table></figure></li>\n<li>开启 Go Module<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">go env -w GO111MODULE=on</span><br></pre></td></tr></table></figure></li>\n<li>开启GOPROXY<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">go env -w GO111MODULE=on</span><br></pre></td></tr></table></figure></li>\n<li>安装 Go 文档<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">go get golang.org/x/tools/cmd/godoc</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<h1 id=\"Start-Golang\"><a href=\"#Start-Golang\" class=\"headerlink\" title=\"Start Golang\"></a>Start Golang</h1><h2 id=\"安装-Go\"><a href=\"#安装-Go\" class=\"headerlink\" title=\"安装 Go\"></a>安装 Go</h2><h3 id=\"下载-Golang\"><a href=\"#下载-Golang\" class=\"headerlink\" title=\"下载 Golang\"></a>下载 Golang</h3><ul>\n<li>下载地址 <a href=\"https://golang.google.cn/dl/\">https://golang.google.cn/dl/</a></li>\n<li>当前版本 go1.16.5</li>\n</ul>\n<h3 id=\"设置-Go-Module\"><a href=\"#设置-Go-Module\" class=\"headerlink\" title=\"设置 Go Module\"></a>设置 Go Module</h3><ul>\n<li>查看 Go 环境变量<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">go env</span><br></pre></td></tr></table></figure></li>\n<li>开启 Go Module<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">go env -w GO111MODULE=on</span><br></pre></td></tr></table></figure></li>\n<li>开启GOPROXY<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">go env -w GO111MODULE=on</span><br></pre></td></tr></table></figure></li>\n<li>安装 Go 文档<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">go get golang.org/x/tools/cmd/godoc</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"用计算证明：我远远低估了编译器","description":"当我使用 解释型语言PHP 进行验算 “如何使用PHP最高效率的将一个正整数扩大一千倍” 后却得出了相反的结论:只进行一次运算比进行两次计算要更快。 于是我猜测可能是 编译型语言 与 解释型语言 的差异导致的。围绕这个观点展开了论证。","keywords":"Golang, 编译器, 效率优化","top_img":"/images/golang/GolangCover2.jpg","cover":"/images/golang/GolangCover2.jpg","date":"2021-08-12T09:38:07.000Z","updated":"2021-08-12T09:38:07.000Z","_content":"# 用计算证明：我远远低估了编译器\n\n## 前情回顾\n在`将正整数扩大1000倍`的计算当中，朋友提出了计算机二进制算法理论：\n\n计算机会进行`正整数 X 512 + 正整数 X 256 + 正整数 X 128 + 正整数 X 128 + 正整数 X 64 + 正整数 X 32 + 正整数 X 8`，一直累加到凑齐 正整数的 1000 倍 为止。\n\n而运算`正整数 X 2的10次方 - ( 正整数 X 16 + 正整数 X 8) `要比那一串加号更快接近结果。\n\n但是当我使用`解释型语言PHP`进行验算 [如何使用PHP最高效率的将一个正整数扩大一千倍？](/php/PhpExpandsPositiveIntegersByAFactorOf1000) 后却得出了相反的结论:只进行一次运算比进行两次计算要更快。\n\n于是我猜测可能是`编译型语言`与`解释型语言`的差异导致的。围绕这个观点展开了论证。\n\n## 验算\n\n### 代码部分\n\n代码价值较低，为不影响阅读，置于[附录](/golang/CompiledLanguageComputationOfMultiplication#附录)\n\n### 运算结果\n\n将代码执行了数十次之后我得出了一个有些出乎意料的结论：方案三对方案二只有微乎其微的优势，甚至可以说两者的计算效率没有差距！\n\n以下贴出两个比较有代表性的结果\n\n![image01](/images/golang/CompiledLanguageComputationOfMultiplication01.png)\n\n![image02](/images/golang/CompiledLanguageComputationOfMultiplication02.png)\n\n## 修正运算\n\n### 改变计算量级\n后来我将计算量上升至`10亿次`，得出的结论也差不多。只靠这个结论我很难说服自己方案三比方案二更值得选择。但是运算结果也不合理：两者明明采取了不同的计算方案，为什么无法产生差距？\n\n与其说计算时间没有差距，不如说现有的运行时间全部都消耗在了`for`, `rand`, 和`time`上。既然如此，那么提升计算复杂度，来降低过程类计算的干扰是否会得出结果呢？\n\n### 改变计算复杂度\n我将随机数的范围取从 `999` 改为了 `9999999999` ，将乘数从 `1000` 改为了 `8,589,934,590(2的33次方减2)`同样各进行一千万次计算，在其他处理步骤不变的情况下，计算耗时被明显延长，但两种方案的计算时长依旧没能拉开差距。\n\n按照豆豆告诉我的理论，`integer * 8,589,934,590`会被解析`integer * 4,294,967,296 + integer * 2,147,483,648 ...`一直累加30多次来累计到目标乘积，而`integer * 8,589,934,592 - integer * 2`则避免了这样的运算。试验结论却不能支持这个观点。\n\n## 再次讨论\n带着这样的数据，我再次找到了豆豆。这次修行更进一步的豆豆同学嘲讽我一番后直接甩给我两篇知乎：\n- [现代C/C++编译器有多智能？能做出什么厉害的优化？ - 苏远的回答 - 知乎](https://www.zhihu.com/question/43598164/answer/96118643)\n- [现代C/C++编译器有多智能？能做出什么厉害的优化？ - 「已注销」的回答 - 知乎](https://www.zhihu.com/question/43598164/answer/142599680)\n\n## 我的理解\n两种方案的计算之所以没有产生时间差距，是因为两种写法经过编译之后，都运行了同样的算法。\n* 我：我想让编辑器做一个复杂步骤的计算，再做一个简单步骤的计算，用两种计算的耗时差距来证明计算机的算法。\n* 编译器：没想到吧崽种，我早已预判了你的预判！\n*\n要将编译器的预判囊括入我的预判，这一点`重新升格为大神的豆豆同学`也给出了方案\n{% note info flat %}\n你把你博客上的代码反汇编成汇编语言，看一看，就知道为什么时间差别不大了\n{% endnote %}\n但是编译器的算法早已经超出了蹒跚学步初学者的理解范畴。对于当前学习阶段的我而言，通过本次试验和讨论窥探一眼就好，看多了容易掉 SAN 值。日后若窥探到更多的内容，我会再写一篇博客出来，欢迎关注。\n\n## 附录\n### 附录代码\n\n```go\nfunc main() {\n\t// 计算次数\n\tmaxI := 10000000\n\n\tfmt.Println(\"方案1：拼接法\")\n\n\t// 随机数\n\trand.Seed(time.Now().UnixNano())\n\n\techoString := \"\"\n\n\tfor count := 0; count < 3; count++ {\n\t\t// 开始\n\t\tstart := time.Now()\n\t\techoString += \"第\" + strconv.Itoa(count + 1) + \"次:\"\n\n\t\tfor i := 0; i < maxI; i++ {\n\t\t\tinteger := rand.Intn(999)\n\t\t\t_, _ = strconv.Atoi(strconv.Itoa(integer) + \"000\")\n\t\t}\n\n\t\t// 结束\n\t\tend := time.Now()\n\n\t\tbetweenTime := float64(end.Sub(start).Nanoseconds()) / 1000000000\n\n\t\techoString += strconv.FormatFloat(betweenTime, 'f', 10, 64) + \"秒\"\n\t}\n\n\tfmt.Println(echoString)\n\techoString = \"\"\n\n\tfmt.Println(\"方案2：乘1000\")\n\tfor count := 0; count < 3; count++ {\n\t\t// 开始\n\t\tstart := time.Now()\n\t\techoString += \"第\" + strconv.Itoa(count + 1) + \"次:\"\n\n\t\tfor i := 0; i < maxI; i++ {\n\t\t\tinteger := rand.Intn(999)\n\t\t\t_ = integer * 1000\n\t\t}\n\n\t\t// 结束\n\t\tend := time.Now()\n\n\t\tbetweenTime := float64(end.Sub(start).Nanoseconds()) / 1000000000\n\n\t\techoString += strconv.FormatFloat(betweenTime, 'f', 10, 64) + \"秒\"\n\n\t}\n\n\tfmt.Println(echoString)\n\techoString = \"\"\n\n\tfmt.Println(\"方案3：乘以1024\")\n\tfor count := 0; count < 3; count++ {\n\t\t// 开始\n\t\tstart := time.Now()\n\t\techoString += \"第\" + strconv.Itoa(count + 1) + \"次:\"\n\n\t\tfor i := 0; i < maxI; i++ {\n\t\t\tinteger := rand.Intn(999)\n\t\t\t_ = (integer * 1024) - (integer * 24)\n\t\t}\n\n\t\t// 结束\n\t\tend := time.Now()\n\n\t\tbetweenTime := float64(end.Sub(start).Nanoseconds()) / 1000000000\n\n\t\techoString += strconv.FormatFloat(betweenTime, 'f', 10, 64) + \"秒\"\n\n\t}\n\n\tfmt.Println(echoString)\n\n}\n```\n","source":"_posts/golang/CompiledLanguageComputationOfMultiplication.md","raw":"---\ntitle: 用计算证明：我远远低估了编译器\ndescription: 当我使用 解释型语言PHP 进行验算 “如何使用PHP最高效率的将一个正整数扩大一千倍” 后却得出了相反的结论:只进行一次运算比进行两次计算要更快。 于是我猜测可能是 编译型语言 与 解释型语言 的差异导致的。围绕这个观点展开了论证。\nkeywords: Golang, 编译器, 效率优化\ntop_img: /images/golang/GolangCover2.jpg\ncover: /images/golang/GolangCover2.jpg\ntags:\n  - Golang\n  - 探讨\ncategories:\n  - Golang\ndate: 2021-08-12 17:38:07\nupdated: 2021-08-12 17:38:07\n---\n# 用计算证明：我远远低估了编译器\n\n## 前情回顾\n在`将正整数扩大1000倍`的计算当中，朋友提出了计算机二进制算法理论：\n\n计算机会进行`正整数 X 512 + 正整数 X 256 + 正整数 X 128 + 正整数 X 128 + 正整数 X 64 + 正整数 X 32 + 正整数 X 8`，一直累加到凑齐 正整数的 1000 倍 为止。\n\n而运算`正整数 X 2的10次方 - ( 正整数 X 16 + 正整数 X 8) `要比那一串加号更快接近结果。\n\n但是当我使用`解释型语言PHP`进行验算 [如何使用PHP最高效率的将一个正整数扩大一千倍？](/php/PhpExpandsPositiveIntegersByAFactorOf1000) 后却得出了相反的结论:只进行一次运算比进行两次计算要更快。\n\n于是我猜测可能是`编译型语言`与`解释型语言`的差异导致的。围绕这个观点展开了论证。\n\n## 验算\n\n### 代码部分\n\n代码价值较低，为不影响阅读，置于[附录](/golang/CompiledLanguageComputationOfMultiplication#附录)\n\n### 运算结果\n\n将代码执行了数十次之后我得出了一个有些出乎意料的结论：方案三对方案二只有微乎其微的优势，甚至可以说两者的计算效率没有差距！\n\n以下贴出两个比较有代表性的结果\n\n![image01](/images/golang/CompiledLanguageComputationOfMultiplication01.png)\n\n![image02](/images/golang/CompiledLanguageComputationOfMultiplication02.png)\n\n## 修正运算\n\n### 改变计算量级\n后来我将计算量上升至`10亿次`，得出的结论也差不多。只靠这个结论我很难说服自己方案三比方案二更值得选择。但是运算结果也不合理：两者明明采取了不同的计算方案，为什么无法产生差距？\n\n与其说计算时间没有差距，不如说现有的运行时间全部都消耗在了`for`, `rand`, 和`time`上。既然如此，那么提升计算复杂度，来降低过程类计算的干扰是否会得出结果呢？\n\n### 改变计算复杂度\n我将随机数的范围取从 `999` 改为了 `9999999999` ，将乘数从 `1000` 改为了 `8,589,934,590(2的33次方减2)`同样各进行一千万次计算，在其他处理步骤不变的情况下，计算耗时被明显延长，但两种方案的计算时长依旧没能拉开差距。\n\n按照豆豆告诉我的理论，`integer * 8,589,934,590`会被解析`integer * 4,294,967,296 + integer * 2,147,483,648 ...`一直累加30多次来累计到目标乘积，而`integer * 8,589,934,592 - integer * 2`则避免了这样的运算。试验结论却不能支持这个观点。\n\n## 再次讨论\n带着这样的数据，我再次找到了豆豆。这次修行更进一步的豆豆同学嘲讽我一番后直接甩给我两篇知乎：\n- [现代C/C++编译器有多智能？能做出什么厉害的优化？ - 苏远的回答 - 知乎](https://www.zhihu.com/question/43598164/answer/96118643)\n- [现代C/C++编译器有多智能？能做出什么厉害的优化？ - 「已注销」的回答 - 知乎](https://www.zhihu.com/question/43598164/answer/142599680)\n\n## 我的理解\n两种方案的计算之所以没有产生时间差距，是因为两种写法经过编译之后，都运行了同样的算法。\n* 我：我想让编辑器做一个复杂步骤的计算，再做一个简单步骤的计算，用两种计算的耗时差距来证明计算机的算法。\n* 编译器：没想到吧崽种，我早已预判了你的预判！\n*\n要将编译器的预判囊括入我的预判，这一点`重新升格为大神的豆豆同学`也给出了方案\n{% note info flat %}\n你把你博客上的代码反汇编成汇编语言，看一看，就知道为什么时间差别不大了\n{% endnote %}\n但是编译器的算法早已经超出了蹒跚学步初学者的理解范畴。对于当前学习阶段的我而言，通过本次试验和讨论窥探一眼就好，看多了容易掉 SAN 值。日后若窥探到更多的内容，我会再写一篇博客出来，欢迎关注。\n\n## 附录\n### 附录代码\n\n```go\nfunc main() {\n\t// 计算次数\n\tmaxI := 10000000\n\n\tfmt.Println(\"方案1：拼接法\")\n\n\t// 随机数\n\trand.Seed(time.Now().UnixNano())\n\n\techoString := \"\"\n\n\tfor count := 0; count < 3; count++ {\n\t\t// 开始\n\t\tstart := time.Now()\n\t\techoString += \"第\" + strconv.Itoa(count + 1) + \"次:\"\n\n\t\tfor i := 0; i < maxI; i++ {\n\t\t\tinteger := rand.Intn(999)\n\t\t\t_, _ = strconv.Atoi(strconv.Itoa(integer) + \"000\")\n\t\t}\n\n\t\t// 结束\n\t\tend := time.Now()\n\n\t\tbetweenTime := float64(end.Sub(start).Nanoseconds()) / 1000000000\n\n\t\techoString += strconv.FormatFloat(betweenTime, 'f', 10, 64) + \"秒\"\n\t}\n\n\tfmt.Println(echoString)\n\techoString = \"\"\n\n\tfmt.Println(\"方案2：乘1000\")\n\tfor count := 0; count < 3; count++ {\n\t\t// 开始\n\t\tstart := time.Now()\n\t\techoString += \"第\" + strconv.Itoa(count + 1) + \"次:\"\n\n\t\tfor i := 0; i < maxI; i++ {\n\t\t\tinteger := rand.Intn(999)\n\t\t\t_ = integer * 1000\n\t\t}\n\n\t\t// 结束\n\t\tend := time.Now()\n\n\t\tbetweenTime := float64(end.Sub(start).Nanoseconds()) / 1000000000\n\n\t\techoString += strconv.FormatFloat(betweenTime, 'f', 10, 64) + \"秒\"\n\n\t}\n\n\tfmt.Println(echoString)\n\techoString = \"\"\n\n\tfmt.Println(\"方案3：乘以1024\")\n\tfor count := 0; count < 3; count++ {\n\t\t// 开始\n\t\tstart := time.Now()\n\t\techoString += \"第\" + strconv.Itoa(count + 1) + \"次:\"\n\n\t\tfor i := 0; i < maxI; i++ {\n\t\t\tinteger := rand.Intn(999)\n\t\t\t_ = (integer * 1024) - (integer * 24)\n\t\t}\n\n\t\t// 结束\n\t\tend := time.Now()\n\n\t\tbetweenTime := float64(end.Sub(start).Nanoseconds()) / 1000000000\n\n\t\techoString += strconv.FormatFloat(betweenTime, 'f', 10, 64) + \"秒\"\n\n\t}\n\n\tfmt.Println(echoString)\n\n}\n```\n","slug":"golang/CompiledLanguageComputationOfMultiplication","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cksa1rbx80009z4u45w0qg30z","content":"<h1 id=\"用计算证明：我远远低估了编译器\"><a href=\"#用计算证明：我远远低估了编译器\" class=\"headerlink\" title=\"用计算证明：我远远低估了编译器\"></a>用计算证明：我远远低估了编译器</h1><h2 id=\"前情回顾\"><a href=\"#前情回顾\" class=\"headerlink\" title=\"前情回顾\"></a>前情回顾</h2><p>在<code>将正整数扩大1000倍</code>的计算当中，朋友提出了计算机二进制算法理论：</p>\n<p>计算机会进行<code>正整数 X 512 + 正整数 X 256 + 正整数 X 128 + 正整数 X 128 + 正整数 X 64 + 正整数 X 32 + 正整数 X 8</code>，一直累加到凑齐 正整数的 1000 倍 为止。</p>\n<p>而运算<code>正整数 X 2的10次方 - ( 正整数 X 16 + 正整数 X 8) </code>要比那一串加号更快接近结果。</p>\n<p>但是当我使用<code>解释型语言PHP</code>进行验算 <a href=\"/php/PhpExpandsPositiveIntegersByAFactorOf1000\">如何使用PHP最高效率的将一个正整数扩大一千倍？</a> 后却得出了相反的结论:只进行一次运算比进行两次计算要更快。</p>\n<p>于是我猜测可能是<code>编译型语言</code>与<code>解释型语言</code>的差异导致的。围绕这个观点展开了论证。</p>\n<h2 id=\"验算\"><a href=\"#验算\" class=\"headerlink\" title=\"验算\"></a>验算</h2><h3 id=\"代码部分\"><a href=\"#代码部分\" class=\"headerlink\" title=\"代码部分\"></a>代码部分</h3><p>代码价值较低，为不影响阅读，置于<a href=\"/golang/CompiledLanguageComputationOfMultiplication#%E9%99%84%E5%BD%95\">附录</a></p>\n<h3 id=\"运算结果\"><a href=\"#运算结果\" class=\"headerlink\" title=\"运算结果\"></a>运算结果</h3><p>将代码执行了数十次之后我得出了一个有些出乎意料的结论：方案三对方案二只有微乎其微的优势，甚至可以说两者的计算效率没有差距！</p>\n<p>以下贴出两个比较有代表性的结果</p>\n<p><img src=\"/images/golang/CompiledLanguageComputationOfMultiplication01.png\" alt=\"image01\"></p>\n<p><img src=\"/images/golang/CompiledLanguageComputationOfMultiplication02.png\" alt=\"image02\"></p>\n<h2 id=\"修正运算\"><a href=\"#修正运算\" class=\"headerlink\" title=\"修正运算\"></a>修正运算</h2><h3 id=\"改变计算量级\"><a href=\"#改变计算量级\" class=\"headerlink\" title=\"改变计算量级\"></a>改变计算量级</h3><p>后来我将计算量上升至<code>10亿次</code>，得出的结论也差不多。只靠这个结论我很难说服自己方案三比方案二更值得选择。但是运算结果也不合理：两者明明采取了不同的计算方案，为什么无法产生差距？</p>\n<p>与其说计算时间没有差距，不如说现有的运行时间全部都消耗在了<code>for</code>, <code>rand</code>, 和<code>time</code>上。既然如此，那么提升计算复杂度，来降低过程类计算的干扰是否会得出结果呢？</p>\n<h3 id=\"改变计算复杂度\"><a href=\"#改变计算复杂度\" class=\"headerlink\" title=\"改变计算复杂度\"></a>改变计算复杂度</h3><p>我将随机数的范围取从 <code>999</code> 改为了 <code>9999999999</code> ，将乘数从 <code>1000</code> 改为了 <code>8,589,934,590(2的33次方减2)</code>同样各进行一千万次计算，在其他处理步骤不变的情况下，计算耗时被明显延长，但两种方案的计算时长依旧没能拉开差距。</p>\n<p>按照豆豆告诉我的理论，<code>integer * 8,589,934,590</code>会被解析<code>integer * 4,294,967,296 + integer * 2,147,483,648 ...</code>一直累加30多次来累计到目标乘积，而<code>integer * 8,589,934,592 - integer * 2</code>则避免了这样的运算。试验结论却不能支持这个观点。</p>\n<h2 id=\"再次讨论\"><a href=\"#再次讨论\" class=\"headerlink\" title=\"再次讨论\"></a>再次讨论</h2><p>带着这样的数据，我再次找到了豆豆。这次修行更进一步的豆豆同学嘲讽我一番后直接甩给我两篇知乎：</p>\n<ul>\n<li><a href=\"https://www.zhihu.com/question/43598164/answer/96118643\">现代C/C++编译器有多智能？能做出什么厉害的优化？ - 苏远的回答 - 知乎</a></li>\n<li><a href=\"https://www.zhihu.com/question/43598164/answer/142599680\">现代C/C++编译器有多智能？能做出什么厉害的优化？ - 「已注销」的回答 - 知乎</a></li>\n</ul>\n<h2 id=\"我的理解\"><a href=\"#我的理解\" class=\"headerlink\" title=\"我的理解\"></a>我的理解</h2><p>两种方案的计算之所以没有产生时间差距，是因为两种写法经过编译之后，都运行了同样的算法。</p>\n<ul>\n<li>我：我想让编辑器做一个复杂步骤的计算，再做一个简单步骤的计算，用两种计算的耗时差距来证明计算机的算法。</li>\n<li>编译器：没想到吧崽种，我早已预判了你的预判！</li>\n<li>要将编译器的预判囊括入我的预判，这一点<code>重新升格为大神的豆豆同学</code>也给出了方案<div class=\"note info flat\"><p>你把你博客上的代码反汇编成汇编语言，看一看，就知道为什么时间差别不大了</p>\n</div>\n但是编译器的算法早已经超出了蹒跚学步初学者的理解范畴。对于当前学习阶段的我而言，通过本次试验和讨论窥探一眼就好，看多了容易掉 SAN 值。日后若窥探到更多的内容，我会再写一篇博客出来，欢迎关注。</li>\n</ul>\n<h2 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h2><h3 id=\"附录代码\"><a href=\"#附录代码\" class=\"headerlink\" title=\"附录代码\"></a>附录代码</h3><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 计算次数</span></span><br><span class=\"line\">\tmaxI := <span class=\"number\">10000000</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;方案1：拼接法&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 随机数</span></span><br><span class=\"line\">\trand.Seed(time.Now().UnixNano())</span><br><span class=\"line\"></span><br><span class=\"line\">\techoString := <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> count := <span class=\"number\">0</span>; count &lt; <span class=\"number\">3</span>; count++ &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 开始</span></span><br><span class=\"line\">\t\tstart := time.Now()</span><br><span class=\"line\">\t\techoString += <span class=\"string\">&quot;第&quot;</span> + strconv.Itoa(count + <span class=\"number\">1</span>) + <span class=\"string\">&quot;次:&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; maxI; i++ &#123;</span><br><span class=\"line\">\t\t\tinteger := rand.Intn(<span class=\"number\">999</span>)</span><br><span class=\"line\">\t\t\t_, _ = strconv.Atoi(strconv.Itoa(integer) + <span class=\"string\">&quot;000&quot;</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 结束</span></span><br><span class=\"line\">\t\tend := time.Now()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tbetweenTime := <span class=\"keyword\">float64</span>(end.Sub(start).Nanoseconds()) / <span class=\"number\">1000000000</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\techoString += strconv.FormatFloat(betweenTime, <span class=\"string\">&#x27;f&#x27;</span>, <span class=\"number\">10</span>, <span class=\"number\">64</span>) + <span class=\"string\">&quot;秒&quot;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(echoString)</span><br><span class=\"line\">\techoString = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;方案2：乘1000&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> count := <span class=\"number\">0</span>; count &lt; <span class=\"number\">3</span>; count++ &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 开始</span></span><br><span class=\"line\">\t\tstart := time.Now()</span><br><span class=\"line\">\t\techoString += <span class=\"string\">&quot;第&quot;</span> + strconv.Itoa(count + <span class=\"number\">1</span>) + <span class=\"string\">&quot;次:&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; maxI; i++ &#123;</span><br><span class=\"line\">\t\t\tinteger := rand.Intn(<span class=\"number\">999</span>)</span><br><span class=\"line\">\t\t\t_ = integer * <span class=\"number\">1000</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 结束</span></span><br><span class=\"line\">\t\tend := time.Now()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tbetweenTime := <span class=\"keyword\">float64</span>(end.Sub(start).Nanoseconds()) / <span class=\"number\">1000000000</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\techoString += strconv.FormatFloat(betweenTime, <span class=\"string\">&#x27;f&#x27;</span>, <span class=\"number\">10</span>, <span class=\"number\">64</span>) + <span class=\"string\">&quot;秒&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(echoString)</span><br><span class=\"line\">\techoString = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;方案3：乘以1024&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> count := <span class=\"number\">0</span>; count &lt; <span class=\"number\">3</span>; count++ &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 开始</span></span><br><span class=\"line\">\t\tstart := time.Now()</span><br><span class=\"line\">\t\techoString += <span class=\"string\">&quot;第&quot;</span> + strconv.Itoa(count + <span class=\"number\">1</span>) + <span class=\"string\">&quot;次:&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; maxI; i++ &#123;</span><br><span class=\"line\">\t\t\tinteger := rand.Intn(<span class=\"number\">999</span>)</span><br><span class=\"line\">\t\t\t_ = (integer * <span class=\"number\">1024</span>) - (integer * <span class=\"number\">24</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 结束</span></span><br><span class=\"line\">\t\tend := time.Now()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tbetweenTime := <span class=\"keyword\">float64</span>(end.Sub(start).Nanoseconds()) / <span class=\"number\">1000000000</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\techoString += strconv.FormatFloat(betweenTime, <span class=\"string\">&#x27;f&#x27;</span>, <span class=\"number\">10</span>, <span class=\"number\">64</span>) + <span class=\"string\">&quot;秒&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(echoString)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<h1 id=\"用计算证明：我远远低估了编译器\"><a href=\"#用计算证明：我远远低估了编译器\" class=\"headerlink\" title=\"用计算证明：我远远低估了编译器\"></a>用计算证明：我远远低估了编译器</h1><h2 id=\"前情回顾\"><a href=\"#前情回顾\" class=\"headerlink\" title=\"前情回顾\"></a>前情回顾</h2><p>在<code>将正整数扩大1000倍</code>的计算当中，朋友提出了计算机二进制算法理论：</p>\n<p>计算机会进行<code>正整数 X 512 + 正整数 X 256 + 正整数 X 128 + 正整数 X 128 + 正整数 X 64 + 正整数 X 32 + 正整数 X 8</code>，一直累加到凑齐 正整数的 1000 倍 为止。</p>\n<p>而运算<code>正整数 X 2的10次方 - ( 正整数 X 16 + 正整数 X 8) </code>要比那一串加号更快接近结果。</p>\n<p>但是当我使用<code>解释型语言PHP</code>进行验算 <a href=\"/php/PhpExpandsPositiveIntegersByAFactorOf1000\">如何使用PHP最高效率的将一个正整数扩大一千倍？</a> 后却得出了相反的结论:只进行一次运算比进行两次计算要更快。</p>\n<p>于是我猜测可能是<code>编译型语言</code>与<code>解释型语言</code>的差异导致的。围绕这个观点展开了论证。</p>\n<h2 id=\"验算\"><a href=\"#验算\" class=\"headerlink\" title=\"验算\"></a>验算</h2><h3 id=\"代码部分\"><a href=\"#代码部分\" class=\"headerlink\" title=\"代码部分\"></a>代码部分</h3><p>代码价值较低，为不影响阅读，置于<a href=\"/golang/CompiledLanguageComputationOfMultiplication#%E9%99%84%E5%BD%95\">附录</a></p>\n<h3 id=\"运算结果\"><a href=\"#运算结果\" class=\"headerlink\" title=\"运算结果\"></a>运算结果</h3><p>将代码执行了数十次之后我得出了一个有些出乎意料的结论：方案三对方案二只有微乎其微的优势，甚至可以说两者的计算效率没有差距！</p>\n<p>以下贴出两个比较有代表性的结果</p>\n<p><img src=\"/images/golang/CompiledLanguageComputationOfMultiplication01.png\" alt=\"image01\"></p>\n<p><img src=\"/images/golang/CompiledLanguageComputationOfMultiplication02.png\" alt=\"image02\"></p>\n<h2 id=\"修正运算\"><a href=\"#修正运算\" class=\"headerlink\" title=\"修正运算\"></a>修正运算</h2><h3 id=\"改变计算量级\"><a href=\"#改变计算量级\" class=\"headerlink\" title=\"改变计算量级\"></a>改变计算量级</h3><p>后来我将计算量上升至<code>10亿次</code>，得出的结论也差不多。只靠这个结论我很难说服自己方案三比方案二更值得选择。但是运算结果也不合理：两者明明采取了不同的计算方案，为什么无法产生差距？</p>\n<p>与其说计算时间没有差距，不如说现有的运行时间全部都消耗在了<code>for</code>, <code>rand</code>, 和<code>time</code>上。既然如此，那么提升计算复杂度，来降低过程类计算的干扰是否会得出结果呢？</p>\n<h3 id=\"改变计算复杂度\"><a href=\"#改变计算复杂度\" class=\"headerlink\" title=\"改变计算复杂度\"></a>改变计算复杂度</h3><p>我将随机数的范围取从 <code>999</code> 改为了 <code>9999999999</code> ，将乘数从 <code>1000</code> 改为了 <code>8,589,934,590(2的33次方减2)</code>同样各进行一千万次计算，在其他处理步骤不变的情况下，计算耗时被明显延长，但两种方案的计算时长依旧没能拉开差距。</p>\n<p>按照豆豆告诉我的理论，<code>integer * 8,589,934,590</code>会被解析<code>integer * 4,294,967,296 + integer * 2,147,483,648 ...</code>一直累加30多次来累计到目标乘积，而<code>integer * 8,589,934,592 - integer * 2</code>则避免了这样的运算。试验结论却不能支持这个观点。</p>\n<h2 id=\"再次讨论\"><a href=\"#再次讨论\" class=\"headerlink\" title=\"再次讨论\"></a>再次讨论</h2><p>带着这样的数据，我再次找到了豆豆。这次修行更进一步的豆豆同学嘲讽我一番后直接甩给我两篇知乎：</p>\n<ul>\n<li><a href=\"https://www.zhihu.com/question/43598164/answer/96118643\">现代C/C++编译器有多智能？能做出什么厉害的优化？ - 苏远的回答 - 知乎</a></li>\n<li><a href=\"https://www.zhihu.com/question/43598164/answer/142599680\">现代C/C++编译器有多智能？能做出什么厉害的优化？ - 「已注销」的回答 - 知乎</a></li>\n</ul>\n<h2 id=\"我的理解\"><a href=\"#我的理解\" class=\"headerlink\" title=\"我的理解\"></a>我的理解</h2><p>两种方案的计算之所以没有产生时间差距，是因为两种写法经过编译之后，都运行了同样的算法。</p>\n<ul>\n<li>我：我想让编辑器做一个复杂步骤的计算，再做一个简单步骤的计算，用两种计算的耗时差距来证明计算机的算法。</li>\n<li>编译器：没想到吧崽种，我早已预判了你的预判！</li>\n<li>要将编译器的预判囊括入我的预判，这一点<code>重新升格为大神的豆豆同学</code>也给出了方案<div class=\"note info flat\"><p>你把你博客上的代码反汇编成汇编语言，看一看，就知道为什么时间差别不大了</p>\n</div>\n但是编译器的算法早已经超出了蹒跚学步初学者的理解范畴。对于当前学习阶段的我而言，通过本次试验和讨论窥探一眼就好，看多了容易掉 SAN 值。日后若窥探到更多的内容，我会再写一篇博客出来，欢迎关注。</li>\n</ul>\n<h2 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h2><h3 id=\"附录代码\"><a href=\"#附录代码\" class=\"headerlink\" title=\"附录代码\"></a>附录代码</h3><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 计算次数</span></span><br><span class=\"line\">\tmaxI := <span class=\"number\">10000000</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;方案1：拼接法&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 随机数</span></span><br><span class=\"line\">\trand.Seed(time.Now().UnixNano())</span><br><span class=\"line\"></span><br><span class=\"line\">\techoString := <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> count := <span class=\"number\">0</span>; count &lt; <span class=\"number\">3</span>; count++ &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 开始</span></span><br><span class=\"line\">\t\tstart := time.Now()</span><br><span class=\"line\">\t\techoString += <span class=\"string\">&quot;第&quot;</span> + strconv.Itoa(count + <span class=\"number\">1</span>) + <span class=\"string\">&quot;次:&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; maxI; i++ &#123;</span><br><span class=\"line\">\t\t\tinteger := rand.Intn(<span class=\"number\">999</span>)</span><br><span class=\"line\">\t\t\t_, _ = strconv.Atoi(strconv.Itoa(integer) + <span class=\"string\">&quot;000&quot;</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 结束</span></span><br><span class=\"line\">\t\tend := time.Now()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tbetweenTime := <span class=\"keyword\">float64</span>(end.Sub(start).Nanoseconds()) / <span class=\"number\">1000000000</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\techoString += strconv.FormatFloat(betweenTime, <span class=\"string\">&#x27;f&#x27;</span>, <span class=\"number\">10</span>, <span class=\"number\">64</span>) + <span class=\"string\">&quot;秒&quot;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(echoString)</span><br><span class=\"line\">\techoString = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;方案2：乘1000&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> count := <span class=\"number\">0</span>; count &lt; <span class=\"number\">3</span>; count++ &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 开始</span></span><br><span class=\"line\">\t\tstart := time.Now()</span><br><span class=\"line\">\t\techoString += <span class=\"string\">&quot;第&quot;</span> + strconv.Itoa(count + <span class=\"number\">1</span>) + <span class=\"string\">&quot;次:&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; maxI; i++ &#123;</span><br><span class=\"line\">\t\t\tinteger := rand.Intn(<span class=\"number\">999</span>)</span><br><span class=\"line\">\t\t\t_ = integer * <span class=\"number\">1000</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 结束</span></span><br><span class=\"line\">\t\tend := time.Now()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tbetweenTime := <span class=\"keyword\">float64</span>(end.Sub(start).Nanoseconds()) / <span class=\"number\">1000000000</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\techoString += strconv.FormatFloat(betweenTime, <span class=\"string\">&#x27;f&#x27;</span>, <span class=\"number\">10</span>, <span class=\"number\">64</span>) + <span class=\"string\">&quot;秒&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(echoString)</span><br><span class=\"line\">\techoString = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;方案3：乘以1024&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> count := <span class=\"number\">0</span>; count &lt; <span class=\"number\">3</span>; count++ &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 开始</span></span><br><span class=\"line\">\t\tstart := time.Now()</span><br><span class=\"line\">\t\techoString += <span class=\"string\">&quot;第&quot;</span> + strconv.Itoa(count + <span class=\"number\">1</span>) + <span class=\"string\">&quot;次:&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; maxI; i++ &#123;</span><br><span class=\"line\">\t\t\tinteger := rand.Intn(<span class=\"number\">999</span>)</span><br><span class=\"line\">\t\t\t_ = (integer * <span class=\"number\">1024</span>) - (integer * <span class=\"number\">24</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 结束</span></span><br><span class=\"line\">\t\tend := time.Now()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tbetweenTime := <span class=\"keyword\">float64</span>(end.Sub(start).Nanoseconds()) / <span class=\"number\">1000000000</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\techoString += strconv.FormatFloat(betweenTime, <span class=\"string\">&#x27;f&#x27;</span>, <span class=\"number\">10</span>, <span class=\"number\">64</span>) + <span class=\"string\">&quot;秒&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(echoString)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"MySQL 创建用户和授权","description":"一般情况在公司之后DBA工程师会创建一个用户和密码，让你去连接数据库的操作，并给当前的用户设置某个操作的权限（或者所有权限）。那么这时就需要我们来简单了解一下： 如何创建用户和密码、给当前的用户授权、移除当前用户的权限","keywords":"MySQL, 创建用户","top_img":"/images/mysql/MySQLCover1.png","cover":"/images/mysql/MySQLCover1.png","date":"2021-08-13T03:47:05.000Z","updated":"2021-08-13T03:47:05.000Z","_content":"# MySQL创建用户和授权\n## 权限管理\n我们知道我们的最高权限管理者是root用户，它拥有着最高的权限操作。包括`select`、`update`、`delete`、`update`、`grant`等操作。\n\n那么一般情况在公司之后DBA工程师会创建一个用户和密码，让你去连接数据库的操作，并给当前的用户设置某个操作的权限（或者所有权限）。那么这时就需要我们来简单了解一下：\n\n* 如何创建用户和密码\n* 给当前的用户授权\n* 移除当前用户的权限\n\n## 进入到mysql数据库下\n```sql\nmysql> use mysql\nDatabase changed\n```\n\n## 对新用户增删改\n\n### 创建用户\n```sql\ncreate user \"username\"@\"host\" IDENTIFIED WITH mysql_native_password BY \"password\";\n```\n\neg:\n```sql\n-- 指定ip：47.99.161.35的用户 curatorc 登录\ncreate user \"curatorc\"@\"47.99.161.35\" identified by \"password\";\n-- 指定ip：47.99.161. 开头的用户 curatorc 登录\ncreate user \"curatorc\"@\"47.99.161.%\" identified by \"password\";\n-- 指定任何ip的用户 curatorc 登录\ncreate user \"curatorc\"@\"%\" identified by \"password\";\n```\n\n### 删除用户\n```sql\ndrop user \"username\"@\"host\";\n```\n### 修改用户\n```sql\nrename user \"username\"@\"host\" to \"newusn\"@\"host\";\n```\n\n### 修改密码\n```sql\nALTER USER 'username'@'host' IDENTIFIED WITH mysql_native_password BY \"password\";\n```\n\n## 对当前的用户授权管理\n### 授权\n```sql\ngrant all privileges  on database.table  to \"username\"@\"host\";\n```\n\neg:\n```sql\n-- 授权用户 curatorc 仅对db1.t1文件有查询、插入和更新的操作\ngrant select ,insert,update on db1.t1 to \"curatorc\"@\"%\";\n\n-- 表示有所有的权限，除了 grant 这个命令，这个命令是root才有的。用户 curatorc 对db1下的t1文件有任意操作\ngrant all privileges  on db1.t1 to \"curatorc\"@\"%\";\n-- 用户 curatorc 对db1数据库中的文件执行任何操作\ngrant all privileges  on db1.* to \"curatorc\"@\"%\";\n-- 用户 curatorc 对所有数据库中文件有任何操作\ngrant all privileges  on *.*  to \"curatorc\"@\"%\";\n```\n\n### 查看授权\n```sql\nshow grants for \"username\"@\"host\"\n```\n\n### 取消权限\n```sql\nrevoke all on database.table from \"username\"@\"host\";\n```\n## 刷新授权\n```sql\nFLUSH PRIVILEGES;\n```\n\n## 备份操作\n```sql\n-- 备份：数据表结构+数据\nmysqdump -u root db1 > db1.sql -p\n\n-- 备份：数据表结构\nmysqdump -u root -d db1 > db1.sql -p\n\n-- 导入现有的数据到某个数据库\n-- 1.先创建一个新的数据库\ncreate database db10;\n-- 2.将已有的数据库文件导入到db10数据库中\nmysqdump -u root -d db10 < db1.sql -p\n```\n\n> [转载链接](https://www.cnblogs.com/wangyueping/p/11258028.html)","source":"_posts/mysql/CreateUserAndAuthorization.md","raw":"---\ntitle: MySQL 创建用户和授权\ndescription: 一般情况在公司之后DBA工程师会创建一个用户和密码，让你去连接数据库的操作，并给当前的用户设置某个操作的权限（或者所有权限）。那么这时就需要我们来简单了解一下： 如何创建用户和密码、给当前的用户授权、移除当前用户的权限\nkeywords: MySQL, 创建用户\ntop_img: /images/mysql/MySQLCover1.png\ncover: /images/mysql/MySQLCover1.png\ntags:\n  - MySQL\n  - 入门\ncategories:\n  - MySQL\ndate: 2021-08-13 11:47:05\nupdated: 2021-08-13 11:47:05\n---\n# MySQL创建用户和授权\n## 权限管理\n我们知道我们的最高权限管理者是root用户，它拥有着最高的权限操作。包括`select`、`update`、`delete`、`update`、`grant`等操作。\n\n那么一般情况在公司之后DBA工程师会创建一个用户和密码，让你去连接数据库的操作，并给当前的用户设置某个操作的权限（或者所有权限）。那么这时就需要我们来简单了解一下：\n\n* 如何创建用户和密码\n* 给当前的用户授权\n* 移除当前用户的权限\n\n## 进入到mysql数据库下\n```sql\nmysql> use mysql\nDatabase changed\n```\n\n## 对新用户增删改\n\n### 创建用户\n```sql\ncreate user \"username\"@\"host\" IDENTIFIED WITH mysql_native_password BY \"password\";\n```\n\neg:\n```sql\n-- 指定ip：47.99.161.35的用户 curatorc 登录\ncreate user \"curatorc\"@\"47.99.161.35\" identified by \"password\";\n-- 指定ip：47.99.161. 开头的用户 curatorc 登录\ncreate user \"curatorc\"@\"47.99.161.%\" identified by \"password\";\n-- 指定任何ip的用户 curatorc 登录\ncreate user \"curatorc\"@\"%\" identified by \"password\";\n```\n\n### 删除用户\n```sql\ndrop user \"username\"@\"host\";\n```\n### 修改用户\n```sql\nrename user \"username\"@\"host\" to \"newusn\"@\"host\";\n```\n\n### 修改密码\n```sql\nALTER USER 'username'@'host' IDENTIFIED WITH mysql_native_password BY \"password\";\n```\n\n## 对当前的用户授权管理\n### 授权\n```sql\ngrant all privileges  on database.table  to \"username\"@\"host\";\n```\n\neg:\n```sql\n-- 授权用户 curatorc 仅对db1.t1文件有查询、插入和更新的操作\ngrant select ,insert,update on db1.t1 to \"curatorc\"@\"%\";\n\n-- 表示有所有的权限，除了 grant 这个命令，这个命令是root才有的。用户 curatorc 对db1下的t1文件有任意操作\ngrant all privileges  on db1.t1 to \"curatorc\"@\"%\";\n-- 用户 curatorc 对db1数据库中的文件执行任何操作\ngrant all privileges  on db1.* to \"curatorc\"@\"%\";\n-- 用户 curatorc 对所有数据库中文件有任何操作\ngrant all privileges  on *.*  to \"curatorc\"@\"%\";\n```\n\n### 查看授权\n```sql\nshow grants for \"username\"@\"host\"\n```\n\n### 取消权限\n```sql\nrevoke all on database.table from \"username\"@\"host\";\n```\n## 刷新授权\n```sql\nFLUSH PRIVILEGES;\n```\n\n## 备份操作\n```sql\n-- 备份：数据表结构+数据\nmysqdump -u root db1 > db1.sql -p\n\n-- 备份：数据表结构\nmysqdump -u root -d db1 > db1.sql -p\n\n-- 导入现有的数据到某个数据库\n-- 1.先创建一个新的数据库\ncreate database db10;\n-- 2.将已有的数据库文件导入到db10数据库中\nmysqdump -u root -d db10 < db1.sql -p\n```\n\n> [转载链接](https://www.cnblogs.com/wangyueping/p/11258028.html)","slug":"mysql/CreateUserAndAuthorization","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cksa1rbx8000az4u46qtob5x7","content":"<h1 id=\"MySQL创建用户和授权\"><a href=\"#MySQL创建用户和授权\" class=\"headerlink\" title=\"MySQL创建用户和授权\"></a>MySQL创建用户和授权</h1><h2 id=\"权限管理\"><a href=\"#权限管理\" class=\"headerlink\" title=\"权限管理\"></a>权限管理</h2><p>我们知道我们的最高权限管理者是root用户，它拥有着最高的权限操作。包括<code>select</code>、<code>update</code>、<code>delete</code>、<code>update</code>、<code>grant</code>等操作。</p>\n<p>那么一般情况在公司之后DBA工程师会创建一个用户和密码，让你去连接数据库的操作，并给当前的用户设置某个操作的权限（或者所有权限）。那么这时就需要我们来简单了解一下：</p>\n<ul>\n<li>如何创建用户和密码</li>\n<li>给当前的用户授权</li>\n<li>移除当前用户的权限</li>\n</ul>\n<h2 id=\"进入到mysql数据库下\"><a href=\"#进入到mysql数据库下\" class=\"headerlink\" title=\"进入到mysql数据库下\"></a>进入到mysql数据库下</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> use mysql</span><br><span class=\"line\">Database changed</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"对新用户增删改\"><a href=\"#对新用户增删改\" class=\"headerlink\" title=\"对新用户增删改\"></a>对新用户增删改</h2><h3 id=\"创建用户\"><a href=\"#创建用户\" class=\"headerlink\" title=\"创建用户\"></a>创建用户</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">user</span> &quot;username&quot;@&quot;host&quot; IDENTIFIED <span class=\"keyword\">WITH</span> mysql_native_password <span class=\"keyword\">BY</span> &quot;password&quot;;</span><br></pre></td></tr></table></figure>\n\n<p>eg:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 指定ip：47.99.161.35的用户 curatorc 登录</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">user</span> &quot;curatorc&quot;@&quot;47.99.161.35&quot; identified <span class=\"keyword\">by</span> &quot;password&quot;;</span><br><span class=\"line\"><span class=\"comment\">-- 指定ip：47.99.161. 开头的用户 curatorc 登录</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">user</span> &quot;curatorc&quot;@&quot;47.99.161.%&quot; identified <span class=\"keyword\">by</span> &quot;password&quot;;</span><br><span class=\"line\"><span class=\"comment\">-- 指定任何ip的用户 curatorc 登录</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">user</span> &quot;curatorc&quot;@&quot;%&quot; identified <span class=\"keyword\">by</span> &quot;password&quot;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除用户\"><a href=\"#删除用户\" class=\"headerlink\" title=\"删除用户\"></a>删除用户</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">user</span> &quot;username&quot;@&quot;host&quot;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改用户\"><a href=\"#修改用户\" class=\"headerlink\" title=\"修改用户\"></a>修改用户</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">rename <span class=\"keyword\">user</span> &quot;username&quot;@&quot;host&quot; <span class=\"keyword\">to</span> &quot;newusn&quot;@&quot;host&quot;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改密码\"><a href=\"#修改密码\" class=\"headerlink\" title=\"修改密码\"></a>修改密码</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">USER</span> <span class=\"string\">&#x27;username&#x27;</span>@<span class=\"string\">&#x27;host&#x27;</span> IDENTIFIED <span class=\"keyword\">WITH</span> mysql_native_password <span class=\"keyword\">BY</span> &quot;password&quot;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"对当前的用户授权管理\"><a href=\"#对当前的用户授权管理\" class=\"headerlink\" title=\"对当前的用户授权管理\"></a>对当前的用户授权管理</h2><h3 id=\"授权\"><a href=\"#授权\" class=\"headerlink\" title=\"授权\"></a>授权</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">all</span> privileges  <span class=\"keyword\">on</span> database.table  <span class=\"keyword\">to</span> &quot;username&quot;@&quot;host&quot;;</span><br></pre></td></tr></table></figure>\n\n<p>eg:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 授权用户 curatorc 仅对db1.t1文件有查询、插入和更新的操作</span></span><br><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">select</span> ,<span class=\"keyword\">insert</span>,update <span class=\"keyword\">on</span> db1.t1 <span class=\"keyword\">to</span> &quot;curatorc&quot;@&quot;%&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 表示有所有的权限，除了 grant 这个命令，这个命令是root才有的。用户 curatorc 对db1下的t1文件有任意操作</span></span><br><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">all</span> privileges  <span class=\"keyword\">on</span> db1.t1 <span class=\"keyword\">to</span> &quot;curatorc&quot;@&quot;%&quot;;</span><br><span class=\"line\"><span class=\"comment\">-- 用户 curatorc 对db1数据库中的文件执行任何操作</span></span><br><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">all</span> privileges  <span class=\"keyword\">on</span> db1.<span class=\"operator\">*</span> <span class=\"keyword\">to</span> &quot;curatorc&quot;@&quot;%&quot;;</span><br><span class=\"line\"><span class=\"comment\">-- 用户 curatorc 对所有数据库中文件有任何操作</span></span><br><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">all</span> privileges  <span class=\"keyword\">on</span> <span class=\"operator\">*</span>.<span class=\"operator\">*</span>  <span class=\"keyword\">to</span> &quot;curatorc&quot;@&quot;%&quot;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看授权\"><a href=\"#查看授权\" class=\"headerlink\" title=\"查看授权\"></a>查看授权</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> grants <span class=\"keyword\">for</span> &quot;username&quot;@&quot;host&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"取消权限\"><a href=\"#取消权限\" class=\"headerlink\" title=\"取消权限\"></a>取消权限</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">revoke</span> <span class=\"keyword\">all</span> <span class=\"keyword\">on</span> database.table <span class=\"keyword\">from</span> &quot;username&quot;@&quot;host&quot;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"刷新授权\"><a href=\"#刷新授权\" class=\"headerlink\" title=\"刷新授权\"></a>刷新授权</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"备份操作\"><a href=\"#备份操作\" class=\"headerlink\" title=\"备份操作\"></a>备份操作</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 备份：数据表结构+数据</span></span><br><span class=\"line\">mysqdump <span class=\"operator\">-</span>u root db1 <span class=\"operator\">&gt;</span> db1.sql <span class=\"operator\">-</span>p</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 备份：数据表结构</span></span><br><span class=\"line\">mysqdump <span class=\"operator\">-</span>u root <span class=\"operator\">-</span>d db1 <span class=\"operator\">&gt;</span> db1.sql <span class=\"operator\">-</span>p</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 导入现有的数据到某个数据库</span></span><br><span class=\"line\"><span class=\"comment\">-- 1.先创建一个新的数据库</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> database db10;</span><br><span class=\"line\"><span class=\"comment\">-- 2.将已有的数据库文件导入到db10数据库中</span></span><br><span class=\"line\">mysqdump <span class=\"operator\">-</span>u root <span class=\"operator\">-</span>d db10 <span class=\"operator\">&lt;</span> db1.sql <span class=\"operator\">-</span>p</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><a href=\"https://www.cnblogs.com/wangyueping/p/11258028.html\">转载链接</a></p>\n</blockquote>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<h1 id=\"MySQL创建用户和授权\"><a href=\"#MySQL创建用户和授权\" class=\"headerlink\" title=\"MySQL创建用户和授权\"></a>MySQL创建用户和授权</h1><h2 id=\"权限管理\"><a href=\"#权限管理\" class=\"headerlink\" title=\"权限管理\"></a>权限管理</h2><p>我们知道我们的最高权限管理者是root用户，它拥有着最高的权限操作。包括<code>select</code>、<code>update</code>、<code>delete</code>、<code>update</code>、<code>grant</code>等操作。</p>\n<p>那么一般情况在公司之后DBA工程师会创建一个用户和密码，让你去连接数据库的操作，并给当前的用户设置某个操作的权限（或者所有权限）。那么这时就需要我们来简单了解一下：</p>\n<ul>\n<li>如何创建用户和密码</li>\n<li>给当前的用户授权</li>\n<li>移除当前用户的权限</li>\n</ul>\n<h2 id=\"进入到mysql数据库下\"><a href=\"#进入到mysql数据库下\" class=\"headerlink\" title=\"进入到mysql数据库下\"></a>进入到mysql数据库下</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> use mysql</span><br><span class=\"line\">Database changed</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"对新用户增删改\"><a href=\"#对新用户增删改\" class=\"headerlink\" title=\"对新用户增删改\"></a>对新用户增删改</h2><h3 id=\"创建用户\"><a href=\"#创建用户\" class=\"headerlink\" title=\"创建用户\"></a>创建用户</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">user</span> &quot;username&quot;@&quot;host&quot; IDENTIFIED <span class=\"keyword\">WITH</span> mysql_native_password <span class=\"keyword\">BY</span> &quot;password&quot;;</span><br></pre></td></tr></table></figure>\n\n<p>eg:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 指定ip：47.99.161.35的用户 curatorc 登录</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">user</span> &quot;curatorc&quot;@&quot;47.99.161.35&quot; identified <span class=\"keyword\">by</span> &quot;password&quot;;</span><br><span class=\"line\"><span class=\"comment\">-- 指定ip：47.99.161. 开头的用户 curatorc 登录</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">user</span> &quot;curatorc&quot;@&quot;47.99.161.%&quot; identified <span class=\"keyword\">by</span> &quot;password&quot;;</span><br><span class=\"line\"><span class=\"comment\">-- 指定任何ip的用户 curatorc 登录</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">user</span> &quot;curatorc&quot;@&quot;%&quot; identified <span class=\"keyword\">by</span> &quot;password&quot;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除用户\"><a href=\"#删除用户\" class=\"headerlink\" title=\"删除用户\"></a>删除用户</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">user</span> &quot;username&quot;@&quot;host&quot;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改用户\"><a href=\"#修改用户\" class=\"headerlink\" title=\"修改用户\"></a>修改用户</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">rename <span class=\"keyword\">user</span> &quot;username&quot;@&quot;host&quot; <span class=\"keyword\">to</span> &quot;newusn&quot;@&quot;host&quot;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改密码\"><a href=\"#修改密码\" class=\"headerlink\" title=\"修改密码\"></a>修改密码</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">USER</span> <span class=\"string\">&#x27;username&#x27;</span>@<span class=\"string\">&#x27;host&#x27;</span> IDENTIFIED <span class=\"keyword\">WITH</span> mysql_native_password <span class=\"keyword\">BY</span> &quot;password&quot;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"对当前的用户授权管理\"><a href=\"#对当前的用户授权管理\" class=\"headerlink\" title=\"对当前的用户授权管理\"></a>对当前的用户授权管理</h2><h3 id=\"授权\"><a href=\"#授权\" class=\"headerlink\" title=\"授权\"></a>授权</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">all</span> privileges  <span class=\"keyword\">on</span> database.table  <span class=\"keyword\">to</span> &quot;username&quot;@&quot;host&quot;;</span><br></pre></td></tr></table></figure>\n\n<p>eg:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 授权用户 curatorc 仅对db1.t1文件有查询、插入和更新的操作</span></span><br><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">select</span> ,<span class=\"keyword\">insert</span>,update <span class=\"keyword\">on</span> db1.t1 <span class=\"keyword\">to</span> &quot;curatorc&quot;@&quot;%&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 表示有所有的权限，除了 grant 这个命令，这个命令是root才有的。用户 curatorc 对db1下的t1文件有任意操作</span></span><br><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">all</span> privileges  <span class=\"keyword\">on</span> db1.t1 <span class=\"keyword\">to</span> &quot;curatorc&quot;@&quot;%&quot;;</span><br><span class=\"line\"><span class=\"comment\">-- 用户 curatorc 对db1数据库中的文件执行任何操作</span></span><br><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">all</span> privileges  <span class=\"keyword\">on</span> db1.<span class=\"operator\">*</span> <span class=\"keyword\">to</span> &quot;curatorc&quot;@&quot;%&quot;;</span><br><span class=\"line\"><span class=\"comment\">-- 用户 curatorc 对所有数据库中文件有任何操作</span></span><br><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">all</span> privileges  <span class=\"keyword\">on</span> <span class=\"operator\">*</span>.<span class=\"operator\">*</span>  <span class=\"keyword\">to</span> &quot;curatorc&quot;@&quot;%&quot;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看授权\"><a href=\"#查看授权\" class=\"headerlink\" title=\"查看授权\"></a>查看授权</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> grants <span class=\"keyword\">for</span> &quot;username&quot;@&quot;host&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"取消权限\"><a href=\"#取消权限\" class=\"headerlink\" title=\"取消权限\"></a>取消权限</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">revoke</span> <span class=\"keyword\">all</span> <span class=\"keyword\">on</span> database.table <span class=\"keyword\">from</span> &quot;username&quot;@&quot;host&quot;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"刷新授权\"><a href=\"#刷新授权\" class=\"headerlink\" title=\"刷新授权\"></a>刷新授权</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"备份操作\"><a href=\"#备份操作\" class=\"headerlink\" title=\"备份操作\"></a>备份操作</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 备份：数据表结构+数据</span></span><br><span class=\"line\">mysqdump <span class=\"operator\">-</span>u root db1 <span class=\"operator\">&gt;</span> db1.sql <span class=\"operator\">-</span>p</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 备份：数据表结构</span></span><br><span class=\"line\">mysqdump <span class=\"operator\">-</span>u root <span class=\"operator\">-</span>d db1 <span class=\"operator\">&gt;</span> db1.sql <span class=\"operator\">-</span>p</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 导入现有的数据到某个数据库</span></span><br><span class=\"line\"><span class=\"comment\">-- 1.先创建一个新的数据库</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> database db10;</span><br><span class=\"line\"><span class=\"comment\">-- 2.将已有的数据库文件导入到db10数据库中</span></span><br><span class=\"line\">mysqdump <span class=\"operator\">-</span>u root <span class=\"operator\">-</span>d db10 <span class=\"operator\">&lt;</span> db1.sql <span class=\"operator\">-</span>p</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><a href=\"https://www.cnblogs.com/wangyueping/p/11258028.html\">转载链接</a></p>\n</blockquote>\n"},{"title":"Golang中字符串和各种int类型之间的相互转换方式","description":"Golang中字符串和各种int类型之间的相互转换方式","keywords":"Golang, int, string, 格式转换","top_img":"/images/golang/GolangCover3.png","cover":"/images/golang/GolangCover3.png","date":"2021-08-12T09:35:09.000Z","updated":"2021-08-12T09:35:09.000Z","_content":"# Golang中字符串和各种int类型之间的相互转换方式：\n\n## string转成int：\n```go\nint, err := strconv.Atoi(string)\n```\n\n## string转成int64：\n```go\nint64, err := strconv.ParseInt(string, 10, 64)\n```\n\n## int转成string：\n```go\nstring := strconv.Itoa(int)\n```\n\n## int64转成string：\n```go\nstring := strconv.FormatInt(int64,10)\n```\n","source":"_posts/golang/GolangStringIntInterconversion.md","raw":"---\ntitle: Golang中字符串和各种int类型之间的相互转换方式\ndescription: Golang中字符串和各种int类型之间的相互转换方式\nkeywords: Golang, int, string, 格式转换\ntop_img: /images/golang/GolangCover3.png\ncover: /images/golang/GolangCover3.png\ntags:\n  - Golang\n  - 入门\ncategories:\n  - Golang\ndate: 2021-08-12 17:35:09\nupdated: 2021-08-12 17:35:09\n---\n# Golang中字符串和各种int类型之间的相互转换方式：\n\n## string转成int：\n```go\nint, err := strconv.Atoi(string)\n```\n\n## string转成int64：\n```go\nint64, err := strconv.ParseInt(string, 10, 64)\n```\n\n## int转成string：\n```go\nstring := strconv.Itoa(int)\n```\n\n## int64转成string：\n```go\nstring := strconv.FormatInt(int64,10)\n```\n","slug":"golang/GolangStringIntInterconversion","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cksa1rbxb000dz4u4fnd022ky","content":"<h1 id=\"Golang中字符串和各种int类型之间的相互转换方式：\"><a href=\"#Golang中字符串和各种int类型之间的相互转换方式：\" class=\"headerlink\" title=\"Golang中字符串和各种int类型之间的相互转换方式：\"></a>Golang中字符串和各种int类型之间的相互转换方式：</h1><h2 id=\"string转成int：\"><a href=\"#string转成int：\" class=\"headerlink\" title=\"string转成int：\"></a>string转成int：</h2><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>, err := strconv.Atoi(<span class=\"keyword\">string</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"string转成int64：\"><a href=\"#string转成int64：\" class=\"headerlink\" title=\"string转成int64：\"></a>string转成int64：</h2><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int64</span>, err := strconv.ParseInt(<span class=\"keyword\">string</span>, <span class=\"number\">10</span>, <span class=\"number\">64</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"int转成string：\"><a href=\"#int转成string：\" class=\"headerlink\" title=\"int转成string：\"></a>int转成string：</h2><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">string</span> := strconv.Itoa(<span class=\"keyword\">int</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"int64转成string：\"><a href=\"#int64转成string：\" class=\"headerlink\" title=\"int64转成string：\"></a>int64转成string：</h2><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">string</span> := strconv.FormatInt(<span class=\"keyword\">int64</span>,<span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<h1 id=\"Golang中字符串和各种int类型之间的相互转换方式：\"><a href=\"#Golang中字符串和各种int类型之间的相互转换方式：\" class=\"headerlink\" title=\"Golang中字符串和各种int类型之间的相互转换方式：\"></a>Golang中字符串和各种int类型之间的相互转换方式：</h1><h2 id=\"string转成int：\"><a href=\"#string转成int：\" class=\"headerlink\" title=\"string转成int：\"></a>string转成int：</h2><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>, err := strconv.Atoi(<span class=\"keyword\">string</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"string转成int64：\"><a href=\"#string转成int64：\" class=\"headerlink\" title=\"string转成int64：\"></a>string转成int64：</h2><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int64</span>, err := strconv.ParseInt(<span class=\"keyword\">string</span>, <span class=\"number\">10</span>, <span class=\"number\">64</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"int转成string：\"><a href=\"#int转成string：\" class=\"headerlink\" title=\"int转成string：\"></a>int转成string：</h2><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">string</span> := strconv.Itoa(<span class=\"keyword\">int</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"int64转成string：\"><a href=\"#int64转成string：\" class=\"headerlink\" title=\"int64转成string：\"></a>int64转成string：</h2><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">string</span> := strconv.FormatInt(<span class=\"keyword\">int64</span>,<span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure>\n"},{"title":"GO 生成随机数","description":"随机数，是使用一个确定性的算法计算出来随机数序。在程序开发中经常需要产生随机数，如随机数验证码登陆、作为唯一身份标识数据等等。Go 中生成随机数的有两个包,分别是 math/rand 和 crypto/rand","keywords":"Golang, 随机数, Random","top_img":"/images/golang/GolangCover1.png","cover":"/images/golang/GolangCover1.png","date":"2021-08-12T09:31:03.000Z","updated":"2021-08-12T09:31:03.000Z","_content":"\n# GO 生成随机数\n\n## 什么是随机数\n\n随机数，是使用一个确定性的算法计算出来随机数序。在程序开发中经常需要产生随机数，如随机数验证码登陆、作为唯一身份标识数据等等。\n\n### GO中生成随机数的包\nGo 中生成随机数的有两个包,分别是`math/rand`和`crypto/rand`\n* `math/rand`实现了伪随机数生成器\n* `crypto/rand`实现了用于加解密的跟安全的随机数生成器,当然,性能也就降下来了,毕竟鱼与熊掌不可兼得\n\n## 随机数生成\n\n```go\nfunc main() {\n\tfor i:=0; i<10; i++ {\n\t\tfmt.Print(rand.Intn(10), \" \")\n\t}\n}\n```\n\n* 结果: 1 7 7 9 1 8 5 0 6 0\n* 再来一次: 1 7 7 9 1 8 5 0 6 0\n* 还是这个结果,这叫啥子随机数,查看文档,继续试验\n\n### 初始化随机种子函数\n```go\nfunc Seed(seed int64)\n```\n* 官方文档:\n\n{% note info flat %}\nSeed uses the provided seed value to initialize the default Source to a deterministic state. If Seed is not called, the generator behaves as if seeded by Seed(1). Seed values that have the same remainder when divided by 2^31-1 generate the same pseudo-random sequence. Seed, unlike the Rand.Seed method, is safe for concurrent use.\n{% endnote %}\n\n* 我的理解：\n* \n{% note info flat %}\n系统每次都会先用Seed函数初始化系统资源，如果用户不提供seed参数，则默认用seed=1来初始化，这就是为什么每次都输出一样的值的原因,而且,Seed方法是并发安全的.\n所谓种子,通俗理解可以理解为一个抽奖的奖池,我们自定义一个奖池,从我们的奖池中进行随机抽奖,种子就是我们奖池中的数据。\n{% endnote %}\n* \n### 使用种子生成随机数\n\n* 我们一般使用系统时间来进行初始化\n```go\nrand.Seed(time.Now().UnixNano())\nfor i:=0; i<10; i++ {\n\tfmt.Print(rand.Intn(10), \" \")\n}\n```\n\n* 或者我们可以使用rand.NewSource()\n```go\nr := rand.New(rand.NewSource(time.Now().UnixNano()))\nnum := r.Intn(128)\n```\n\n### Intn函数\n* 生成 [0,n)区间的一个随机数（注意：不包括n）\n```go\nfunc Intn(n int) int\n```\n\n### 生成指定位数的随机数\n* 以生成8位为例\n```go\ns := fmt.Sprintf(\"%08v\", rand.New(rand.NewSource(time.Now().UnixNano())).Int63n(100000000))\nfmt.Println(s)\n```\n\n## 真随机数\n* 如果我们的应用对安全性要求比较高，需要使用真随机数的话，那么可以使用 crypto/rand 包中的方法,这样生成的每次都是不同的随机数。\n```go\npackage main\nimport (\n    \"crypto/rand\"\n    \"fmt\"\n    \"math/big\"\n)\nfunc main() {\n    // 生成 10 个 [0, 128) 范围的真随机数。\n    for i := 0; i < 10; i++ {\n        result, _ := rand.Int(rand.Reader, big.NewInt(128))\n        fmt.Println(result)\n    }\n}\n```\n\n> [转载链接](https://blog.csdn.net/study_in/article/details/102919019)","source":"_posts/golang/Random.md","raw":"---\ntitle: GO 生成随机数\ndescription: 随机数，是使用一个确定性的算法计算出来随机数序。在程序开发中经常需要产生随机数，如随机数验证码登陆、作为唯一身份标识数据等等。Go 中生成随机数的有两个包,分别是 math/rand 和 crypto/rand \nkeywords: Golang, 随机数, Random\ntop_img: /images/golang/GolangCover1.png\ncover: /images/golang/GolangCover1.png\ntags:\n  - Golang\n  - 入门 \ncategories:\n  - Golang\ndate: 2021-08-12 17:31:03\nupdated: 2021-08-12 17:31:03\n---\n\n# GO 生成随机数\n\n## 什么是随机数\n\n随机数，是使用一个确定性的算法计算出来随机数序。在程序开发中经常需要产生随机数，如随机数验证码登陆、作为唯一身份标识数据等等。\n\n### GO中生成随机数的包\nGo 中生成随机数的有两个包,分别是`math/rand`和`crypto/rand`\n* `math/rand`实现了伪随机数生成器\n* `crypto/rand`实现了用于加解密的跟安全的随机数生成器,当然,性能也就降下来了,毕竟鱼与熊掌不可兼得\n\n## 随机数生成\n\n```go\nfunc main() {\n\tfor i:=0; i<10; i++ {\n\t\tfmt.Print(rand.Intn(10), \" \")\n\t}\n}\n```\n\n* 结果: 1 7 7 9 1 8 5 0 6 0\n* 再来一次: 1 7 7 9 1 8 5 0 6 0\n* 还是这个结果,这叫啥子随机数,查看文档,继续试验\n\n### 初始化随机种子函数\n```go\nfunc Seed(seed int64)\n```\n* 官方文档:\n\n{% note info flat %}\nSeed uses the provided seed value to initialize the default Source to a deterministic state. If Seed is not called, the generator behaves as if seeded by Seed(1). Seed values that have the same remainder when divided by 2^31-1 generate the same pseudo-random sequence. Seed, unlike the Rand.Seed method, is safe for concurrent use.\n{% endnote %}\n\n* 我的理解：\n* \n{% note info flat %}\n系统每次都会先用Seed函数初始化系统资源，如果用户不提供seed参数，则默认用seed=1来初始化，这就是为什么每次都输出一样的值的原因,而且,Seed方法是并发安全的.\n所谓种子,通俗理解可以理解为一个抽奖的奖池,我们自定义一个奖池,从我们的奖池中进行随机抽奖,种子就是我们奖池中的数据。\n{% endnote %}\n* \n### 使用种子生成随机数\n\n* 我们一般使用系统时间来进行初始化\n```go\nrand.Seed(time.Now().UnixNano())\nfor i:=0; i<10; i++ {\n\tfmt.Print(rand.Intn(10), \" \")\n}\n```\n\n* 或者我们可以使用rand.NewSource()\n```go\nr := rand.New(rand.NewSource(time.Now().UnixNano()))\nnum := r.Intn(128)\n```\n\n### Intn函数\n* 生成 [0,n)区间的一个随机数（注意：不包括n）\n```go\nfunc Intn(n int) int\n```\n\n### 生成指定位数的随机数\n* 以生成8位为例\n```go\ns := fmt.Sprintf(\"%08v\", rand.New(rand.NewSource(time.Now().UnixNano())).Int63n(100000000))\nfmt.Println(s)\n```\n\n## 真随机数\n* 如果我们的应用对安全性要求比较高，需要使用真随机数的话，那么可以使用 crypto/rand 包中的方法,这样生成的每次都是不同的随机数。\n```go\npackage main\nimport (\n    \"crypto/rand\"\n    \"fmt\"\n    \"math/big\"\n)\nfunc main() {\n    // 生成 10 个 [0, 128) 范围的真随机数。\n    for i := 0; i < 10; i++ {\n        result, _ := rand.Int(rand.Reader, big.NewInt(128))\n        fmt.Println(result)\n    }\n}\n```\n\n> [转载链接](https://blog.csdn.net/study_in/article/details/102919019)","slug":"golang/Random","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cksa1rbxc000ez4u41z0ydrf4","content":"<h1 id=\"GO-生成随机数\"><a href=\"#GO-生成随机数\" class=\"headerlink\" title=\"GO 生成随机数\"></a>GO 生成随机数</h1><h2 id=\"什么是随机数\"><a href=\"#什么是随机数\" class=\"headerlink\" title=\"什么是随机数\"></a>什么是随机数</h2><p>随机数，是使用一个确定性的算法计算出来随机数序。在程序开发中经常需要产生随机数，如随机数验证码登陆、作为唯一身份标识数据等等。</p>\n<h3 id=\"GO中生成随机数的包\"><a href=\"#GO中生成随机数的包\" class=\"headerlink\" title=\"GO中生成随机数的包\"></a>GO中生成随机数的包</h3><p>Go 中生成随机数的有两个包,分别是<code>math/rand</code>和<code>crypto/rand</code></p>\n<ul>\n<li><code>math/rand</code>实现了伪随机数生成器</li>\n<li><code>crypto/rand</code>实现了用于加解密的跟安全的随机数生成器,当然,性能也就降下来了,毕竟鱼与熊掌不可兼得</li>\n</ul>\n<h2 id=\"随机数生成\"><a href=\"#随机数生成\" class=\"headerlink\" title=\"随机数生成\"></a>随机数生成</h2><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i:=<span class=\"number\">0</span>; i&lt;<span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\">\t\tfmt.Print(rand.Intn(<span class=\"number\">10</span>), <span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>结果: 1 7 7 9 1 8 5 0 6 0</li>\n<li>再来一次: 1 7 7 9 1 8 5 0 6 0</li>\n<li>还是这个结果,这叫啥子随机数,查看文档,继续试验</li>\n</ul>\n<h3 id=\"初始化随机种子函数\"><a href=\"#初始化随机种子函数\" class=\"headerlink\" title=\"初始化随机种子函数\"></a>初始化随机种子函数</h3><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Seed</span><span class=\"params\">(seed <span class=\"keyword\">int64</span>)</span></span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>官方文档:</li>\n</ul>\n<div class=\"note info flat\"><p>Seed uses the provided seed value to initialize the default Source to a deterministic state. If Seed is not called, the generator behaves as if seeded by Seed(1). Seed values that have the same remainder when divided by 2^31-1 generate the same pseudo-random sequence. Seed, unlike the Rand.Seed method, is safe for concurrent use.</p>\n</div>\n\n<ul>\n<li><p>我的理解：</p>\n</li>\n<li><div class=\"note info flat\"><p>系统每次都会先用Seed函数初始化系统资源，如果用户不提供seed参数，则默认用seed=1来初始化，这就是为什么每次都输出一样的值的原因,而且,Seed方法是并发安全的.<br>所谓种子,通俗理解可以理解为一个抽奖的奖池,我们自定义一个奖池,从我们的奖池中进行随机抽奖,种子就是我们奖池中的数据。</p>\n</div></li>\n<li><h3 id=\"使用种子生成随机数\"><a href=\"#使用种子生成随机数\" class=\"headerlink\" title=\"使用种子生成随机数\"></a>使用种子生成随机数</h3></li>\n<li><p>我们一般使用系统时间来进行初始化</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">rand.Seed(time.Now().UnixNano())</span><br><span class=\"line\"><span class=\"keyword\">for</span> i:=<span class=\"number\">0</span>; i&lt;<span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\">\tfmt.Print(rand.Intn(<span class=\"number\">10</span>), <span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>或者我们可以使用rand.NewSource()</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">r := rand.New(rand.NewSource(time.Now().UnixNano()))</span><br><span class=\"line\">num := r.Intn(<span class=\"number\">128</span>)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"Intn函数\"><a href=\"#Intn函数\" class=\"headerlink\" title=\"Intn函数\"></a>Intn函数</h3><ul>\n<li>生成 [0,n)区间的一个随机数（注意：不包括n）<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Intn</span><span class=\"params\">(n <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"生成指定位数的随机数\"><a href=\"#生成指定位数的随机数\" class=\"headerlink\" title=\"生成指定位数的随机数\"></a>生成指定位数的随机数</h3><ul>\n<li>以生成8位为例<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">s := fmt.Sprintf(<span class=\"string\">&quot;%08v&quot;</span>, rand.New(rand.NewSource(time.Now().UnixNano())).Int63n(<span class=\"number\">100000000</span>))</span><br><span class=\"line\">fmt.Println(s)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"真随机数\"><a href=\"#真随机数\" class=\"headerlink\" title=\"真随机数\"></a>真随机数</h2><ul>\n<li>如果我们的应用对安全性要求比较高，需要使用真随机数的话，那么可以使用 crypto/rand 包中的方法,这样生成的每次都是不同的随机数。<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;crypto/rand&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;math/big&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 生成 10 个 [0, 128) 范围的真随机数。</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\">        result, _ := rand.Int(rand.Reader, big.NewInt(<span class=\"number\">128</span>))</span><br><span class=\"line\">        fmt.Println(result)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/study_in/article/details/102919019\">转载链接</a></p>\n</blockquote>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<h1 id=\"GO-生成随机数\"><a href=\"#GO-生成随机数\" class=\"headerlink\" title=\"GO 生成随机数\"></a>GO 生成随机数</h1><h2 id=\"什么是随机数\"><a href=\"#什么是随机数\" class=\"headerlink\" title=\"什么是随机数\"></a>什么是随机数</h2><p>随机数，是使用一个确定性的算法计算出来随机数序。在程序开发中经常需要产生随机数，如随机数验证码登陆、作为唯一身份标识数据等等。</p>\n<h3 id=\"GO中生成随机数的包\"><a href=\"#GO中生成随机数的包\" class=\"headerlink\" title=\"GO中生成随机数的包\"></a>GO中生成随机数的包</h3><p>Go 中生成随机数的有两个包,分别是<code>math/rand</code>和<code>crypto/rand</code></p>\n<ul>\n<li><code>math/rand</code>实现了伪随机数生成器</li>\n<li><code>crypto/rand</code>实现了用于加解密的跟安全的随机数生成器,当然,性能也就降下来了,毕竟鱼与熊掌不可兼得</li>\n</ul>\n<h2 id=\"随机数生成\"><a href=\"#随机数生成\" class=\"headerlink\" title=\"随机数生成\"></a>随机数生成</h2><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i:=<span class=\"number\">0</span>; i&lt;<span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\">\t\tfmt.Print(rand.Intn(<span class=\"number\">10</span>), <span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>结果: 1 7 7 9 1 8 5 0 6 0</li>\n<li>再来一次: 1 7 7 9 1 8 5 0 6 0</li>\n<li>还是这个结果,这叫啥子随机数,查看文档,继续试验</li>\n</ul>\n<h3 id=\"初始化随机种子函数\"><a href=\"#初始化随机种子函数\" class=\"headerlink\" title=\"初始化随机种子函数\"></a>初始化随机种子函数</h3><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Seed</span><span class=\"params\">(seed <span class=\"keyword\">int64</span>)</span></span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>官方文档:</li>\n</ul>\n<div class=\"note info flat\"><p>Seed uses the provided seed value to initialize the default Source to a deterministic state. If Seed is not called, the generator behaves as if seeded by Seed(1). Seed values that have the same remainder when divided by 2^31-1 generate the same pseudo-random sequence. Seed, unlike the Rand.Seed method, is safe for concurrent use.</p>\n</div>\n\n<ul>\n<li><p>我的理解：</p>\n</li>\n<li><div class=\"note info flat\"><p>系统每次都会先用Seed函数初始化系统资源，如果用户不提供seed参数，则默认用seed=1来初始化，这就是为什么每次都输出一样的值的原因,而且,Seed方法是并发安全的.<br>所谓种子,通俗理解可以理解为一个抽奖的奖池,我们自定义一个奖池,从我们的奖池中进行随机抽奖,种子就是我们奖池中的数据。</p>\n</div></li>\n<li><h3 id=\"使用种子生成随机数\"><a href=\"#使用种子生成随机数\" class=\"headerlink\" title=\"使用种子生成随机数\"></a>使用种子生成随机数</h3></li>\n<li><p>我们一般使用系统时间来进行初始化</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">rand.Seed(time.Now().UnixNano())</span><br><span class=\"line\"><span class=\"keyword\">for</span> i:=<span class=\"number\">0</span>; i&lt;<span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\">\tfmt.Print(rand.Intn(<span class=\"number\">10</span>), <span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>或者我们可以使用rand.NewSource()</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">r := rand.New(rand.NewSource(time.Now().UnixNano()))</span><br><span class=\"line\">num := r.Intn(<span class=\"number\">128</span>)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"Intn函数\"><a href=\"#Intn函数\" class=\"headerlink\" title=\"Intn函数\"></a>Intn函数</h3><ul>\n<li>生成 [0,n)区间的一个随机数（注意：不包括n）<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Intn</span><span class=\"params\">(n <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"生成指定位数的随机数\"><a href=\"#生成指定位数的随机数\" class=\"headerlink\" title=\"生成指定位数的随机数\"></a>生成指定位数的随机数</h3><ul>\n<li>以生成8位为例<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">s := fmt.Sprintf(<span class=\"string\">&quot;%08v&quot;</span>, rand.New(rand.NewSource(time.Now().UnixNano())).Int63n(<span class=\"number\">100000000</span>))</span><br><span class=\"line\">fmt.Println(s)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"真随机数\"><a href=\"#真随机数\" class=\"headerlink\" title=\"真随机数\"></a>真随机数</h2><ul>\n<li>如果我们的应用对安全性要求比较高，需要使用真随机数的话，那么可以使用 crypto/rand 包中的方法,这样生成的每次都是不同的随机数。<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;crypto/rand&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;math/big&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 生成 10 个 [0, 128) 范围的真随机数。</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\">        result, _ := rand.Int(rand.Reader, big.NewInt(<span class=\"number\">128</span>))</span><br><span class=\"line\">        fmt.Println(result)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/study_in/article/details/102919019\">转载链接</a></p>\n</blockquote>\n"},{"title":"位移符效率对比","description":"以前总是看到位移符。因为它总是能轻易把一个数字变成我不认识的模样，所以我也没有深入了解过。在看到讨论区留言后才意识到：自己的格局太小了。简单读了读 位移符 的文档和实现原理，我觉得这种方案还是值得一试的。","keywords":"PHP, 位移符, 效率对比","top_img":"/images/php/PHPCover2.png","cover":"/images/php/PHPCover2.png","date":"2021-08-12T08:36:13.000Z","updated":"2021-08-12T08:36:13.000Z","_content":"# 位移符效率对比\n\n## 讨论\n在上一篇博客『[如何使用PHP最高效率的将一个正整数扩大一千倍？](/php/PhpExpandsPositiveIntegersByAFactorOf1000)』的讨论区，有人提出位移符应该才是运算最快的方案。\n\n以前总是看到位移符`<<`这样的符号。因为它总是能轻易把一个数字变成我不认识的模样，所以我也没有深入了解过。\n\n在看到讨论区留言后才意识到：自己的格局太小了。\n\n简单读了读`位移符`的文档和实现原理，我觉得这种方案还是值得一试的。按照之前两篇博客的心得，我首先抛出我的猜测：\n* 在`PHP`中，位移符方案效率要高于`*1024`，但是会低于`*1000`。\n* 在`C#`中，位移符的效率与其他两种方案持平。\n    * 论证过程见[『Golang』用计算证明：我远远低估了编译器](/go/CompiledLanguageComputationOfMultiplication)\n\n现在进行一个简单的验证。\n* 方案一：$integer * 1000\n* 方案二：($integer << 10) - ($integer * 24)\n* 方案三：($integer * 1024) - ($integer * 24)\n\n## PHP\n### 代码部分\n\n这次吸取讨论区提到的“效率权重”，将随机数部分转移出来。\n\n```php\n<?php\n\nnamespace App\\Console\\Commands;\n\nuse Carbon\\Carbon;\nuse Illuminate\\Console\\Command;\n\nclass DemoCommand extends Command\n{\n    /**\n     * The name and signature of the console command.\n     *\n     * @var string\n     */\n    protected $signature = 'demo:test';\n\n    /**\n     * The console command description.\n     *\n     * @var string\n     */\n    protected $description = 'Command description';\n\n    /**\n     * Create a new command instance.\n     *\n     * @return void\n     */\n    public function __construct()\n    {\n        parent::__construct();\n    }\n\n    /**\n     * Execute the console command.\n     *\n     * @return int\n     */\n    public function handle()\n    {\n        // 图表内容\n        $headers = ['次数', '方案1：乘1000', '方案2：移位符', '方案3：乘以 1024', '补充测试：仅位移'];\n        $data = [\n            [0 => '第一次'],\n            [0 => '第二次'],\n            [0 => '第三次']\n        ];\n\n        // 随机数提出\n        $integer = rand(1, 999);\n\n        // 每个方法执行三次\n        for ($count = 0; $count < 3; $count++) {\n            $start = Carbon::now()->getPreciseTimestamp();\n            for ($i = 0; $i < 10000000; $i++) {\n                $result = $integer * 1000;\n            }\n            $end = Carbon::now()->getPreciseTimestamp();\n            $data[$count][] = ($end - $start) / 1000000 . '秒';\n        }\n\n        for ($count = 0; $count < 3; $count++) {\n            $start = Carbon::now()->getPreciseTimestamp();\n            for ($i = 0; $i < 10000000; $i++) {\n                $result = ($integer << 10) - ($integer * 24);\n            }\n            $end = Carbon::now()->getPreciseTimestamp();\n            $data[$count][] = ($end - $start) / 1000000 . '秒';\n        }\n\n        for ($count = 0; $count < 3; $count++) {\n            $start = Carbon::now()->getPreciseTimestamp();\n            for ($i = 0; $i < 10000000; $i++) {\n                $result = ($integer * 1024) - ($integer * 24);\n            }\n            $end = Carbon::now()->getPreciseTimestamp();\n            $data[$count][] = ($end - $start) / 1000000 . '秒';\n        }\n\n        for ($count = 0; $count < 3; $count++) {\n            $start = Carbon::now()->getPreciseTimestamp();\n            for ($i = 0; $i < 10000000; $i++) {\n                $result = $integer << 10;\n            }\n            $end = Carbon::now()->getPreciseTimestamp();\n            $data[$count][] = ($end - $start) / 1000000 . '秒';\n        }\n        $this->table($headers, $data);\n    }\n}\n\n```\n\n### 运算结果\n\n多次运行并且调整前后顺序，均得到一个较为稳定的结果：\n\n![image01](/images/php/DisplacementEfficiencyComparison01.png)\n\n这个结果在意料之中，但又不完全在。位移符`<<`从理论上来讲和一般的乘法有着本质上的不同，应该有不错的效率提升。它之所以会比`$integer * 1000`效率低，应该是被第二步运算` - $integer * 24`拖累了，但是`位移符`却也没有与`*1024`拉开差距。为了证实这一点，我又补上了单独进行位移计算的测试。结果证明：\n\n{% note info flat %}\n位移符在`PHP`这里就仅仅是一个普通的乘除法计算而已。\n{% endnote %}\n\n## GO\n### 代码部分\n\n```go\nfunc main() {\n\t// 计算次数\n\tmaxI := 10000000\n\n\trand.Seed(time.Now().UnixNano())\n\tinteger := rand.Intn(999)\n\n\techoString := \"\"\n\n\tfmt.Println(\"方案1：乘1000\")\n\tfor count := 0; count < 3; count++ {\n\t\t// 开始\n\t\tstart := time.Now()\n\t\techoString += \"第\" + strconv.Itoa(count+1) + \"次:\"\n\n\t\tfor i := 0; i < maxI; i++ {\n\t\t\t_ = integer * 1000\n\t\t}\n\n\t\t// 结束\n\t\tend := time.Now()\n\n\t\tbetweenTime := float64(end.Sub(start).Nanoseconds()) / 1000000000\n\n\t\techoString += strconv.FormatFloat(betweenTime, 'f', 10, 64) + \"秒\"\n\n\t}\n\n\tfmt.Println(echoString)\n\n\techoString = \"\"\n\n\tfmt.Println(\"方案2：位移符\")\n\tfor count := 0; count < 3; count++ {\n\t\t// 开始\n\t\tstart := time.Now()\n\t\techoString += \"第\" + strconv.Itoa(count+1) + \"次:\"\n\n\t\tfor i := 0; i < maxI; i++ {\n\t\t\t_ = (integer << 10) - (integer * 24)\n\t\t}\n\n\t\t// 结束\n\t\tend := time.Now()\n\n\t\tbetweenTime := float64(end.Sub(start).Nanoseconds()) / 1000000000\n\n\t\techoString += strconv.FormatFloat(betweenTime, 'f', 10, 64) + \"秒\"\n\n\t}\n\n\tfmt.Println(echoString)\n\n\techoString = \"\"\n\n\tfmt.Println(\"方案3：乘以1024\")\n\tfor count := 0; count < 3; count++ {\n\t\t// 开始\n\t\tstart := time.Now()\n\t\techoString += \"第\" + strconv.Itoa(count+1) + \"次:\"\n\n\t\tfor i := 0; i < maxI; i++ {\n\t\t\t_ = (integer * 1024) - (integer * 24)\n\t\t}\n\n\t\t// 结束\n\t\tend := time.Now()\n\n\t\tbetweenTime := float64(end.Sub(start).Nanoseconds()) / 1000000000\n\n\t\techoString += strconv.FormatFloat(betweenTime, 'f', 10, 64) + \"秒\"\n\n\t}\n\n\tfmt.Println(echoString)\n}\n\n```\n### 运算结果\n\n运行结果同样不出所料。\n\n![image01](/images/php/DisplacementEfficiencyComparison02.png)\n\n不过横向对比一下，`PHP`的计算效率被`GO`秒的渣渣都不剩了。身为一名从`PHP`入行编程，并且现在的主要技术栈和生产能力依旧在`PHP`身上的我，不免产生一种`好可怜啊`的悲凉。\n\n{% note warning flat %}\n位移符可以帮助我们理解计算机的原理，但是在`GO`这类编译型语言这里，编译器已经帮你完成了位移符能完成的计算。\n{% endnote %}","source":"_posts/php/DisplacementEfficiencyComparison.md","raw":"---\ntitle: 位移符效率对比\ndescription: 以前总是看到位移符。因为它总是能轻易把一个数字变成我不认识的模样，所以我也没有深入了解过。在看到讨论区留言后才意识到：自己的格局太小了。简单读了读 位移符 的文档和实现原理，我觉得这种方案还是值得一试的。\nkeywords: PHP, 位移符, 效率对比\ntop_img: /images/php/PHPCover2.png\ncover: /images/php/PHPCover2.png\ntags:\n  - PHP\n  - 探讨\ncategories:\n  - PHP\ndate: 2021-08-12 16:36:13\nupdated: 2021-08-12 16:36:13\n---\n# 位移符效率对比\n\n## 讨论\n在上一篇博客『[如何使用PHP最高效率的将一个正整数扩大一千倍？](/php/PhpExpandsPositiveIntegersByAFactorOf1000)』的讨论区，有人提出位移符应该才是运算最快的方案。\n\n以前总是看到位移符`<<`这样的符号。因为它总是能轻易把一个数字变成我不认识的模样，所以我也没有深入了解过。\n\n在看到讨论区留言后才意识到：自己的格局太小了。\n\n简单读了读`位移符`的文档和实现原理，我觉得这种方案还是值得一试的。按照之前两篇博客的心得，我首先抛出我的猜测：\n* 在`PHP`中，位移符方案效率要高于`*1024`，但是会低于`*1000`。\n* 在`C#`中，位移符的效率与其他两种方案持平。\n    * 论证过程见[『Golang』用计算证明：我远远低估了编译器](/go/CompiledLanguageComputationOfMultiplication)\n\n现在进行一个简单的验证。\n* 方案一：$integer * 1000\n* 方案二：($integer << 10) - ($integer * 24)\n* 方案三：($integer * 1024) - ($integer * 24)\n\n## PHP\n### 代码部分\n\n这次吸取讨论区提到的“效率权重”，将随机数部分转移出来。\n\n```php\n<?php\n\nnamespace App\\Console\\Commands;\n\nuse Carbon\\Carbon;\nuse Illuminate\\Console\\Command;\n\nclass DemoCommand extends Command\n{\n    /**\n     * The name and signature of the console command.\n     *\n     * @var string\n     */\n    protected $signature = 'demo:test';\n\n    /**\n     * The console command description.\n     *\n     * @var string\n     */\n    protected $description = 'Command description';\n\n    /**\n     * Create a new command instance.\n     *\n     * @return void\n     */\n    public function __construct()\n    {\n        parent::__construct();\n    }\n\n    /**\n     * Execute the console command.\n     *\n     * @return int\n     */\n    public function handle()\n    {\n        // 图表内容\n        $headers = ['次数', '方案1：乘1000', '方案2：移位符', '方案3：乘以 1024', '补充测试：仅位移'];\n        $data = [\n            [0 => '第一次'],\n            [0 => '第二次'],\n            [0 => '第三次']\n        ];\n\n        // 随机数提出\n        $integer = rand(1, 999);\n\n        // 每个方法执行三次\n        for ($count = 0; $count < 3; $count++) {\n            $start = Carbon::now()->getPreciseTimestamp();\n            for ($i = 0; $i < 10000000; $i++) {\n                $result = $integer * 1000;\n            }\n            $end = Carbon::now()->getPreciseTimestamp();\n            $data[$count][] = ($end - $start) / 1000000 . '秒';\n        }\n\n        for ($count = 0; $count < 3; $count++) {\n            $start = Carbon::now()->getPreciseTimestamp();\n            for ($i = 0; $i < 10000000; $i++) {\n                $result = ($integer << 10) - ($integer * 24);\n            }\n            $end = Carbon::now()->getPreciseTimestamp();\n            $data[$count][] = ($end - $start) / 1000000 . '秒';\n        }\n\n        for ($count = 0; $count < 3; $count++) {\n            $start = Carbon::now()->getPreciseTimestamp();\n            for ($i = 0; $i < 10000000; $i++) {\n                $result = ($integer * 1024) - ($integer * 24);\n            }\n            $end = Carbon::now()->getPreciseTimestamp();\n            $data[$count][] = ($end - $start) / 1000000 . '秒';\n        }\n\n        for ($count = 0; $count < 3; $count++) {\n            $start = Carbon::now()->getPreciseTimestamp();\n            for ($i = 0; $i < 10000000; $i++) {\n                $result = $integer << 10;\n            }\n            $end = Carbon::now()->getPreciseTimestamp();\n            $data[$count][] = ($end - $start) / 1000000 . '秒';\n        }\n        $this->table($headers, $data);\n    }\n}\n\n```\n\n### 运算结果\n\n多次运行并且调整前后顺序，均得到一个较为稳定的结果：\n\n![image01](/images/php/DisplacementEfficiencyComparison01.png)\n\n这个结果在意料之中，但又不完全在。位移符`<<`从理论上来讲和一般的乘法有着本质上的不同，应该有不错的效率提升。它之所以会比`$integer * 1000`效率低，应该是被第二步运算` - $integer * 24`拖累了，但是`位移符`却也没有与`*1024`拉开差距。为了证实这一点，我又补上了单独进行位移计算的测试。结果证明：\n\n{% note info flat %}\n位移符在`PHP`这里就仅仅是一个普通的乘除法计算而已。\n{% endnote %}\n\n## GO\n### 代码部分\n\n```go\nfunc main() {\n\t// 计算次数\n\tmaxI := 10000000\n\n\trand.Seed(time.Now().UnixNano())\n\tinteger := rand.Intn(999)\n\n\techoString := \"\"\n\n\tfmt.Println(\"方案1：乘1000\")\n\tfor count := 0; count < 3; count++ {\n\t\t// 开始\n\t\tstart := time.Now()\n\t\techoString += \"第\" + strconv.Itoa(count+1) + \"次:\"\n\n\t\tfor i := 0; i < maxI; i++ {\n\t\t\t_ = integer * 1000\n\t\t}\n\n\t\t// 结束\n\t\tend := time.Now()\n\n\t\tbetweenTime := float64(end.Sub(start).Nanoseconds()) / 1000000000\n\n\t\techoString += strconv.FormatFloat(betweenTime, 'f', 10, 64) + \"秒\"\n\n\t}\n\n\tfmt.Println(echoString)\n\n\techoString = \"\"\n\n\tfmt.Println(\"方案2：位移符\")\n\tfor count := 0; count < 3; count++ {\n\t\t// 开始\n\t\tstart := time.Now()\n\t\techoString += \"第\" + strconv.Itoa(count+1) + \"次:\"\n\n\t\tfor i := 0; i < maxI; i++ {\n\t\t\t_ = (integer << 10) - (integer * 24)\n\t\t}\n\n\t\t// 结束\n\t\tend := time.Now()\n\n\t\tbetweenTime := float64(end.Sub(start).Nanoseconds()) / 1000000000\n\n\t\techoString += strconv.FormatFloat(betweenTime, 'f', 10, 64) + \"秒\"\n\n\t}\n\n\tfmt.Println(echoString)\n\n\techoString = \"\"\n\n\tfmt.Println(\"方案3：乘以1024\")\n\tfor count := 0; count < 3; count++ {\n\t\t// 开始\n\t\tstart := time.Now()\n\t\techoString += \"第\" + strconv.Itoa(count+1) + \"次:\"\n\n\t\tfor i := 0; i < maxI; i++ {\n\t\t\t_ = (integer * 1024) - (integer * 24)\n\t\t}\n\n\t\t// 结束\n\t\tend := time.Now()\n\n\t\tbetweenTime := float64(end.Sub(start).Nanoseconds()) / 1000000000\n\n\t\techoString += strconv.FormatFloat(betweenTime, 'f', 10, 64) + \"秒\"\n\n\t}\n\n\tfmt.Println(echoString)\n}\n\n```\n### 运算结果\n\n运行结果同样不出所料。\n\n![image01](/images/php/DisplacementEfficiencyComparison02.png)\n\n不过横向对比一下，`PHP`的计算效率被`GO`秒的渣渣都不剩了。身为一名从`PHP`入行编程，并且现在的主要技术栈和生产能力依旧在`PHP`身上的我，不免产生一种`好可怜啊`的悲凉。\n\n{% note warning flat %}\n位移符可以帮助我们理解计算机的原理，但是在`GO`这类编译型语言这里，编译器已经帮你完成了位移符能完成的计算。\n{% endnote %}","slug":"php/DisplacementEfficiencyComparison","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cksa1rbxe000iz4u41d7n241x","content":"<h1 id=\"位移符效率对比\"><a href=\"#位移符效率对比\" class=\"headerlink\" title=\"位移符效率对比\"></a>位移符效率对比</h1><h2 id=\"讨论\"><a href=\"#讨论\" class=\"headerlink\" title=\"讨论\"></a>讨论</h2><p>在上一篇博客『<a href=\"/php/PhpExpandsPositiveIntegersByAFactorOf1000\">如何使用PHP最高效率的将一个正整数扩大一千倍？</a>』的讨论区，有人提出位移符应该才是运算最快的方案。</p>\n<p>以前总是看到位移符<code>&lt;&lt;</code>这样的符号。因为它总是能轻易把一个数字变成我不认识的模样，所以我也没有深入了解过。</p>\n<p>在看到讨论区留言后才意识到：自己的格局太小了。</p>\n<p>简单读了读<code>位移符</code>的文档和实现原理，我觉得这种方案还是值得一试的。按照之前两篇博客的心得，我首先抛出我的猜测：</p>\n<ul>\n<li>在<code>PHP</code>中，位移符方案效率要高于<code>*1024</code>，但是会低于<code>*1000</code>。</li>\n<li>在<code>C#</code>中，位移符的效率与其他两种方案持平。<ul>\n<li>论证过程见<a href=\"/go/CompiledLanguageComputationOfMultiplication\">『Golang』用计算证明：我远远低估了编译器</a></li>\n</ul>\n</li>\n</ul>\n<p>现在进行一个简单的验证。</p>\n<ul>\n<li>方案一：$integer * 1000</li>\n<li>方案二：($integer &lt;&lt; 10) - ($integer * 24)</li>\n<li>方案三：($integer * 1024) - ($integer * 24)</li>\n</ul>\n<h2 id=\"PHP\"><a href=\"#PHP\" class=\"headerlink\" title=\"PHP\"></a>PHP</h2><h3 id=\"代码部分\"><a href=\"#代码部分\" class=\"headerlink\" title=\"代码部分\"></a>代码部分</h3><p>这次吸取讨论区提到的“效率权重”，将随机数部分转移出来。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">App</span>\\<span class=\"title\">Console</span>\\<span class=\"title\">Commands</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Carbon</span>\\<span class=\"title\">Carbon</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Illuminate</span>\\<span class=\"title\">Console</span>\\<span class=\"title\">Command</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoCommand</span> <span class=\"keyword\">extends</span> <span class=\"title\">Command</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * The name and signature of the console command.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> string</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$signature</span> = <span class=\"string\">&#x27;demo:test&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * The console command description.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> string</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$description</span> = <span class=\"string\">&#x27;Command description&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Create a new command instance.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> void</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">parent</span>::__construct();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Execute the console command.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> int</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handle</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 图表内容</span></span><br><span class=\"line\">        <span class=\"variable\">$headers</span> = [<span class=\"string\">&#x27;次数&#x27;</span>, <span class=\"string\">&#x27;方案1：乘1000&#x27;</span>, <span class=\"string\">&#x27;方案2：移位符&#x27;</span>, <span class=\"string\">&#x27;方案3：乘以 1024&#x27;</span>, <span class=\"string\">&#x27;补充测试：仅位移&#x27;</span>];</span><br><span class=\"line\">        <span class=\"variable\">$data</span> = [</span><br><span class=\"line\">            [<span class=\"number\">0</span> =&gt; <span class=\"string\">&#x27;第一次&#x27;</span>],</span><br><span class=\"line\">            [<span class=\"number\">0</span> =&gt; <span class=\"string\">&#x27;第二次&#x27;</span>],</span><br><span class=\"line\">            [<span class=\"number\">0</span> =&gt; <span class=\"string\">&#x27;第三次&#x27;</span>]</span><br><span class=\"line\">        ];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 随机数提出</span></span><br><span class=\"line\">        <span class=\"variable\">$integer</span> = rand(<span class=\"number\">1</span>, <span class=\"number\">999</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 每个方法执行三次</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"variable\">$count</span> = <span class=\"number\">0</span>; <span class=\"variable\">$count</span> &lt; <span class=\"number\">3</span>; <span class=\"variable\">$count</span>++) &#123;</span><br><span class=\"line\">            <span class=\"variable\">$start</span> = Carbon::now()-&gt;getPreciseTimestamp();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"variable\">$i</span> = <span class=\"number\">0</span>; <span class=\"variable\">$i</span> &lt; <span class=\"number\">10000000</span>; <span class=\"variable\">$i</span>++) &#123;</span><br><span class=\"line\">                <span class=\"variable\">$result</span> = <span class=\"variable\">$integer</span> * <span class=\"number\">1000</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"variable\">$end</span> = Carbon::now()-&gt;getPreciseTimestamp();</span><br><span class=\"line\">            <span class=\"variable\">$data</span>[<span class=\"variable\">$count</span>][] = (<span class=\"variable\">$end</span> - <span class=\"variable\">$start</span>) / <span class=\"number\">1000000</span> . <span class=\"string\">&#x27;秒&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"variable\">$count</span> = <span class=\"number\">0</span>; <span class=\"variable\">$count</span> &lt; <span class=\"number\">3</span>; <span class=\"variable\">$count</span>++) &#123;</span><br><span class=\"line\">            <span class=\"variable\">$start</span> = Carbon::now()-&gt;getPreciseTimestamp();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"variable\">$i</span> = <span class=\"number\">0</span>; <span class=\"variable\">$i</span> &lt; <span class=\"number\">10000000</span>; <span class=\"variable\">$i</span>++) &#123;</span><br><span class=\"line\">                <span class=\"variable\">$result</span> = (<span class=\"variable\">$integer</span> &lt;&lt; <span class=\"number\">10</span>) - (<span class=\"variable\">$integer</span> * <span class=\"number\">24</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"variable\">$end</span> = Carbon::now()-&gt;getPreciseTimestamp();</span><br><span class=\"line\">            <span class=\"variable\">$data</span>[<span class=\"variable\">$count</span>][] = (<span class=\"variable\">$end</span> - <span class=\"variable\">$start</span>) / <span class=\"number\">1000000</span> . <span class=\"string\">&#x27;秒&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"variable\">$count</span> = <span class=\"number\">0</span>; <span class=\"variable\">$count</span> &lt; <span class=\"number\">3</span>; <span class=\"variable\">$count</span>++) &#123;</span><br><span class=\"line\">            <span class=\"variable\">$start</span> = Carbon::now()-&gt;getPreciseTimestamp();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"variable\">$i</span> = <span class=\"number\">0</span>; <span class=\"variable\">$i</span> &lt; <span class=\"number\">10000000</span>; <span class=\"variable\">$i</span>++) &#123;</span><br><span class=\"line\">                <span class=\"variable\">$result</span> = (<span class=\"variable\">$integer</span> * <span class=\"number\">1024</span>) - (<span class=\"variable\">$integer</span> * <span class=\"number\">24</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"variable\">$end</span> = Carbon::now()-&gt;getPreciseTimestamp();</span><br><span class=\"line\">            <span class=\"variable\">$data</span>[<span class=\"variable\">$count</span>][] = (<span class=\"variable\">$end</span> - <span class=\"variable\">$start</span>) / <span class=\"number\">1000000</span> . <span class=\"string\">&#x27;秒&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"variable\">$count</span> = <span class=\"number\">0</span>; <span class=\"variable\">$count</span> &lt; <span class=\"number\">3</span>; <span class=\"variable\">$count</span>++) &#123;</span><br><span class=\"line\">            <span class=\"variable\">$start</span> = Carbon::now()-&gt;getPreciseTimestamp();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"variable\">$i</span> = <span class=\"number\">0</span>; <span class=\"variable\">$i</span> &lt; <span class=\"number\">10000000</span>; <span class=\"variable\">$i</span>++) &#123;</span><br><span class=\"line\">                <span class=\"variable\">$result</span> = <span class=\"variable\">$integer</span> &lt;&lt; <span class=\"number\">10</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"variable\">$end</span> = Carbon::now()-&gt;getPreciseTimestamp();</span><br><span class=\"line\">            <span class=\"variable\">$data</span>[<span class=\"variable\">$count</span>][] = (<span class=\"variable\">$end</span> - <span class=\"variable\">$start</span>) / <span class=\"number\">1000000</span> . <span class=\"string\">&#x27;秒&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;table(<span class=\"variable\">$headers</span>, <span class=\"variable\">$data</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"运算结果\"><a href=\"#运算结果\" class=\"headerlink\" title=\"运算结果\"></a>运算结果</h3><p>多次运行并且调整前后顺序，均得到一个较为稳定的结果：</p>\n<p><img src=\"/images/php/DisplacementEfficiencyComparison01.png\" alt=\"image01\"></p>\n<p>这个结果在意料之中，但又不完全在。位移符<code>&lt;&lt;</code>从理论上来讲和一般的乘法有着本质上的不同，应该有不错的效率提升。它之所以会比<code>$integer * 1000</code>效率低，应该是被第二步运算<code> - $integer * 24</code>拖累了，但是<code>位移符</code>却也没有与<code>*1024</code>拉开差距。为了证实这一点，我又补上了单独进行位移计算的测试。结果证明：</p>\n<div class=\"note info flat\"><p>位移符在<code>PHP</code>这里就仅仅是一个普通的乘除法计算而已。</p>\n</div>\n\n<h2 id=\"GO\"><a href=\"#GO\" class=\"headerlink\" title=\"GO\"></a>GO</h2><h3 id=\"代码部分-1\"><a href=\"#代码部分-1\" class=\"headerlink\" title=\"代码部分\"></a>代码部分</h3><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 计算次数</span></span><br><span class=\"line\">\tmaxI := <span class=\"number\">10000000</span></span><br><span class=\"line\"></span><br><span class=\"line\">\trand.Seed(time.Now().UnixNano())</span><br><span class=\"line\">\tinteger := rand.Intn(<span class=\"number\">999</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\techoString := <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;方案1：乘1000&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> count := <span class=\"number\">0</span>; count &lt; <span class=\"number\">3</span>; count++ &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 开始</span></span><br><span class=\"line\">\t\tstart := time.Now()</span><br><span class=\"line\">\t\techoString += <span class=\"string\">&quot;第&quot;</span> + strconv.Itoa(count+<span class=\"number\">1</span>) + <span class=\"string\">&quot;次:&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; maxI; i++ &#123;</span><br><span class=\"line\">\t\t\t_ = integer * <span class=\"number\">1000</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 结束</span></span><br><span class=\"line\">\t\tend := time.Now()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tbetweenTime := <span class=\"keyword\">float64</span>(end.Sub(start).Nanoseconds()) / <span class=\"number\">1000000000</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\techoString += strconv.FormatFloat(betweenTime, <span class=\"string\">&#x27;f&#x27;</span>, <span class=\"number\">10</span>, <span class=\"number\">64</span>) + <span class=\"string\">&quot;秒&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(echoString)</span><br><span class=\"line\"></span><br><span class=\"line\">\techoString = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;方案2：位移符&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> count := <span class=\"number\">0</span>; count &lt; <span class=\"number\">3</span>; count++ &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 开始</span></span><br><span class=\"line\">\t\tstart := time.Now()</span><br><span class=\"line\">\t\techoString += <span class=\"string\">&quot;第&quot;</span> + strconv.Itoa(count+<span class=\"number\">1</span>) + <span class=\"string\">&quot;次:&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; maxI; i++ &#123;</span><br><span class=\"line\">\t\t\t_ = (integer &lt;&lt; <span class=\"number\">10</span>) - (integer * <span class=\"number\">24</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 结束</span></span><br><span class=\"line\">\t\tend := time.Now()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tbetweenTime := <span class=\"keyword\">float64</span>(end.Sub(start).Nanoseconds()) / <span class=\"number\">1000000000</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\techoString += strconv.FormatFloat(betweenTime, <span class=\"string\">&#x27;f&#x27;</span>, <span class=\"number\">10</span>, <span class=\"number\">64</span>) + <span class=\"string\">&quot;秒&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(echoString)</span><br><span class=\"line\"></span><br><span class=\"line\">\techoString = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;方案3：乘以1024&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> count := <span class=\"number\">0</span>; count &lt; <span class=\"number\">3</span>; count++ &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 开始</span></span><br><span class=\"line\">\t\tstart := time.Now()</span><br><span class=\"line\">\t\techoString += <span class=\"string\">&quot;第&quot;</span> + strconv.Itoa(count+<span class=\"number\">1</span>) + <span class=\"string\">&quot;次:&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; maxI; i++ &#123;</span><br><span class=\"line\">\t\t\t_ = (integer * <span class=\"number\">1024</span>) - (integer * <span class=\"number\">24</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 结束</span></span><br><span class=\"line\">\t\tend := time.Now()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tbetweenTime := <span class=\"keyword\">float64</span>(end.Sub(start).Nanoseconds()) / <span class=\"number\">1000000000</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\techoString += strconv.FormatFloat(betweenTime, <span class=\"string\">&#x27;f&#x27;</span>, <span class=\"number\">10</span>, <span class=\"number\">64</span>) + <span class=\"string\">&quot;秒&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(echoString)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"运算结果-1\"><a href=\"#运算结果-1\" class=\"headerlink\" title=\"运算结果\"></a>运算结果</h3><p>运行结果同样不出所料。</p>\n<p><img src=\"/images/php/DisplacementEfficiencyComparison02.png\" alt=\"image01\"></p>\n<p>不过横向对比一下，<code>PHP</code>的计算效率被<code>GO</code>秒的渣渣都不剩了。身为一名从<code>PHP</code>入行编程，并且现在的主要技术栈和生产能力依旧在<code>PHP</code>身上的我，不免产生一种<code>好可怜啊</code>的悲凉。</p>\n<div class=\"note warning flat\"><p>位移符可以帮助我们理解计算机的原理，但是在<code>GO</code>这类编译型语言这里，编译器已经帮你完成了位移符能完成的计算。</p>\n</div>","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<h1 id=\"位移符效率对比\"><a href=\"#位移符效率对比\" class=\"headerlink\" title=\"位移符效率对比\"></a>位移符效率对比</h1><h2 id=\"讨论\"><a href=\"#讨论\" class=\"headerlink\" title=\"讨论\"></a>讨论</h2><p>在上一篇博客『<a href=\"/php/PhpExpandsPositiveIntegersByAFactorOf1000\">如何使用PHP最高效率的将一个正整数扩大一千倍？</a>』的讨论区，有人提出位移符应该才是运算最快的方案。</p>\n<p>以前总是看到位移符<code>&lt;&lt;</code>这样的符号。因为它总是能轻易把一个数字变成我不认识的模样，所以我也没有深入了解过。</p>\n<p>在看到讨论区留言后才意识到：自己的格局太小了。</p>\n<p>简单读了读<code>位移符</code>的文档和实现原理，我觉得这种方案还是值得一试的。按照之前两篇博客的心得，我首先抛出我的猜测：</p>\n<ul>\n<li>在<code>PHP</code>中，位移符方案效率要高于<code>*1024</code>，但是会低于<code>*1000</code>。</li>\n<li>在<code>C#</code>中，位移符的效率与其他两种方案持平。<ul>\n<li>论证过程见<a href=\"/go/CompiledLanguageComputationOfMultiplication\">『Golang』用计算证明：我远远低估了编译器</a></li>\n</ul>\n</li>\n</ul>\n<p>现在进行一个简单的验证。</p>\n<ul>\n<li>方案一：$integer * 1000</li>\n<li>方案二：($integer &lt;&lt; 10) - ($integer * 24)</li>\n<li>方案三：($integer * 1024) - ($integer * 24)</li>\n</ul>\n<h2 id=\"PHP\"><a href=\"#PHP\" class=\"headerlink\" title=\"PHP\"></a>PHP</h2><h3 id=\"代码部分\"><a href=\"#代码部分\" class=\"headerlink\" title=\"代码部分\"></a>代码部分</h3><p>这次吸取讨论区提到的“效率权重”，将随机数部分转移出来。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">App</span>\\<span class=\"title\">Console</span>\\<span class=\"title\">Commands</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Carbon</span>\\<span class=\"title\">Carbon</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Illuminate</span>\\<span class=\"title\">Console</span>\\<span class=\"title\">Command</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoCommand</span> <span class=\"keyword\">extends</span> <span class=\"title\">Command</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * The name and signature of the console command.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> string</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$signature</span> = <span class=\"string\">&#x27;demo:test&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * The console command description.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> string</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$description</span> = <span class=\"string\">&#x27;Command description&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Create a new command instance.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> void</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">parent</span>::__construct();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Execute the console command.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> int</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handle</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 图表内容</span></span><br><span class=\"line\">        <span class=\"variable\">$headers</span> = [<span class=\"string\">&#x27;次数&#x27;</span>, <span class=\"string\">&#x27;方案1：乘1000&#x27;</span>, <span class=\"string\">&#x27;方案2：移位符&#x27;</span>, <span class=\"string\">&#x27;方案3：乘以 1024&#x27;</span>, <span class=\"string\">&#x27;补充测试：仅位移&#x27;</span>];</span><br><span class=\"line\">        <span class=\"variable\">$data</span> = [</span><br><span class=\"line\">            [<span class=\"number\">0</span> =&gt; <span class=\"string\">&#x27;第一次&#x27;</span>],</span><br><span class=\"line\">            [<span class=\"number\">0</span> =&gt; <span class=\"string\">&#x27;第二次&#x27;</span>],</span><br><span class=\"line\">            [<span class=\"number\">0</span> =&gt; <span class=\"string\">&#x27;第三次&#x27;</span>]</span><br><span class=\"line\">        ];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 随机数提出</span></span><br><span class=\"line\">        <span class=\"variable\">$integer</span> = rand(<span class=\"number\">1</span>, <span class=\"number\">999</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 每个方法执行三次</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"variable\">$count</span> = <span class=\"number\">0</span>; <span class=\"variable\">$count</span> &lt; <span class=\"number\">3</span>; <span class=\"variable\">$count</span>++) &#123;</span><br><span class=\"line\">            <span class=\"variable\">$start</span> = Carbon::now()-&gt;getPreciseTimestamp();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"variable\">$i</span> = <span class=\"number\">0</span>; <span class=\"variable\">$i</span> &lt; <span class=\"number\">10000000</span>; <span class=\"variable\">$i</span>++) &#123;</span><br><span class=\"line\">                <span class=\"variable\">$result</span> = <span class=\"variable\">$integer</span> * <span class=\"number\">1000</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"variable\">$end</span> = Carbon::now()-&gt;getPreciseTimestamp();</span><br><span class=\"line\">            <span class=\"variable\">$data</span>[<span class=\"variable\">$count</span>][] = (<span class=\"variable\">$end</span> - <span class=\"variable\">$start</span>) / <span class=\"number\">1000000</span> . <span class=\"string\">&#x27;秒&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"variable\">$count</span> = <span class=\"number\">0</span>; <span class=\"variable\">$count</span> &lt; <span class=\"number\">3</span>; <span class=\"variable\">$count</span>++) &#123;</span><br><span class=\"line\">            <span class=\"variable\">$start</span> = Carbon::now()-&gt;getPreciseTimestamp();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"variable\">$i</span> = <span class=\"number\">0</span>; <span class=\"variable\">$i</span> &lt; <span class=\"number\">10000000</span>; <span class=\"variable\">$i</span>++) &#123;</span><br><span class=\"line\">                <span class=\"variable\">$result</span> = (<span class=\"variable\">$integer</span> &lt;&lt; <span class=\"number\">10</span>) - (<span class=\"variable\">$integer</span> * <span class=\"number\">24</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"variable\">$end</span> = Carbon::now()-&gt;getPreciseTimestamp();</span><br><span class=\"line\">            <span class=\"variable\">$data</span>[<span class=\"variable\">$count</span>][] = (<span class=\"variable\">$end</span> - <span class=\"variable\">$start</span>) / <span class=\"number\">1000000</span> . <span class=\"string\">&#x27;秒&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"variable\">$count</span> = <span class=\"number\">0</span>; <span class=\"variable\">$count</span> &lt; <span class=\"number\">3</span>; <span class=\"variable\">$count</span>++) &#123;</span><br><span class=\"line\">            <span class=\"variable\">$start</span> = Carbon::now()-&gt;getPreciseTimestamp();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"variable\">$i</span> = <span class=\"number\">0</span>; <span class=\"variable\">$i</span> &lt; <span class=\"number\">10000000</span>; <span class=\"variable\">$i</span>++) &#123;</span><br><span class=\"line\">                <span class=\"variable\">$result</span> = (<span class=\"variable\">$integer</span> * <span class=\"number\">1024</span>) - (<span class=\"variable\">$integer</span> * <span class=\"number\">24</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"variable\">$end</span> = Carbon::now()-&gt;getPreciseTimestamp();</span><br><span class=\"line\">            <span class=\"variable\">$data</span>[<span class=\"variable\">$count</span>][] = (<span class=\"variable\">$end</span> - <span class=\"variable\">$start</span>) / <span class=\"number\">1000000</span> . <span class=\"string\">&#x27;秒&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"variable\">$count</span> = <span class=\"number\">0</span>; <span class=\"variable\">$count</span> &lt; <span class=\"number\">3</span>; <span class=\"variable\">$count</span>++) &#123;</span><br><span class=\"line\">            <span class=\"variable\">$start</span> = Carbon::now()-&gt;getPreciseTimestamp();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"variable\">$i</span> = <span class=\"number\">0</span>; <span class=\"variable\">$i</span> &lt; <span class=\"number\">10000000</span>; <span class=\"variable\">$i</span>++) &#123;</span><br><span class=\"line\">                <span class=\"variable\">$result</span> = <span class=\"variable\">$integer</span> &lt;&lt; <span class=\"number\">10</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"variable\">$end</span> = Carbon::now()-&gt;getPreciseTimestamp();</span><br><span class=\"line\">            <span class=\"variable\">$data</span>[<span class=\"variable\">$count</span>][] = (<span class=\"variable\">$end</span> - <span class=\"variable\">$start</span>) / <span class=\"number\">1000000</span> . <span class=\"string\">&#x27;秒&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;table(<span class=\"variable\">$headers</span>, <span class=\"variable\">$data</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"运算结果\"><a href=\"#运算结果\" class=\"headerlink\" title=\"运算结果\"></a>运算结果</h3><p>多次运行并且调整前后顺序，均得到一个较为稳定的结果：</p>\n<p><img src=\"/images/php/DisplacementEfficiencyComparison01.png\" alt=\"image01\"></p>\n<p>这个结果在意料之中，但又不完全在。位移符<code>&lt;&lt;</code>从理论上来讲和一般的乘法有着本质上的不同，应该有不错的效率提升。它之所以会比<code>$integer * 1000</code>效率低，应该是被第二步运算<code> - $integer * 24</code>拖累了，但是<code>位移符</code>却也没有与<code>*1024</code>拉开差距。为了证实这一点，我又补上了单独进行位移计算的测试。结果证明：</p>\n<div class=\"note info flat\"><p>位移符在<code>PHP</code>这里就仅仅是一个普通的乘除法计算而已。</p>\n</div>\n\n<h2 id=\"GO\"><a href=\"#GO\" class=\"headerlink\" title=\"GO\"></a>GO</h2><h3 id=\"代码部分-1\"><a href=\"#代码部分-1\" class=\"headerlink\" title=\"代码部分\"></a>代码部分</h3><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 计算次数</span></span><br><span class=\"line\">\tmaxI := <span class=\"number\">10000000</span></span><br><span class=\"line\"></span><br><span class=\"line\">\trand.Seed(time.Now().UnixNano())</span><br><span class=\"line\">\tinteger := rand.Intn(<span class=\"number\">999</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\techoString := <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;方案1：乘1000&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> count := <span class=\"number\">0</span>; count &lt; <span class=\"number\">3</span>; count++ &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 开始</span></span><br><span class=\"line\">\t\tstart := time.Now()</span><br><span class=\"line\">\t\techoString += <span class=\"string\">&quot;第&quot;</span> + strconv.Itoa(count+<span class=\"number\">1</span>) + <span class=\"string\">&quot;次:&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; maxI; i++ &#123;</span><br><span class=\"line\">\t\t\t_ = integer * <span class=\"number\">1000</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 结束</span></span><br><span class=\"line\">\t\tend := time.Now()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tbetweenTime := <span class=\"keyword\">float64</span>(end.Sub(start).Nanoseconds()) / <span class=\"number\">1000000000</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\techoString += strconv.FormatFloat(betweenTime, <span class=\"string\">&#x27;f&#x27;</span>, <span class=\"number\">10</span>, <span class=\"number\">64</span>) + <span class=\"string\">&quot;秒&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(echoString)</span><br><span class=\"line\"></span><br><span class=\"line\">\techoString = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;方案2：位移符&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> count := <span class=\"number\">0</span>; count &lt; <span class=\"number\">3</span>; count++ &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 开始</span></span><br><span class=\"line\">\t\tstart := time.Now()</span><br><span class=\"line\">\t\techoString += <span class=\"string\">&quot;第&quot;</span> + strconv.Itoa(count+<span class=\"number\">1</span>) + <span class=\"string\">&quot;次:&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; maxI; i++ &#123;</span><br><span class=\"line\">\t\t\t_ = (integer &lt;&lt; <span class=\"number\">10</span>) - (integer * <span class=\"number\">24</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 结束</span></span><br><span class=\"line\">\t\tend := time.Now()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tbetweenTime := <span class=\"keyword\">float64</span>(end.Sub(start).Nanoseconds()) / <span class=\"number\">1000000000</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\techoString += strconv.FormatFloat(betweenTime, <span class=\"string\">&#x27;f&#x27;</span>, <span class=\"number\">10</span>, <span class=\"number\">64</span>) + <span class=\"string\">&quot;秒&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(echoString)</span><br><span class=\"line\"></span><br><span class=\"line\">\techoString = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;方案3：乘以1024&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> count := <span class=\"number\">0</span>; count &lt; <span class=\"number\">3</span>; count++ &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 开始</span></span><br><span class=\"line\">\t\tstart := time.Now()</span><br><span class=\"line\">\t\techoString += <span class=\"string\">&quot;第&quot;</span> + strconv.Itoa(count+<span class=\"number\">1</span>) + <span class=\"string\">&quot;次:&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; maxI; i++ &#123;</span><br><span class=\"line\">\t\t\t_ = (integer * <span class=\"number\">1024</span>) - (integer * <span class=\"number\">24</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 结束</span></span><br><span class=\"line\">\t\tend := time.Now()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tbetweenTime := <span class=\"keyword\">float64</span>(end.Sub(start).Nanoseconds()) / <span class=\"number\">1000000000</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\techoString += strconv.FormatFloat(betweenTime, <span class=\"string\">&#x27;f&#x27;</span>, <span class=\"number\">10</span>, <span class=\"number\">64</span>) + <span class=\"string\">&quot;秒&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(echoString)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"运算结果-1\"><a href=\"#运算结果-1\" class=\"headerlink\" title=\"运算结果\"></a>运算结果</h3><p>运行结果同样不出所料。</p>\n<p><img src=\"/images/php/DisplacementEfficiencyComparison02.png\" alt=\"image01\"></p>\n<p>不过横向对比一下，<code>PHP</code>的计算效率被<code>GO</code>秒的渣渣都不剩了。身为一名从<code>PHP</code>入行编程，并且现在的主要技术栈和生产能力依旧在<code>PHP</code>身上的我，不免产生一种<code>好可怜啊</code>的悲凉。</p>\n<div class=\"note warning flat\"><p>位移符可以帮助我们理解计算机的原理，但是在<code>GO</code>这类编译型语言这里，编译器已经帮你完成了位移符能完成的计算。</p>\n</div>"},{"title":"Layui 直传 OSS","description":"后端PHP使用 iidestiny/laravel-filesystem-oss  ，对 前端直传 有着良好的支持。这里不再赘述。","keywords":"layui, OSS","top_img":"/images/web/WebCover1.jpg","cover":"/images/web/WebCover1.jpg","date":"2021-08-13T02:44:15.000Z","updated":"2021-08-13T02:44:15.000Z","_content":"# layui 直传 OSS\n\n{% note blue 'fas fa-bullhorn' simple %}\n在现在的互联网背景下继续学习 layui 其实并不是一件很明智的事情。除非你真的很需要 layui 帮你快速解决问题，否则请考虑其他更专业的选择。\n{% endnote %}\n\n## 后端部分\n\n后端PHP使用 `iidestiny/laravel-filesystem-oss` ，对`前端直传`有着良好的支持。这里不再赘述。\n\n## 前端部分\n前端使用 `layui`框架的`upload`功能。`upload`对OSS不存在任何支持，但好在在文件选择后的回调中，我们可以直接对`upload`对象进行修改，来达到我们的目的。接下来开始上代码。\n\n\n```javascript\n// 上传图片\nlet layLoading;\nvar uploadInst = upload.render({\n    elem: '#image-upload'\n    , url: '/upload/' // 随便填写一个，等下还要动态修改的。\n    , choose: function (obj) { // 当文件被选择时\n        layLoading = layer.load(); // load 层\n\n        // 访问后台拿取阿里云的签名\n        $.ajax({\n            method: \"POST\",\n            url: \"\", // 你的后台获取签名的地址\n            async: false,\n            done: function (signRes) { // 拿到签名的回调，修改 uploadInst 的属性。\n                uploadInst.config.url = signRes.data.oss_config.host // 阿里云上传地址\n                uploadInst.config.data = { // 附加参数\n                    OSSAccessKeyId: signRes.data.oss_config.accessid\n                    , policy: signRes.data.oss_config.policy\n                    , Signature: signRes.data.oss_config.signature\n                    , key: signRes.data.oss_upload_advance.name // 文件名。采取后端生成文件名的方式，来避免文件重名。\n                }\n            },\n        });\n    }\n    , before: function (obj) {\n        // 修改上传属性\n        // 预读本地文件示例，不支持ie8\n        obj.preview(function (index, file, result) {\n            $('#cover-upload-img').attr('src', result).attr('style', '{display:inline}'); //图片链接（base64）\n        });\n    }\n    , done: function (res) {\n        // 关闭弹窗\n        layer.closeAll();\n        // 上传成功的操作\n\n    }\n    , error: function () {\n        //演示失败状态，并实现重传\n        var coverUploadText = $('#cover-upload-text');\n        coverUploadText.html('<span style=\"color: #FF5722;\">上传失败</span> <a class=\"layui-btn layui-btn-mini cover-upload-reload\">重试</a>');\n        coverUploadText.find('.cover-upload-reload').on('click', function () {\n            uploadInst.upload();\n        });\n        // 关闭弹窗\n        layer.closeAll();\n    }\n});\n\n```\n\n## layui 直传支持\n此时点击上传会看到阿里云关于 key 的报错。因为`阿里云要求上传的文件 file 必须是在最后一位`，而`layui`的处理正好是`先把 file 放到第一位`。所以我们还需要`修改 layui 的源代码`：\n\n找到`layui/lay/modules/upload.js`。无论你的代码是方便修改的源代码，还是构建过的源代码，都可以直接`全文搜索append`,一共会搜到四个`append`,将第三个`append`所在的逻辑块与第四个`append`所在的逻辑块对调，就能实现将`file`字段移动到最后一位。\n\n```javascript\nlayui.each(l.data, function (e, t) {\n    t = \"function\" == typeof t ? t() : t, r.append(e, t)\n}),r.append(l.field, o);\n```\n\n前两个`append`是涉及`ie8,ie9的兼容模式`。这里暂不做讨论。 ","source":"_posts/web/LayuiDirectUploadToOSS.md","raw":"---\ntitle: layui 直传 OSS\ndescription: 后端PHP使用 iidestiny/laravel-filesystem-oss  ，对 前端直传 有着良好的支持。这里不再赘述。\nkeywords: layui, OSS\ntop_img: /images/web/WebCover1.jpg\ncover: /images/web/WebCover1.jpg\ntags:\n  - Web\n  - 进阶\ncategories:\n  - Web\ndate: 2021-08-13 10:44:15\nupdated: 2021-08-13 10:44:15\n---\n# layui 直传 OSS\n\n{% note blue 'fas fa-bullhorn' simple %}\n在现在的互联网背景下继续学习 layui 其实并不是一件很明智的事情。除非你真的很需要 layui 帮你快速解决问题，否则请考虑其他更专业的选择。\n{% endnote %}\n\n## 后端部分\n\n后端PHP使用 `iidestiny/laravel-filesystem-oss` ，对`前端直传`有着良好的支持。这里不再赘述。\n\n## 前端部分\n前端使用 `layui`框架的`upload`功能。`upload`对OSS不存在任何支持，但好在在文件选择后的回调中，我们可以直接对`upload`对象进行修改，来达到我们的目的。接下来开始上代码。\n\n\n```javascript\n// 上传图片\nlet layLoading;\nvar uploadInst = upload.render({\n    elem: '#image-upload'\n    , url: '/upload/' // 随便填写一个，等下还要动态修改的。\n    , choose: function (obj) { // 当文件被选择时\n        layLoading = layer.load(); // load 层\n\n        // 访问后台拿取阿里云的签名\n        $.ajax({\n            method: \"POST\",\n            url: \"\", // 你的后台获取签名的地址\n            async: false,\n            done: function (signRes) { // 拿到签名的回调，修改 uploadInst 的属性。\n                uploadInst.config.url = signRes.data.oss_config.host // 阿里云上传地址\n                uploadInst.config.data = { // 附加参数\n                    OSSAccessKeyId: signRes.data.oss_config.accessid\n                    , policy: signRes.data.oss_config.policy\n                    , Signature: signRes.data.oss_config.signature\n                    , key: signRes.data.oss_upload_advance.name // 文件名。采取后端生成文件名的方式，来避免文件重名。\n                }\n            },\n        });\n    }\n    , before: function (obj) {\n        // 修改上传属性\n        // 预读本地文件示例，不支持ie8\n        obj.preview(function (index, file, result) {\n            $('#cover-upload-img').attr('src', result).attr('style', '{display:inline}'); //图片链接（base64）\n        });\n    }\n    , done: function (res) {\n        // 关闭弹窗\n        layer.closeAll();\n        // 上传成功的操作\n\n    }\n    , error: function () {\n        //演示失败状态，并实现重传\n        var coverUploadText = $('#cover-upload-text');\n        coverUploadText.html('<span style=\"color: #FF5722;\">上传失败</span> <a class=\"layui-btn layui-btn-mini cover-upload-reload\">重试</a>');\n        coverUploadText.find('.cover-upload-reload').on('click', function () {\n            uploadInst.upload();\n        });\n        // 关闭弹窗\n        layer.closeAll();\n    }\n});\n\n```\n\n## layui 直传支持\n此时点击上传会看到阿里云关于 key 的报错。因为`阿里云要求上传的文件 file 必须是在最后一位`，而`layui`的处理正好是`先把 file 放到第一位`。所以我们还需要`修改 layui 的源代码`：\n\n找到`layui/lay/modules/upload.js`。无论你的代码是方便修改的源代码，还是构建过的源代码，都可以直接`全文搜索append`,一共会搜到四个`append`,将第三个`append`所在的逻辑块与第四个`append`所在的逻辑块对调，就能实现将`file`字段移动到最后一位。\n\n```javascript\nlayui.each(l.data, function (e, t) {\n    t = \"function\" == typeof t ? t() : t, r.append(e, t)\n}),r.append(l.field, o);\n```\n\n前两个`append`是涉及`ie8,ie9的兼容模式`。这里暂不做讨论。 ","slug":"web/LayuiDirectUploadToOSS","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cksa1rbxg000kz4u45l2vfq65","content":"<h1 id=\"layui-直传-OSS\"><a href=\"#layui-直传-OSS\" class=\"headerlink\" title=\"layui 直传 OSS\"></a>layui 直传 OSS</h1><div class=\"note blue icon simple\"><i class=\"note-icon fas fa-bullhorn\"></i><p>在现在的互联网背景下继续学习 layui 其实并不是一件很明智的事情。除非你真的很需要 layui 帮你快速解决问题，否则请考虑其他更专业的选择。</p>\n</div>\n\n<h2 id=\"后端部分\"><a href=\"#后端部分\" class=\"headerlink\" title=\"后端部分\"></a>后端部分</h2><p>后端PHP使用 <code>iidestiny/laravel-filesystem-oss</code> ，对<code>前端直传</code>有着良好的支持。这里不再赘述。</p>\n<h2 id=\"前端部分\"><a href=\"#前端部分\" class=\"headerlink\" title=\"前端部分\"></a>前端部分</h2><p>前端使用 <code>layui</code>框架的<code>upload</code>功能。<code>upload</code>对OSS不存在任何支持，但好在在文件选择后的回调中，我们可以直接对<code>upload</code>对象进行修改，来达到我们的目的。接下来开始上代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 上传图片</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> layLoading;</span><br><span class=\"line\"><span class=\"keyword\">var</span> uploadInst = upload.render(&#123;</span><br><span class=\"line\">    <span class=\"attr\">elem</span>: <span class=\"string\">&#x27;#image-upload&#x27;</span></span><br><span class=\"line\">    , <span class=\"attr\">url</span>: <span class=\"string\">&#x27;/upload/&#x27;</span> <span class=\"comment\">// 随便填写一个，等下还要动态修改的。</span></span><br><span class=\"line\">    , <span class=\"attr\">choose</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>) </span>&#123; <span class=\"comment\">// 当文件被选择时</span></span><br><span class=\"line\">        layLoading = layer.load(); <span class=\"comment\">// load 层</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 访问后台拿取阿里云的签名</span></span><br><span class=\"line\">        $.ajax(&#123;</span><br><span class=\"line\">            <span class=\"attr\">method</span>: <span class=\"string\">&quot;POST&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">url</span>: <span class=\"string\">&quot;&quot;</span>, <span class=\"comment\">// 你的后台获取签名的地址</span></span><br><span class=\"line\">            <span class=\"attr\">async</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            <span class=\"attr\">done</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">signRes</span>) </span>&#123; <span class=\"comment\">// 拿到签名的回调，修改 uploadInst 的属性。</span></span><br><span class=\"line\">                uploadInst.config.url = signRes.data.oss_config.host <span class=\"comment\">// 阿里云上传地址</span></span><br><span class=\"line\">                uploadInst.config.data = &#123; <span class=\"comment\">// 附加参数</span></span><br><span class=\"line\">                    <span class=\"attr\">OSSAccessKeyId</span>: signRes.data.oss_config.accessid</span><br><span class=\"line\">                    , <span class=\"attr\">policy</span>: signRes.data.oss_config.policy</span><br><span class=\"line\">                    , <span class=\"attr\">Signature</span>: signRes.data.oss_config.signature</span><br><span class=\"line\">                    , <span class=\"attr\">key</span>: signRes.data.oss_upload_advance.name <span class=\"comment\">// 文件名。采取后端生成文件名的方式，来避免文件重名。</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    , <span class=\"attr\">before</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 修改上传属性</span></span><br><span class=\"line\">        <span class=\"comment\">// 预读本地文件示例，不支持ie8</span></span><br><span class=\"line\">        obj.preview(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">index, file, result</span>) </span>&#123;</span><br><span class=\"line\">            $(<span class=\"string\">&#x27;#cover-upload-img&#x27;</span>).attr(<span class=\"string\">&#x27;src&#x27;</span>, result).attr(<span class=\"string\">&#x27;style&#x27;</span>, <span class=\"string\">&#x27;&#123;display:inline&#125;&#x27;</span>); <span class=\"comment\">//图片链接（base64）</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    , <span class=\"attr\">done</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 关闭弹窗</span></span><br><span class=\"line\">        layer.closeAll();</span><br><span class=\"line\">        <span class=\"comment\">// 上传成功的操作</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    , <span class=\"attr\">error</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//演示失败状态，并实现重传</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> coverUploadText = $(<span class=\"string\">&#x27;#cover-upload-text&#x27;</span>);</span><br><span class=\"line\">        coverUploadText.html(<span class=\"string\">&#x27;&lt;span style=&quot;color: #FF5722;&quot;&gt;上传失败&lt;/span&gt; &lt;a class=&quot;layui-btn layui-btn-mini cover-upload-reload&quot;&gt;重试&lt;/a&gt;&#x27;</span>);</span><br><span class=\"line\">        coverUploadText.find(<span class=\"string\">&#x27;.cover-upload-reload&#x27;</span>).on(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            uploadInst.upload();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">// 关闭弹窗</span></span><br><span class=\"line\">        layer.closeAll();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"layui-直传支持\"><a href=\"#layui-直传支持\" class=\"headerlink\" title=\"layui 直传支持\"></a>layui 直传支持</h2><p>此时点击上传会看到阿里云关于 key 的报错。因为<code>阿里云要求上传的文件 file 必须是在最后一位</code>，而<code>layui</code>的处理正好是<code>先把 file 放到第一位</code>。所以我们还需要<code>修改 layui 的源代码</code>：</p>\n<p>找到<code>layui/lay/modules/upload.js</code>。无论你的代码是方便修改的源代码，还是构建过的源代码，都可以直接<code>全文搜索append</code>,一共会搜到四个<code>append</code>,将第三个<code>append</code>所在的逻辑块与第四个<code>append</code>所在的逻辑块对调，就能实现将<code>file</code>字段移动到最后一位。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">layui.each(l.data, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e, t</span>) </span>&#123;</span><br><span class=\"line\">    t = <span class=\"string\">&quot;function&quot;</span> == <span class=\"keyword\">typeof</span> t ? t() : t, r.append(e, t)</span><br><span class=\"line\">&#125;),r.append(l.field, o);</span><br></pre></td></tr></table></figure>\n\n<p>前两个<code>append</code>是涉及<code>ie8,ie9的兼容模式</code>。这里暂不做讨论。 </p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<h1 id=\"layui-直传-OSS\"><a href=\"#layui-直传-OSS\" class=\"headerlink\" title=\"layui 直传 OSS\"></a>layui 直传 OSS</h1><div class=\"note blue icon simple\"><i class=\"note-icon fas fa-bullhorn\"></i><p>在现在的互联网背景下继续学习 layui 其实并不是一件很明智的事情。除非你真的很需要 layui 帮你快速解决问题，否则请考虑其他更专业的选择。</p>\n</div>\n\n<h2 id=\"后端部分\"><a href=\"#后端部分\" class=\"headerlink\" title=\"后端部分\"></a>后端部分</h2><p>后端PHP使用 <code>iidestiny/laravel-filesystem-oss</code> ，对<code>前端直传</code>有着良好的支持。这里不再赘述。</p>\n<h2 id=\"前端部分\"><a href=\"#前端部分\" class=\"headerlink\" title=\"前端部分\"></a>前端部分</h2><p>前端使用 <code>layui</code>框架的<code>upload</code>功能。<code>upload</code>对OSS不存在任何支持，但好在在文件选择后的回调中，我们可以直接对<code>upload</code>对象进行修改，来达到我们的目的。接下来开始上代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 上传图片</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> layLoading;</span><br><span class=\"line\"><span class=\"keyword\">var</span> uploadInst = upload.render(&#123;</span><br><span class=\"line\">    <span class=\"attr\">elem</span>: <span class=\"string\">&#x27;#image-upload&#x27;</span></span><br><span class=\"line\">    , <span class=\"attr\">url</span>: <span class=\"string\">&#x27;/upload/&#x27;</span> <span class=\"comment\">// 随便填写一个，等下还要动态修改的。</span></span><br><span class=\"line\">    , <span class=\"attr\">choose</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>) </span>&#123; <span class=\"comment\">// 当文件被选择时</span></span><br><span class=\"line\">        layLoading = layer.load(); <span class=\"comment\">// load 层</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 访问后台拿取阿里云的签名</span></span><br><span class=\"line\">        $.ajax(&#123;</span><br><span class=\"line\">            <span class=\"attr\">method</span>: <span class=\"string\">&quot;POST&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">url</span>: <span class=\"string\">&quot;&quot;</span>, <span class=\"comment\">// 你的后台获取签名的地址</span></span><br><span class=\"line\">            <span class=\"attr\">async</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            <span class=\"attr\">done</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">signRes</span>) </span>&#123; <span class=\"comment\">// 拿到签名的回调，修改 uploadInst 的属性。</span></span><br><span class=\"line\">                uploadInst.config.url = signRes.data.oss_config.host <span class=\"comment\">// 阿里云上传地址</span></span><br><span class=\"line\">                uploadInst.config.data = &#123; <span class=\"comment\">// 附加参数</span></span><br><span class=\"line\">                    <span class=\"attr\">OSSAccessKeyId</span>: signRes.data.oss_config.accessid</span><br><span class=\"line\">                    , <span class=\"attr\">policy</span>: signRes.data.oss_config.policy</span><br><span class=\"line\">                    , <span class=\"attr\">Signature</span>: signRes.data.oss_config.signature</span><br><span class=\"line\">                    , <span class=\"attr\">key</span>: signRes.data.oss_upload_advance.name <span class=\"comment\">// 文件名。采取后端生成文件名的方式，来避免文件重名。</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    , <span class=\"attr\">before</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 修改上传属性</span></span><br><span class=\"line\">        <span class=\"comment\">// 预读本地文件示例，不支持ie8</span></span><br><span class=\"line\">        obj.preview(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">index, file, result</span>) </span>&#123;</span><br><span class=\"line\">            $(<span class=\"string\">&#x27;#cover-upload-img&#x27;</span>).attr(<span class=\"string\">&#x27;src&#x27;</span>, result).attr(<span class=\"string\">&#x27;style&#x27;</span>, <span class=\"string\">&#x27;&#123;display:inline&#125;&#x27;</span>); <span class=\"comment\">//图片链接（base64）</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    , <span class=\"attr\">done</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 关闭弹窗</span></span><br><span class=\"line\">        layer.closeAll();</span><br><span class=\"line\">        <span class=\"comment\">// 上传成功的操作</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    , <span class=\"attr\">error</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//演示失败状态，并实现重传</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> coverUploadText = $(<span class=\"string\">&#x27;#cover-upload-text&#x27;</span>);</span><br><span class=\"line\">        coverUploadText.html(<span class=\"string\">&#x27;&lt;span style=&quot;color: #FF5722;&quot;&gt;上传失败&lt;/span&gt; &lt;a class=&quot;layui-btn layui-btn-mini cover-upload-reload&quot;&gt;重试&lt;/a&gt;&#x27;</span>);</span><br><span class=\"line\">        coverUploadText.find(<span class=\"string\">&#x27;.cover-upload-reload&#x27;</span>).on(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            uploadInst.upload();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">// 关闭弹窗</span></span><br><span class=\"line\">        layer.closeAll();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"layui-直传支持\"><a href=\"#layui-直传支持\" class=\"headerlink\" title=\"layui 直传支持\"></a>layui 直传支持</h2><p>此时点击上传会看到阿里云关于 key 的报错。因为<code>阿里云要求上传的文件 file 必须是在最后一位</code>，而<code>layui</code>的处理正好是<code>先把 file 放到第一位</code>。所以我们还需要<code>修改 layui 的源代码</code>：</p>\n<p>找到<code>layui/lay/modules/upload.js</code>。无论你的代码是方便修改的源代码，还是构建过的源代码，都可以直接<code>全文搜索append</code>,一共会搜到四个<code>append</code>,将第三个<code>append</code>所在的逻辑块与第四个<code>append</code>所在的逻辑块对调，就能实现将<code>file</code>字段移动到最后一位。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">layui.each(l.data, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e, t</span>) </span>&#123;</span><br><span class=\"line\">    t = <span class=\"string\">&quot;function&quot;</span> == <span class=\"keyword\">typeof</span> t ? t() : t, r.append(e, t)</span><br><span class=\"line\">&#125;),r.append(l.field, o);</span><br></pre></td></tr></table></figure>\n\n<p>前两个<code>append</code>是涉及<code>ie8,ie9的兼容模式</code>。这里暂不做讨论。 </p>\n"},{"title":"如何使用PHP最高效率的将一个正整数扩大一千倍？","description":"如何最高效率的将一个正整数扩大一千倍？当这个问题被抛给人脑的时候，接受过优秀的九年义务教育的我们稍加思索就能给出一个调皮而又不失大师风范的答案：添三个零就行了~但是当这个问题交给程序员用代码解决的时候，问题就要从编程的角度去考虑。","keywords":"Ubuntu, Laravel, php","top_img":"/images/php/PHPCover1.png","cover":"/images/php/PHPCover1.png","date":"2021-08-12T07:42:15.000Z","updated":"2021-08-12T07:42:15.000Z","swiper_index":3,"swiper_desc":"由一个偶然的畅想，引发的一系列讨论","swiper_cover":"/images/php/PHPCover1.png","_content":"# 如何使用PHP最高效率的将一个正整数扩大一千倍？\n\n## 方案制定\n\n如何最高效率的将一个正整数扩大一千倍？\n\n当这个问题被抛给人脑的时候，接受过优秀的九年义务教育的我们稍加思索就能给出一个调皮而又不失大师风范的答案：添三个零就行了~\n\n但是当这个问题交给程序员用代码解决的时候，问题就要从编程的角度去考虑。我作为`phper`第一时间想到的方案分别是\n- 方案1：在数字末尾粘连字符串 \"000\"\n- 方案2：将原数字简单的乘以 1000\n\n当我把这个问题丢给我的朋友的时候，他告诉我：\n方案1肯定不行！你应该采用方案2，但是如果你足够鸡贼的话，你应该采用`正整数 X 1024 - 正整数 X 24`!\n因为计算机是二进制，当你告诉他要乘以1000的时候，他会进行`正整数 X 512 + 正整数 X 256 + 正整数 X 128 + 正整数 X 128 + 正整数 X 64 + 正整数 X 32 + 正整数 X 8`，一直累加到凑齐 正整数的 1000 倍 为止。而运算`2的10次方`要比那一串加号更快接近结果。\n\n## 实践出真知\n大佬的这段话很快打动了我。为了践行大佬的真知，证明大佬的阐述对我犹如醍醐灌顶般点醒梦中人，我迅速写出了一小段方法，将一个随机正整数扩大1000倍的算法用三种不同的方法分别跑 一千万次，查看各个方法运行的效率\n\n```php\n// 使用 laravel 的 Commands 实现\n// 图表内容\n$headers = ['次数', '方案1：拼接法', '方案2：乘1000', '方案3：乘以 1024'];\n$data = [\n    [0=>'第一次'],\n    [0=>'第二次'],\n    [0=>'第三次']\n];\n// 每个方法执行三次\nfor ($count = 0; $count < 3; $count ++) {\n    // 生成变量名 ： plan1start1\n    $start = Carbon::now()->getPreciseTimestamp();\n    for ($i = 0; $i < 10000000; $i ++)\n    {\n        $integer = rand(1, 999);\n        $result = (int)($integer . '000');\n    }\n    $end = Carbon::now()->getPreciseTimestamp();\n    $data[$count][] = ($end - $start)/1000000 . '秒';\n}\n\nfor ($count = 0; $count < 3; $count ++) {\n    $start = Carbon::now()->getPreciseTimestamp();\n    for ($i = 0; $i < 10000000; $i ++)\n    {\n        $integer = rand(1, 999);\n        $result = $integer * 1000;\n    }\n    $end = Carbon::now()->getPreciseTimestamp();\n    $data[$count][] = ($end - $start)/1000000 . '秒';\n}\n\nfor ($count = 0; $count < 3; $count ++) {\n    $start = Carbon::now()->getPreciseTimestamp();\n    for ($i = 0; $i < 10000000; $i ++)\n    {\n        $integer = rand(1, 999);\n        $result = $integer * 1024 - $integer * 24;\n    }\n    $end = Carbon::now()->getPreciseTimestamp();\n    $data[$count][] = ($end - $start)/1000000 . '秒';\n}\n$this->table($headers, $data);\n```\n\n将这段代码运行多次后均得到一个较为稳定的结果：\n\n![php多次运行结果](/images/php/PhpExpandsPositiveIntegersByAFactorOf1000-image01.png)\n\n看到这个结果，大大的疑问重新占领了我小小的脑瓜。`乘以 1024 再减去 乘以 24` 反而比`直接乘以 1000`慢一些。当我拿着这个结果去寻找大佬解决疑惑时，得到了他这样的回答：\n\n平时工作不够多是不是？还有空做这种试验？\n\n## 对试验结果的思考\n\n暗戳戳鄙夷他一把，顺便把他在我心中的地位从`大佬`降格为`我的某个不愿透露姓名的普通朋友`。我继续了对这件事请的思考。\n\n在正整数后面拼接字符串 '000'，要把这个正整数转换为字符串，然后拼接字符串 '000'，之后再转回正整数。计算的复杂程度远超正整数的直接计算，时间上明显劣于后者，这点经过验证也毋庸置疑。\n\n但是我的某个不愿透露姓名的豆豆同学对`二进制`计算模式解释的同样头头是道。我学习的是`解释型语言 php`，这意味着有一群对代码理解达到骨灰级的玩家在我看不到的地方对`php`进行了大量的算法优化。而豆豆同学学习的是`编译型语言 C++`。是不是这种解释型语言的不同点，导致了本次运算结果的不同？\n\n所以我计划对这个问题进一步挖掘，将在下一篇博文『[用计算证明：我远远低估了编译器](/golang/CompiledLanguageComputationOfMultiplication)』中使用`编译型语言 golang`对这个课题再次进行讨论。","source":"_posts/php/ExpandsPositiveIntegersByAFactorOf1000.md","raw":"---\ntitle: 如何使用PHP最高效率的将一个正整数扩大一千倍？\ndescription: 如何最高效率的将一个正整数扩大一千倍？当这个问题被抛给人脑的时候，接受过优秀的九年义务教育的我们稍加思索就能给出一个调皮而又不失大师风范的答案：添三个零就行了~但是当这个问题交给程序员用代码解决的时候，问题就要从编程的角度去考虑。\nkeywords: Ubuntu, Laravel, php\ntop_img: /images/php/PHPCover1.png\ncover: /images/php/PHPCover1.png\ntags:\n    - PHP\n    - 探讨\ncategories:\n    - PHP\ndate: 2021-08-12 15:42:15\nupdated: 2021-08-12 15:42:15\nswiper_index: 3\nswiper_desc: 由一个偶然的畅想，引发的一系列讨论\nswiper_cover: /images/php/PHPCover1.png\n---\n# 如何使用PHP最高效率的将一个正整数扩大一千倍？\n\n## 方案制定\n\n如何最高效率的将一个正整数扩大一千倍？\n\n当这个问题被抛给人脑的时候，接受过优秀的九年义务教育的我们稍加思索就能给出一个调皮而又不失大师风范的答案：添三个零就行了~\n\n但是当这个问题交给程序员用代码解决的时候，问题就要从编程的角度去考虑。我作为`phper`第一时间想到的方案分别是\n- 方案1：在数字末尾粘连字符串 \"000\"\n- 方案2：将原数字简单的乘以 1000\n\n当我把这个问题丢给我的朋友的时候，他告诉我：\n方案1肯定不行！你应该采用方案2，但是如果你足够鸡贼的话，你应该采用`正整数 X 1024 - 正整数 X 24`!\n因为计算机是二进制，当你告诉他要乘以1000的时候，他会进行`正整数 X 512 + 正整数 X 256 + 正整数 X 128 + 正整数 X 128 + 正整数 X 64 + 正整数 X 32 + 正整数 X 8`，一直累加到凑齐 正整数的 1000 倍 为止。而运算`2的10次方`要比那一串加号更快接近结果。\n\n## 实践出真知\n大佬的这段话很快打动了我。为了践行大佬的真知，证明大佬的阐述对我犹如醍醐灌顶般点醒梦中人，我迅速写出了一小段方法，将一个随机正整数扩大1000倍的算法用三种不同的方法分别跑 一千万次，查看各个方法运行的效率\n\n```php\n// 使用 laravel 的 Commands 实现\n// 图表内容\n$headers = ['次数', '方案1：拼接法', '方案2：乘1000', '方案3：乘以 1024'];\n$data = [\n    [0=>'第一次'],\n    [0=>'第二次'],\n    [0=>'第三次']\n];\n// 每个方法执行三次\nfor ($count = 0; $count < 3; $count ++) {\n    // 生成变量名 ： plan1start1\n    $start = Carbon::now()->getPreciseTimestamp();\n    for ($i = 0; $i < 10000000; $i ++)\n    {\n        $integer = rand(1, 999);\n        $result = (int)($integer . '000');\n    }\n    $end = Carbon::now()->getPreciseTimestamp();\n    $data[$count][] = ($end - $start)/1000000 . '秒';\n}\n\nfor ($count = 0; $count < 3; $count ++) {\n    $start = Carbon::now()->getPreciseTimestamp();\n    for ($i = 0; $i < 10000000; $i ++)\n    {\n        $integer = rand(1, 999);\n        $result = $integer * 1000;\n    }\n    $end = Carbon::now()->getPreciseTimestamp();\n    $data[$count][] = ($end - $start)/1000000 . '秒';\n}\n\nfor ($count = 0; $count < 3; $count ++) {\n    $start = Carbon::now()->getPreciseTimestamp();\n    for ($i = 0; $i < 10000000; $i ++)\n    {\n        $integer = rand(1, 999);\n        $result = $integer * 1024 - $integer * 24;\n    }\n    $end = Carbon::now()->getPreciseTimestamp();\n    $data[$count][] = ($end - $start)/1000000 . '秒';\n}\n$this->table($headers, $data);\n```\n\n将这段代码运行多次后均得到一个较为稳定的结果：\n\n![php多次运行结果](/images/php/PhpExpandsPositiveIntegersByAFactorOf1000-image01.png)\n\n看到这个结果，大大的疑问重新占领了我小小的脑瓜。`乘以 1024 再减去 乘以 24` 反而比`直接乘以 1000`慢一些。当我拿着这个结果去寻找大佬解决疑惑时，得到了他这样的回答：\n\n平时工作不够多是不是？还有空做这种试验？\n\n## 对试验结果的思考\n\n暗戳戳鄙夷他一把，顺便把他在我心中的地位从`大佬`降格为`我的某个不愿透露姓名的普通朋友`。我继续了对这件事请的思考。\n\n在正整数后面拼接字符串 '000'，要把这个正整数转换为字符串，然后拼接字符串 '000'，之后再转回正整数。计算的复杂程度远超正整数的直接计算，时间上明显劣于后者，这点经过验证也毋庸置疑。\n\n但是我的某个不愿透露姓名的豆豆同学对`二进制`计算模式解释的同样头头是道。我学习的是`解释型语言 php`，这意味着有一群对代码理解达到骨灰级的玩家在我看不到的地方对`php`进行了大量的算法优化。而豆豆同学学习的是`编译型语言 C++`。是不是这种解释型语言的不同点，导致了本次运算结果的不同？\n\n所以我计划对这个问题进一步挖掘，将在下一篇博文『[用计算证明：我远远低估了编译器](/golang/CompiledLanguageComputationOfMultiplication)』中使用`编译型语言 golang`对这个课题再次进行讨论。","slug":"php/ExpandsPositiveIntegersByAFactorOf1000","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cksa1rbxr001tz4u42evl32xf","content":"<h1 id=\"如何使用PHP最高效率的将一个正整数扩大一千倍？\"><a href=\"#如何使用PHP最高效率的将一个正整数扩大一千倍？\" class=\"headerlink\" title=\"如何使用PHP最高效率的将一个正整数扩大一千倍？\"></a>如何使用PHP最高效率的将一个正整数扩大一千倍？</h1><h2 id=\"方案制定\"><a href=\"#方案制定\" class=\"headerlink\" title=\"方案制定\"></a>方案制定</h2><p>如何最高效率的将一个正整数扩大一千倍？</p>\n<p>当这个问题被抛给人脑的时候，接受过优秀的九年义务教育的我们稍加思索就能给出一个调皮而又不失大师风范的答案：添三个零就行了~</p>\n<p>但是当这个问题交给程序员用代码解决的时候，问题就要从编程的角度去考虑。我作为<code>phper</code>第一时间想到的方案分别是</p>\n<ul>\n<li>方案1：在数字末尾粘连字符串 “000”</li>\n<li>方案2：将原数字简单的乘以 1000</li>\n</ul>\n<p>当我把这个问题丢给我的朋友的时候，他告诉我：<br>方案1肯定不行！你应该采用方案2，但是如果你足够鸡贼的话，你应该采用<code>正整数 X 1024 - 正整数 X 24</code>!<br>因为计算机是二进制，当你告诉他要乘以1000的时候，他会进行<code>正整数 X 512 + 正整数 X 256 + 正整数 X 128 + 正整数 X 128 + 正整数 X 64 + 正整数 X 32 + 正整数 X 8</code>，一直累加到凑齐 正整数的 1000 倍 为止。而运算<code>2的10次方</code>要比那一串加号更快接近结果。</p>\n<h2 id=\"实践出真知\"><a href=\"#实践出真知\" class=\"headerlink\" title=\"实践出真知\"></a>实践出真知</h2><p>大佬的这段话很快打动了我。为了践行大佬的真知，证明大佬的阐述对我犹如醍醐灌顶般点醒梦中人，我迅速写出了一小段方法，将一个随机正整数扩大1000倍的算法用三种不同的方法分别跑 一千万次，查看各个方法运行的效率</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用 laravel 的 Commands 实现</span></span><br><span class=\"line\"><span class=\"comment\">// 图表内容</span></span><br><span class=\"line\"><span class=\"variable\">$headers</span> = [<span class=\"string\">&#x27;次数&#x27;</span>, <span class=\"string\">&#x27;方案1：拼接法&#x27;</span>, <span class=\"string\">&#x27;方案2：乘1000&#x27;</span>, <span class=\"string\">&#x27;方案3：乘以 1024&#x27;</span>];</span><br><span class=\"line\"><span class=\"variable\">$data</span> = [</span><br><span class=\"line\">    [<span class=\"number\">0</span>=&gt;<span class=\"string\">&#x27;第一次&#x27;</span>],</span><br><span class=\"line\">    [<span class=\"number\">0</span>=&gt;<span class=\"string\">&#x27;第二次&#x27;</span>],</span><br><span class=\"line\">    [<span class=\"number\">0</span>=&gt;<span class=\"string\">&#x27;第三次&#x27;</span>]</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"comment\">// 每个方法执行三次</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"variable\">$count</span> = <span class=\"number\">0</span>; <span class=\"variable\">$count</span> &lt; <span class=\"number\">3</span>; <span class=\"variable\">$count</span> ++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 生成变量名 ： plan1start1</span></span><br><span class=\"line\">    <span class=\"variable\">$start</span> = Carbon::now()-&gt;getPreciseTimestamp();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"variable\">$i</span> = <span class=\"number\">0</span>; <span class=\"variable\">$i</span> &lt; <span class=\"number\">10000000</span>; <span class=\"variable\">$i</span> ++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"variable\">$integer</span> = rand(<span class=\"number\">1</span>, <span class=\"number\">999</span>);</span><br><span class=\"line\">        <span class=\"variable\">$result</span> = (<span class=\"keyword\">int</span>)(<span class=\"variable\">$integer</span> . <span class=\"string\">&#x27;000&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable\">$end</span> = Carbon::now()-&gt;getPreciseTimestamp();</span><br><span class=\"line\">    <span class=\"variable\">$data</span>[<span class=\"variable\">$count</span>][] = (<span class=\"variable\">$end</span> - <span class=\"variable\">$start</span>)/<span class=\"number\">1000000</span> . <span class=\"string\">&#x27;秒&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"variable\">$count</span> = <span class=\"number\">0</span>; <span class=\"variable\">$count</span> &lt; <span class=\"number\">3</span>; <span class=\"variable\">$count</span> ++) &#123;</span><br><span class=\"line\">    <span class=\"variable\">$start</span> = Carbon::now()-&gt;getPreciseTimestamp();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"variable\">$i</span> = <span class=\"number\">0</span>; <span class=\"variable\">$i</span> &lt; <span class=\"number\">10000000</span>; <span class=\"variable\">$i</span> ++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"variable\">$integer</span> = rand(<span class=\"number\">1</span>, <span class=\"number\">999</span>);</span><br><span class=\"line\">        <span class=\"variable\">$result</span> = <span class=\"variable\">$integer</span> * <span class=\"number\">1000</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable\">$end</span> = Carbon::now()-&gt;getPreciseTimestamp();</span><br><span class=\"line\">    <span class=\"variable\">$data</span>[<span class=\"variable\">$count</span>][] = (<span class=\"variable\">$end</span> - <span class=\"variable\">$start</span>)/<span class=\"number\">1000000</span> . <span class=\"string\">&#x27;秒&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"variable\">$count</span> = <span class=\"number\">0</span>; <span class=\"variable\">$count</span> &lt; <span class=\"number\">3</span>; <span class=\"variable\">$count</span> ++) &#123;</span><br><span class=\"line\">    <span class=\"variable\">$start</span> = Carbon::now()-&gt;getPreciseTimestamp();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"variable\">$i</span> = <span class=\"number\">0</span>; <span class=\"variable\">$i</span> &lt; <span class=\"number\">10000000</span>; <span class=\"variable\">$i</span> ++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"variable\">$integer</span> = rand(<span class=\"number\">1</span>, <span class=\"number\">999</span>);</span><br><span class=\"line\">        <span class=\"variable\">$result</span> = <span class=\"variable\">$integer</span> * <span class=\"number\">1024</span> - <span class=\"variable\">$integer</span> * <span class=\"number\">24</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable\">$end</span> = Carbon::now()-&gt;getPreciseTimestamp();</span><br><span class=\"line\">    <span class=\"variable\">$data</span>[<span class=\"variable\">$count</span>][] = (<span class=\"variable\">$end</span> - <span class=\"variable\">$start</span>)/<span class=\"number\">1000000</span> . <span class=\"string\">&#x27;秒&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">$this</span>-&gt;table(<span class=\"variable\">$headers</span>, <span class=\"variable\">$data</span>);</span><br></pre></td></tr></table></figure>\n\n<p>将这段代码运行多次后均得到一个较为稳定的结果：</p>\n<p><img src=\"/images/php/PhpExpandsPositiveIntegersByAFactorOf1000-image01.png\" alt=\"php多次运行结果\"></p>\n<p>看到这个结果，大大的疑问重新占领了我小小的脑瓜。<code>乘以 1024 再减去 乘以 24</code> 反而比<code>直接乘以 1000</code>慢一些。当我拿着这个结果去寻找大佬解决疑惑时，得到了他这样的回答：</p>\n<p>平时工作不够多是不是？还有空做这种试验？</p>\n<h2 id=\"对试验结果的思考\"><a href=\"#对试验结果的思考\" class=\"headerlink\" title=\"对试验结果的思考\"></a>对试验结果的思考</h2><p>暗戳戳鄙夷他一把，顺便把他在我心中的地位从<code>大佬</code>降格为<code>我的某个不愿透露姓名的普通朋友</code>。我继续了对这件事请的思考。</p>\n<p>在正整数后面拼接字符串 ‘000’，要把这个正整数转换为字符串，然后拼接字符串 ‘000’，之后再转回正整数。计算的复杂程度远超正整数的直接计算，时间上明显劣于后者，这点经过验证也毋庸置疑。</p>\n<p>但是我的某个不愿透露姓名的豆豆同学对<code>二进制</code>计算模式解释的同样头头是道。我学习的是<code>解释型语言 php</code>，这意味着有一群对代码理解达到骨灰级的玩家在我看不到的地方对<code>php</code>进行了大量的算法优化。而豆豆同学学习的是<code>编译型语言 C++</code>。是不是这种解释型语言的不同点，导致了本次运算结果的不同？</p>\n<p>所以我计划对这个问题进一步挖掘，将在下一篇博文『<a href=\"/golang/CompiledLanguageComputationOfMultiplication\">用计算证明：我远远低估了编译器</a>』中使用<code>编译型语言 golang</code>对这个课题再次进行讨论。</p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<h1 id=\"如何使用PHP最高效率的将一个正整数扩大一千倍？\"><a href=\"#如何使用PHP最高效率的将一个正整数扩大一千倍？\" class=\"headerlink\" title=\"如何使用PHP最高效率的将一个正整数扩大一千倍？\"></a>如何使用PHP最高效率的将一个正整数扩大一千倍？</h1><h2 id=\"方案制定\"><a href=\"#方案制定\" class=\"headerlink\" title=\"方案制定\"></a>方案制定</h2><p>如何最高效率的将一个正整数扩大一千倍？</p>\n<p>当这个问题被抛给人脑的时候，接受过优秀的九年义务教育的我们稍加思索就能给出一个调皮而又不失大师风范的答案：添三个零就行了~</p>\n<p>但是当这个问题交给程序员用代码解决的时候，问题就要从编程的角度去考虑。我作为<code>phper</code>第一时间想到的方案分别是</p>\n<ul>\n<li>方案1：在数字末尾粘连字符串 “000”</li>\n<li>方案2：将原数字简单的乘以 1000</li>\n</ul>\n<p>当我把这个问题丢给我的朋友的时候，他告诉我：<br>方案1肯定不行！你应该采用方案2，但是如果你足够鸡贼的话，你应该采用<code>正整数 X 1024 - 正整数 X 24</code>!<br>因为计算机是二进制，当你告诉他要乘以1000的时候，他会进行<code>正整数 X 512 + 正整数 X 256 + 正整数 X 128 + 正整数 X 128 + 正整数 X 64 + 正整数 X 32 + 正整数 X 8</code>，一直累加到凑齐 正整数的 1000 倍 为止。而运算<code>2的10次方</code>要比那一串加号更快接近结果。</p>\n<h2 id=\"实践出真知\"><a href=\"#实践出真知\" class=\"headerlink\" title=\"实践出真知\"></a>实践出真知</h2><p>大佬的这段话很快打动了我。为了践行大佬的真知，证明大佬的阐述对我犹如醍醐灌顶般点醒梦中人，我迅速写出了一小段方法，将一个随机正整数扩大1000倍的算法用三种不同的方法分别跑 一千万次，查看各个方法运行的效率</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用 laravel 的 Commands 实现</span></span><br><span class=\"line\"><span class=\"comment\">// 图表内容</span></span><br><span class=\"line\"><span class=\"variable\">$headers</span> = [<span class=\"string\">&#x27;次数&#x27;</span>, <span class=\"string\">&#x27;方案1：拼接法&#x27;</span>, <span class=\"string\">&#x27;方案2：乘1000&#x27;</span>, <span class=\"string\">&#x27;方案3：乘以 1024&#x27;</span>];</span><br><span class=\"line\"><span class=\"variable\">$data</span> = [</span><br><span class=\"line\">    [<span class=\"number\">0</span>=&gt;<span class=\"string\">&#x27;第一次&#x27;</span>],</span><br><span class=\"line\">    [<span class=\"number\">0</span>=&gt;<span class=\"string\">&#x27;第二次&#x27;</span>],</span><br><span class=\"line\">    [<span class=\"number\">0</span>=&gt;<span class=\"string\">&#x27;第三次&#x27;</span>]</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"comment\">// 每个方法执行三次</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"variable\">$count</span> = <span class=\"number\">0</span>; <span class=\"variable\">$count</span> &lt; <span class=\"number\">3</span>; <span class=\"variable\">$count</span> ++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 生成变量名 ： plan1start1</span></span><br><span class=\"line\">    <span class=\"variable\">$start</span> = Carbon::now()-&gt;getPreciseTimestamp();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"variable\">$i</span> = <span class=\"number\">0</span>; <span class=\"variable\">$i</span> &lt; <span class=\"number\">10000000</span>; <span class=\"variable\">$i</span> ++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"variable\">$integer</span> = rand(<span class=\"number\">1</span>, <span class=\"number\">999</span>);</span><br><span class=\"line\">        <span class=\"variable\">$result</span> = (<span class=\"keyword\">int</span>)(<span class=\"variable\">$integer</span> . <span class=\"string\">&#x27;000&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable\">$end</span> = Carbon::now()-&gt;getPreciseTimestamp();</span><br><span class=\"line\">    <span class=\"variable\">$data</span>[<span class=\"variable\">$count</span>][] = (<span class=\"variable\">$end</span> - <span class=\"variable\">$start</span>)/<span class=\"number\">1000000</span> . <span class=\"string\">&#x27;秒&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"variable\">$count</span> = <span class=\"number\">0</span>; <span class=\"variable\">$count</span> &lt; <span class=\"number\">3</span>; <span class=\"variable\">$count</span> ++) &#123;</span><br><span class=\"line\">    <span class=\"variable\">$start</span> = Carbon::now()-&gt;getPreciseTimestamp();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"variable\">$i</span> = <span class=\"number\">0</span>; <span class=\"variable\">$i</span> &lt; <span class=\"number\">10000000</span>; <span class=\"variable\">$i</span> ++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"variable\">$integer</span> = rand(<span class=\"number\">1</span>, <span class=\"number\">999</span>);</span><br><span class=\"line\">        <span class=\"variable\">$result</span> = <span class=\"variable\">$integer</span> * <span class=\"number\">1000</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable\">$end</span> = Carbon::now()-&gt;getPreciseTimestamp();</span><br><span class=\"line\">    <span class=\"variable\">$data</span>[<span class=\"variable\">$count</span>][] = (<span class=\"variable\">$end</span> - <span class=\"variable\">$start</span>)/<span class=\"number\">1000000</span> . <span class=\"string\">&#x27;秒&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"variable\">$count</span> = <span class=\"number\">0</span>; <span class=\"variable\">$count</span> &lt; <span class=\"number\">3</span>; <span class=\"variable\">$count</span> ++) &#123;</span><br><span class=\"line\">    <span class=\"variable\">$start</span> = Carbon::now()-&gt;getPreciseTimestamp();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"variable\">$i</span> = <span class=\"number\">0</span>; <span class=\"variable\">$i</span> &lt; <span class=\"number\">10000000</span>; <span class=\"variable\">$i</span> ++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"variable\">$integer</span> = rand(<span class=\"number\">1</span>, <span class=\"number\">999</span>);</span><br><span class=\"line\">        <span class=\"variable\">$result</span> = <span class=\"variable\">$integer</span> * <span class=\"number\">1024</span> - <span class=\"variable\">$integer</span> * <span class=\"number\">24</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable\">$end</span> = Carbon::now()-&gt;getPreciseTimestamp();</span><br><span class=\"line\">    <span class=\"variable\">$data</span>[<span class=\"variable\">$count</span>][] = (<span class=\"variable\">$end</span> - <span class=\"variable\">$start</span>)/<span class=\"number\">1000000</span> . <span class=\"string\">&#x27;秒&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">$this</span>-&gt;table(<span class=\"variable\">$headers</span>, <span class=\"variable\">$data</span>);</span><br></pre></td></tr></table></figure>\n\n<p>将这段代码运行多次后均得到一个较为稳定的结果：</p>\n<p><img src=\"/images/php/PhpExpandsPositiveIntegersByAFactorOf1000-image01.png\" alt=\"php多次运行结果\"></p>\n<p>看到这个结果，大大的疑问重新占领了我小小的脑瓜。<code>乘以 1024 再减去 乘以 24</code> 反而比<code>直接乘以 1000</code>慢一些。当我拿着这个结果去寻找大佬解决疑惑时，得到了他这样的回答：</p>\n<p>平时工作不够多是不是？还有空做这种试验？</p>\n<h2 id=\"对试验结果的思考\"><a href=\"#对试验结果的思考\" class=\"headerlink\" title=\"对试验结果的思考\"></a>对试验结果的思考</h2><p>暗戳戳鄙夷他一把，顺便把他在我心中的地位从<code>大佬</code>降格为<code>我的某个不愿透露姓名的普通朋友</code>。我继续了对这件事请的思考。</p>\n<p>在正整数后面拼接字符串 ‘000’，要把这个正整数转换为字符串，然后拼接字符串 ‘000’，之后再转回正整数。计算的复杂程度远超正整数的直接计算，时间上明显劣于后者，这点经过验证也毋庸置疑。</p>\n<p>但是我的某个不愿透露姓名的豆豆同学对<code>二进制</code>计算模式解释的同样头头是道。我学习的是<code>解释型语言 php</code>，这意味着有一群对代码理解达到骨灰级的玩家在我看不到的地方对<code>php</code>进行了大量的算法优化。而豆豆同学学习的是<code>编译型语言 C++</code>。是不是这种解释型语言的不同点，导致了本次运算结果的不同？</p>\n<p>所以我计划对这个问题进一步挖掘，将在下一篇博文『<a href=\"/golang/CompiledLanguageComputationOfMultiplication\">用计算证明：我远远低估了编译器</a>』中使用<code>编译型语言 golang</code>对这个课题再次进行讨论。</p>\n"},{"title":"Ubuntu 部署 LNMP 环境","description":"一篇文章，掌握 Ubuntu 部署 LNMP 环境全流程！要部署，看我就对了。","keywords":"Ubuntu, LNMP, PHP, MySQL, Redis, Nginx","top_img":"/images/ubuntu/UbuntuCover1.jpg","cover":"/images/ubuntu/UbuntuCover1.jpg","date":"2021-08-13T07:02:13.000Z","updated":"2021-08-13T07:02:13.000Z","_content":"# Ubuntu 20.04 搭建 lnmp 环境\n\n## 切换为 root 用户\n\n我们之后要进行大量 root 权限操作，提前切换用户会方便一些。\n\n```bash\nsudo su\n```\n\n## 查看当前系统的版本信息\n\n``` shell\nlsb_release -a\n```\n\n## 更新 apt 包源\n\n### 备份默认的源\n\n```bash\ncp /etc/apt/sources.list /etc/apt/sources.list.bak\n```\n\n### 修改为国内的阿里云镜像源\n\n```bash\nsed -i \"s/archive.ubuntu.com/mirrors.aliyun.com/g\" /etc/apt/sources.list\n```\n\n### 删除#开头的注释行\n\n```bash\nsed -i '/^#/d' /etc/apt/sources.list\n```\n\n### 添加 PHP 源\n\n```bash\napt install lsb-release ca-certificates apt-transport-https -y\nadd-apt-repository ppa:ondrej/php\n```\n\n### 更新 apt 源\n\n```bash\napt update\n```\n\n## MySQL 8.0\n\nUbuntu 20.04 已包含 mysql8.0的安装包，直接 apt 安装就好\n\n```bash\napt-get install mysql-server\n```\n\n### MySQL服务管理\n\n* 查看服务状态\n```bash\nservice mysql status\n```\n\n* 启动服务\n```bash\nservice mysql start\n```\n\n* 停止服务\n```bash\nservice mysql stop\n```\n\n* 重启服务\n```bash\nservice mysql restart\n```\n\n### 登录MySQL\n\n“我的 MySQL 初始账号和密码是什么？”\n\n关于这个问题每个系统上的每代 MySQL 都有自己的想法，Ubuntu20.04 也不例外。\n\n初始账户信息使用这条查看\n\n```bash\ncat /etc/mysql/debian.cnf\n```\n\n使用默认账户登录\n\n```bash\nmysql -u debian-sys-maint -p\n```\n\n### 修改 root 密码 方便使用\n\n```sql\nALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY \"password\";\n```\n\n{% note info flat%}\n其他授权操作查看[这篇博客](/mysql/MySQLCreateUsersAndAuthorization)\n{% endnote %}\n\n## PHP\n\n### 安装 PHP\n\n```bash\napt install php8.0\n```\n\n查看 PHP 版本 `php -v`\n\n### PHP 常用扩展\n\n```bash\napt install php8.0-mbstring php8.0-sqlite3 php8.0-redis php8.0-gd php8.0-fpm php8.0-curl php8.0-xml php8.0-mysql\n```\n\n## Composer\n\n### 进入安装包存放目录\n\n```bash\ncd /usr/src\n```\n\n### 下载安装脚本\n\n```bash\nphp -r \"copy('https://install.phpcomposer.com/installer', 'composer-setup.php');\"\n```\n\n### 执行安装过程\n\n```bash\nphp composer-setup.php\n```\n\n### 删除安装脚本\n\n```bash\nphp -r \"unlink('composer-setup.php');\"\n```\n\n### 移入运行目录\n\n```bash\nmv composer.phar /usr/local/bin/composer\n```\n\n### 查看 Composer 版本\n\n```bash\ncomposer --version\n```\n\n### 更换为阿里云服务\n\n```bash\ncomposer config -g repo.packagist composer https://mirrors.aliyun.com/composer/\n```\n\n## Nginx\n\n### 安装\n\nNginx 在默认的 Ubuntu 源仓库中可用。想要安装它，运行下面的命令：\n\n```bash\napt install nginx\n```\n\n### 查看服务状态\n\n```bash\nsystemctl status nginx\n```\n\n若报错`System has not been booted with systemd as init system (PID 1). Can't operate.`，可能使用的是 `SysV init` 命令。将 `systemctl status service_name` 改为 `service service_name status` 即可.\n\n```bash\nservice nginx status\n```\n\n### 子站点配置\n\n子站点配置文件统一放在 `/etc/nginx/conf.d/` 下\n\n用自己的配置替换下面的 域名 和 public 目录\n\n```vim\nserver {\n        listen 80;\n        listen [::]:80;\n\n        server_name 域名;\n\n        root public目录;\n        index index.php index.html index.htm index.nginx-debian.html;\n\n\n        # 允许上传大小\n        client_max_body_size 100M;\n\n        location / {\n                try_files $uri $uri/ =404;\n        }\n\n        location ~ \\.php$ {\n                include snippets/fastcgi-php.conf;\n                fastcgi_pass unix:/var/run/php/php8.0-fpm.sock;\n        }\n\n        if (!-e $request_filename)\n        {\n                rewrite ^/(.*)$ /index.php?/$1 last;\n                break;\n\n        }\n\n}\n```\n","source":"_posts/ubuntu/BuildLNMP.md","raw":"---\ntitle: Ubuntu 部署 LNMP 环境\ndescription: 一篇文章，掌握 Ubuntu 部署 LNMP 环境全流程！要部署，看我就对了。\nkeywords: Ubuntu, LNMP, PHP, MySQL, Redis, Nginx\ntop_img: /images/ubuntu/UbuntuCover1.jpg\ncover: /images/ubuntu/UbuntuCover1.jpg\ntags:\n  - Ubuntu\n  - 入门\ncategories:\n  - Ubuntu\ndate: 2021-08-13 15:02:13\nupdated: 2021-08-13 15:02:13\n---\n# Ubuntu 20.04 搭建 lnmp 环境\n\n## 切换为 root 用户\n\n我们之后要进行大量 root 权限操作，提前切换用户会方便一些。\n\n```bash\nsudo su\n```\n\n## 查看当前系统的版本信息\n\n``` shell\nlsb_release -a\n```\n\n## 更新 apt 包源\n\n### 备份默认的源\n\n```bash\ncp /etc/apt/sources.list /etc/apt/sources.list.bak\n```\n\n### 修改为国内的阿里云镜像源\n\n```bash\nsed -i \"s/archive.ubuntu.com/mirrors.aliyun.com/g\" /etc/apt/sources.list\n```\n\n### 删除#开头的注释行\n\n```bash\nsed -i '/^#/d' /etc/apt/sources.list\n```\n\n### 添加 PHP 源\n\n```bash\napt install lsb-release ca-certificates apt-transport-https -y\nadd-apt-repository ppa:ondrej/php\n```\n\n### 更新 apt 源\n\n```bash\napt update\n```\n\n## MySQL 8.0\n\nUbuntu 20.04 已包含 mysql8.0的安装包，直接 apt 安装就好\n\n```bash\napt-get install mysql-server\n```\n\n### MySQL服务管理\n\n* 查看服务状态\n```bash\nservice mysql status\n```\n\n* 启动服务\n```bash\nservice mysql start\n```\n\n* 停止服务\n```bash\nservice mysql stop\n```\n\n* 重启服务\n```bash\nservice mysql restart\n```\n\n### 登录MySQL\n\n“我的 MySQL 初始账号和密码是什么？”\n\n关于这个问题每个系统上的每代 MySQL 都有自己的想法，Ubuntu20.04 也不例外。\n\n初始账户信息使用这条查看\n\n```bash\ncat /etc/mysql/debian.cnf\n```\n\n使用默认账户登录\n\n```bash\nmysql -u debian-sys-maint -p\n```\n\n### 修改 root 密码 方便使用\n\n```sql\nALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY \"password\";\n```\n\n{% note info flat%}\n其他授权操作查看[这篇博客](/mysql/MySQLCreateUsersAndAuthorization)\n{% endnote %}\n\n## PHP\n\n### 安装 PHP\n\n```bash\napt install php8.0\n```\n\n查看 PHP 版本 `php -v`\n\n### PHP 常用扩展\n\n```bash\napt install php8.0-mbstring php8.0-sqlite3 php8.0-redis php8.0-gd php8.0-fpm php8.0-curl php8.0-xml php8.0-mysql\n```\n\n## Composer\n\n### 进入安装包存放目录\n\n```bash\ncd /usr/src\n```\n\n### 下载安装脚本\n\n```bash\nphp -r \"copy('https://install.phpcomposer.com/installer', 'composer-setup.php');\"\n```\n\n### 执行安装过程\n\n```bash\nphp composer-setup.php\n```\n\n### 删除安装脚本\n\n```bash\nphp -r \"unlink('composer-setup.php');\"\n```\n\n### 移入运行目录\n\n```bash\nmv composer.phar /usr/local/bin/composer\n```\n\n### 查看 Composer 版本\n\n```bash\ncomposer --version\n```\n\n### 更换为阿里云服务\n\n```bash\ncomposer config -g repo.packagist composer https://mirrors.aliyun.com/composer/\n```\n\n## Nginx\n\n### 安装\n\nNginx 在默认的 Ubuntu 源仓库中可用。想要安装它，运行下面的命令：\n\n```bash\napt install nginx\n```\n\n### 查看服务状态\n\n```bash\nsystemctl status nginx\n```\n\n若报错`System has not been booted with systemd as init system (PID 1). Can't operate.`，可能使用的是 `SysV init` 命令。将 `systemctl status service_name` 改为 `service service_name status` 即可.\n\n```bash\nservice nginx status\n```\n\n### 子站点配置\n\n子站点配置文件统一放在 `/etc/nginx/conf.d/` 下\n\n用自己的配置替换下面的 域名 和 public 目录\n\n```vim\nserver {\n        listen 80;\n        listen [::]:80;\n\n        server_name 域名;\n\n        root public目录;\n        index index.php index.html index.htm index.nginx-debian.html;\n\n\n        # 允许上传大小\n        client_max_body_size 100M;\n\n        location / {\n                try_files $uri $uri/ =404;\n        }\n\n        location ~ \\.php$ {\n                include snippets/fastcgi-php.conf;\n                fastcgi_pass unix:/var/run/php/php8.0-fpm.sock;\n        }\n\n        if (!-e $request_filename)\n        {\n                rewrite ^/(.*)$ /index.php?/$1 last;\n                break;\n\n        }\n\n}\n```\n","slug":"ubuntu/BuildLNMP","published":1,"_id":"cksa1rbxr001uz4u44sxx98vv","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Ubuntu-20-04-搭建-lnmp-环境\"><a href=\"#Ubuntu-20-04-搭建-lnmp-环境\" class=\"headerlink\" title=\"Ubuntu 20.04 搭建 lnmp 环境\"></a>Ubuntu 20.04 搭建 lnmp 环境</h1><h2 id=\"切换为-root-用户\"><a href=\"#切换为-root-用户\" class=\"headerlink\" title=\"切换为 root 用户\"></a>切换为 root 用户</h2><p>我们之后要进行大量 root 权限操作，提前切换用户会方便一些。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo su</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看当前系统的版本信息\"><a href=\"#查看当前系统的版本信息\" class=\"headerlink\" title=\"查看当前系统的版本信息\"></a>查看当前系统的版本信息</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">lsb_release -a</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"更新-apt-包源\"><a href=\"#更新-apt-包源\" class=\"headerlink\" title=\"更新 apt 包源\"></a>更新 apt 包源</h2><h3 id=\"备份默认的源\"><a href=\"#备份默认的源\" class=\"headerlink\" title=\"备份默认的源\"></a>备份默认的源</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改为国内的阿里云镜像源\"><a href=\"#修改为国内的阿里云镜像源\" class=\"headerlink\" title=\"修改为国内的阿里云镜像源\"></a>修改为国内的阿里云镜像源</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sed -i <span class=\"string\">&quot;s/archive.ubuntu.com/mirrors.aliyun.com/g&quot;</span> /etc/apt/sources.list</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除-开头的注释行\"><a href=\"#删除-开头的注释行\" class=\"headerlink\" title=\"删除#开头的注释行\"></a>删除#开头的注释行</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sed -i <span class=\"string\">&#x27;/^#/d&#x27;</span> /etc/apt/sources.list</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加-PHP-源\"><a href=\"#添加-PHP-源\" class=\"headerlink\" title=\"添加 PHP 源\"></a>添加 PHP 源</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">apt install lsb-release ca-certificates apt-transport-https -y</span><br><span class=\"line\">add-apt-repository ppa:ondrej/php</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"更新-apt-源\"><a href=\"#更新-apt-源\" class=\"headerlink\" title=\"更新 apt 源\"></a>更新 apt 源</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">apt update</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"MySQL-8-0\"><a href=\"#MySQL-8-0\" class=\"headerlink\" title=\"MySQL 8.0\"></a>MySQL 8.0</h2><p>Ubuntu 20.04 已包含 mysql8.0的安装包，直接 apt 安装就好</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">apt-get install mysql-server</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"MySQL服务管理\"><a href=\"#MySQL服务管理\" class=\"headerlink\" title=\"MySQL服务管理\"></a>MySQL服务管理</h3><ul>\n<li><p>查看服务状态</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">service mysql status</span><br></pre></td></tr></table></figure></li>\n<li><p>启动服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">service mysql start</span><br></pre></td></tr></table></figure></li>\n<li><p>停止服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">service mysql stop</span><br></pre></td></tr></table></figure></li>\n<li><p>重启服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">service mysql restart</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"登录MySQL\"><a href=\"#登录MySQL\" class=\"headerlink\" title=\"登录MySQL\"></a>登录MySQL</h3><p>“我的 MySQL 初始账号和密码是什么？”</p>\n<p>关于这个问题每个系统上的每代 MySQL 都有自己的想法，Ubuntu20.04 也不例外。</p>\n<p>初始账户信息使用这条查看</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat /etc/mysql/debian.cnf</span><br></pre></td></tr></table></figure>\n\n<p>使用默认账户登录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql -u debian-sys-maint -p</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改-root-密码-方便使用\"><a href=\"#修改-root-密码-方便使用\" class=\"headerlink\" title=\"修改 root 密码 方便使用\"></a>修改 root 密码 方便使用</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">USER</span> <span class=\"string\">&#x27;root&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> IDENTIFIED <span class=\"keyword\">WITH</span> mysql_native_password <span class=\"keyword\">BY</span> &quot;password&quot;;</span><br></pre></td></tr></table></figure>\n\n<div class=\"note info flat\"><p>其他授权操作查看<a href=\"/mysql/MySQLCreateUsersAndAuthorization\">这篇博客</a></p>\n</div>\n\n<h2 id=\"PHP\"><a href=\"#PHP\" class=\"headerlink\" title=\"PHP\"></a>PHP</h2><h3 id=\"安装-PHP\"><a href=\"#安装-PHP\" class=\"headerlink\" title=\"安装 PHP\"></a>安装 PHP</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">apt install php8.0</span><br></pre></td></tr></table></figure>\n\n<p>查看 PHP 版本 <code>php -v</code></p>\n<h3 id=\"PHP-常用扩展\"><a href=\"#PHP-常用扩展\" class=\"headerlink\" title=\"PHP 常用扩展\"></a>PHP 常用扩展</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">apt install php8.0-mbstring php8.0-sqlite3 php8.0-redis php8.0-gd php8.0-fpm php8.0-curl php8.0-xml php8.0-mysql</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Composer\"><a href=\"#Composer\" class=\"headerlink\" title=\"Composer\"></a>Composer</h2><h3 id=\"进入安装包存放目录\"><a href=\"#进入安装包存放目录\" class=\"headerlink\" title=\"进入安装包存放目录\"></a>进入安装包存放目录</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/src</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"下载安装脚本\"><a href=\"#下载安装脚本\" class=\"headerlink\" title=\"下载安装脚本\"></a>下载安装脚本</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">php -r <span class=\"string\">&quot;copy(&#x27;https://install.phpcomposer.com/installer&#x27;, &#x27;composer-setup.php&#x27;);&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"执行安装过程\"><a href=\"#执行安装过程\" class=\"headerlink\" title=\"执行安装过程\"></a>执行安装过程</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">php composer-setup.php</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除安装脚本\"><a href=\"#删除安装脚本\" class=\"headerlink\" title=\"删除安装脚本\"></a>删除安装脚本</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">php -r <span class=\"string\">&quot;unlink(&#x27;composer-setup.php&#x27;);&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"移入运行目录\"><a href=\"#移入运行目录\" class=\"headerlink\" title=\"移入运行目录\"></a>移入运行目录</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mv composer.phar /usr/<span class=\"built_in\">local</span>/bin/composer</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看-Composer-版本\"><a href=\"#查看-Composer-版本\" class=\"headerlink\" title=\"查看 Composer 版本\"></a>查看 Composer 版本</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">composer --version</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"更换为阿里云服务\"><a href=\"#更换为阿里云服务\" class=\"headerlink\" title=\"更换为阿里云服务\"></a>更换为阿里云服务</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>Nginx 在默认的 Ubuntu 源仓库中可用。想要安装它，运行下面的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">apt install nginx</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看服务状态\"><a href=\"#查看服务状态\" class=\"headerlink\" title=\"查看服务状态\"></a>查看服务状态</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl status nginx</span><br></pre></td></tr></table></figure>\n\n<p>若报错<code>System has not been booted with systemd as init system (PID 1). Can&#39;t operate.</code>，可能使用的是 <code>SysV init</code> 命令。将 <code>systemctl status service_name</code> 改为 <code>service service_name status</code> 即可.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">service nginx status</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"子站点配置\"><a href=\"#子站点配置\" class=\"headerlink\" title=\"子站点配置\"></a>子站点配置</h3><p>子站点配置文件统一放在 <code>/etc/nginx/conf.d/</code> 下</p>\n<p>用自己的配置替换下面的 域名 和 public 目录</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">        listen <span class=\"number\">80</span>;</span><br><span class=\"line\">        listen [::]:<span class=\"number\">80</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        server_name 域名;</span><br><span class=\"line\"></span><br><span class=\"line\">        root public目录;</span><br><span class=\"line\">        <span class=\"built_in\">index</span> <span class=\"built_in\">index</span>.php <span class=\"built_in\">index</span>.html <span class=\"built_in\">index</span>.htm <span class=\"built_in\">index</span>.nginx-debian.html;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        # 允许上传大小</span><br><span class=\"line\">        client_max_body_size <span class=\"number\">100</span>M;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">                try_files $uri $uri/ =<span class=\"number\">404</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        location ~ \\.php$ &#123;</span><br><span class=\"line\">                include snippets/fastcgi-php.<span class=\"keyword\">conf</span>;</span><br><span class=\"line\">                fastcgi_pass unix:/var/run/php/php8.<span class=\"number\">0</span>-fpm.sock;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!-<span class=\"keyword\">e</span> $request_filename)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                rewrite ^/(.*)$ /<span class=\"built_in\">index</span>.php?/$<span class=\"number\">1</span> <span class=\"keyword\">last</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<h1 id=\"Ubuntu-20-04-搭建-lnmp-环境\"><a href=\"#Ubuntu-20-04-搭建-lnmp-环境\" class=\"headerlink\" title=\"Ubuntu 20.04 搭建 lnmp 环境\"></a>Ubuntu 20.04 搭建 lnmp 环境</h1><h2 id=\"切换为-root-用户\"><a href=\"#切换为-root-用户\" class=\"headerlink\" title=\"切换为 root 用户\"></a>切换为 root 用户</h2><p>我们之后要进行大量 root 权限操作，提前切换用户会方便一些。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo su</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看当前系统的版本信息\"><a href=\"#查看当前系统的版本信息\" class=\"headerlink\" title=\"查看当前系统的版本信息\"></a>查看当前系统的版本信息</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">lsb_release -a</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"更新-apt-包源\"><a href=\"#更新-apt-包源\" class=\"headerlink\" title=\"更新 apt 包源\"></a>更新 apt 包源</h2><h3 id=\"备份默认的源\"><a href=\"#备份默认的源\" class=\"headerlink\" title=\"备份默认的源\"></a>备份默认的源</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改为国内的阿里云镜像源\"><a href=\"#修改为国内的阿里云镜像源\" class=\"headerlink\" title=\"修改为国内的阿里云镜像源\"></a>修改为国内的阿里云镜像源</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sed -i <span class=\"string\">&quot;s/archive.ubuntu.com/mirrors.aliyun.com/g&quot;</span> /etc/apt/sources.list</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除-开头的注释行\"><a href=\"#删除-开头的注释行\" class=\"headerlink\" title=\"删除#开头的注释行\"></a>删除#开头的注释行</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sed -i <span class=\"string\">&#x27;/^#/d&#x27;</span> /etc/apt/sources.list</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加-PHP-源\"><a href=\"#添加-PHP-源\" class=\"headerlink\" title=\"添加 PHP 源\"></a>添加 PHP 源</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">apt install lsb-release ca-certificates apt-transport-https -y</span><br><span class=\"line\">add-apt-repository ppa:ondrej/php</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"更新-apt-源\"><a href=\"#更新-apt-源\" class=\"headerlink\" title=\"更新 apt 源\"></a>更新 apt 源</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">apt update</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"MySQL-8-0\"><a href=\"#MySQL-8-0\" class=\"headerlink\" title=\"MySQL 8.0\"></a>MySQL 8.0</h2><p>Ubuntu 20.04 已包含 mysql8.0的安装包，直接 apt 安装就好</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">apt-get install mysql-server</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"MySQL服务管理\"><a href=\"#MySQL服务管理\" class=\"headerlink\" title=\"MySQL服务管理\"></a>MySQL服务管理</h3><ul>\n<li><p>查看服务状态</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">service mysql status</span><br></pre></td></tr></table></figure></li>\n<li><p>启动服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">service mysql start</span><br></pre></td></tr></table></figure></li>\n<li><p>停止服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">service mysql stop</span><br></pre></td></tr></table></figure></li>\n<li><p>重启服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">service mysql restart</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"登录MySQL\"><a href=\"#登录MySQL\" class=\"headerlink\" title=\"登录MySQL\"></a>登录MySQL</h3><p>“我的 MySQL 初始账号和密码是什么？”</p>\n<p>关于这个问题每个系统上的每代 MySQL 都有自己的想法，Ubuntu20.04 也不例外。</p>\n<p>初始账户信息使用这条查看</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat /etc/mysql/debian.cnf</span><br></pre></td></tr></table></figure>\n\n<p>使用默认账户登录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql -u debian-sys-maint -p</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改-root-密码-方便使用\"><a href=\"#修改-root-密码-方便使用\" class=\"headerlink\" title=\"修改 root 密码 方便使用\"></a>修改 root 密码 方便使用</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">USER</span> <span class=\"string\">&#x27;root&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> IDENTIFIED <span class=\"keyword\">WITH</span> mysql_native_password <span class=\"keyword\">BY</span> &quot;password&quot;;</span><br></pre></td></tr></table></figure>\n\n<div class=\"note info flat\"><p>其他授权操作查看<a href=\"/mysql/MySQLCreateUsersAndAuthorization\">这篇博客</a></p>\n</div>\n\n<h2 id=\"PHP\"><a href=\"#PHP\" class=\"headerlink\" title=\"PHP\"></a>PHP</h2><h3 id=\"安装-PHP\"><a href=\"#安装-PHP\" class=\"headerlink\" title=\"安装 PHP\"></a>安装 PHP</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">apt install php8.0</span><br></pre></td></tr></table></figure>\n\n<p>查看 PHP 版本 <code>php -v</code></p>\n<h3 id=\"PHP-常用扩展\"><a href=\"#PHP-常用扩展\" class=\"headerlink\" title=\"PHP 常用扩展\"></a>PHP 常用扩展</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">apt install php8.0-mbstring php8.0-sqlite3 php8.0-redis php8.0-gd php8.0-fpm php8.0-curl php8.0-xml php8.0-mysql</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Composer\"><a href=\"#Composer\" class=\"headerlink\" title=\"Composer\"></a>Composer</h2><h3 id=\"进入安装包存放目录\"><a href=\"#进入安装包存放目录\" class=\"headerlink\" title=\"进入安装包存放目录\"></a>进入安装包存放目录</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/src</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"下载安装脚本\"><a href=\"#下载安装脚本\" class=\"headerlink\" title=\"下载安装脚本\"></a>下载安装脚本</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">php -r <span class=\"string\">&quot;copy(&#x27;https://install.phpcomposer.com/installer&#x27;, &#x27;composer-setup.php&#x27;);&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"执行安装过程\"><a href=\"#执行安装过程\" class=\"headerlink\" title=\"执行安装过程\"></a>执行安装过程</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">php composer-setup.php</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除安装脚本\"><a href=\"#删除安装脚本\" class=\"headerlink\" title=\"删除安装脚本\"></a>删除安装脚本</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">php -r <span class=\"string\">&quot;unlink(&#x27;composer-setup.php&#x27;);&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"移入运行目录\"><a href=\"#移入运行目录\" class=\"headerlink\" title=\"移入运行目录\"></a>移入运行目录</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mv composer.phar /usr/<span class=\"built_in\">local</span>/bin/composer</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看-Composer-版本\"><a href=\"#查看-Composer-版本\" class=\"headerlink\" title=\"查看 Composer 版本\"></a>查看 Composer 版本</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">composer --version</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"更换为阿里云服务\"><a href=\"#更换为阿里云服务\" class=\"headerlink\" title=\"更换为阿里云服务\"></a>更换为阿里云服务</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>Nginx 在默认的 Ubuntu 源仓库中可用。想要安装它，运行下面的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">apt install nginx</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看服务状态\"><a href=\"#查看服务状态\" class=\"headerlink\" title=\"查看服务状态\"></a>查看服务状态</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl status nginx</span><br></pre></td></tr></table></figure>\n\n<p>若报错<code>System has not been booted with systemd as init system (PID 1). Can&#39;t operate.</code>，可能使用的是 <code>SysV init</code> 命令。将 <code>systemctl status service_name</code> 改为 <code>service service_name status</code> 即可.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">service nginx status</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"子站点配置\"><a href=\"#子站点配置\" class=\"headerlink\" title=\"子站点配置\"></a>子站点配置</h3><p>子站点配置文件统一放在 <code>/etc/nginx/conf.d/</code> 下</p>\n<p>用自己的配置替换下面的 域名 和 public 目录</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">        listen <span class=\"number\">80</span>;</span><br><span class=\"line\">        listen [::]:<span class=\"number\">80</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        server_name 域名;</span><br><span class=\"line\"></span><br><span class=\"line\">        root public目录;</span><br><span class=\"line\">        <span class=\"built_in\">index</span> <span class=\"built_in\">index</span>.php <span class=\"built_in\">index</span>.html <span class=\"built_in\">index</span>.htm <span class=\"built_in\">index</span>.nginx-debian.html;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        # 允许上传大小</span><br><span class=\"line\">        client_max_body_size <span class=\"number\">100</span>M;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">                try_files $uri $uri/ =<span class=\"number\">404</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        location ~ \\.php$ &#123;</span><br><span class=\"line\">                include snippets/fastcgi-php.<span class=\"keyword\">conf</span>;</span><br><span class=\"line\">                fastcgi_pass unix:/var/run/php/php8.<span class=\"number\">0</span>-fpm.sock;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!-<span class=\"keyword\">e</span> $request_filename)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                rewrite ^/(.*)$ /<span class=\"built_in\">index</span>.php?/$<span class=\"number\">1</span> <span class=\"keyword\">last</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"阿里云冷门 API/SDK 对接心得","description":"当我们需要使用那种网上缺少讨论，出现问题难以搜索到解决方案，难以获得讨论的 SDK ，如何依靠有限的经验解决当前问题。","keywords":"阿里云, SDK, API, 媒体转码服务","top_img":"/images/three-party/ThreePartyCover1.jpg","cover":"/images/three-party/ThreePartyCover1.jpg","date":"2021-08-13T05:51:17.000Z","updated":"2021-08-13T05:51:17.000Z","_content":"# 阿里云冷门 API/SDK 对接心得\n<p align=\"right\">以『媒体转码服务』为例</p>\n\n> 这里提到的`冷门`指的是网上缺少讨论，出现问题难以搜索到解决方案，难以获得讨论的`SDK`，如何依靠有限的经验解决当前问题。\n\n首先要树立一个信心：\n* `阿里爸爸`的产品这么香，肯定不是某个不负责任的小编用两张网图编出来了个`api`接口。\n* 就算是产品再不人性化，也是经过了严格的评定和测试流程才挂到`阿里云产品`中 ~~ㅤ骗钱ㅤ~~ 造福大众的的。\n* 获取制作这个产品的时候阿里云投入的产品力量不足，或许开发者由于某些思维惯性，没有在文档中写入一些细节，或者我们的知识、经验积累还不够，没办法第一时间理解某些参数的含义。\n* 但是只要挖掘到阿里云在编写文档时的盲点，理解了调用方式，最终总能完成对接，给自己的技能库添砖加瓦。\n\n## 与官方文档的第一步交锋\n* 当我们尝试从官方途径寻找文档的时候，第一步总是能找到阿里云的[『帮助文档』](https://help.aliyun.com/)，对于很多热门产品，尤其是如`OSS`般的当红炸子鸡，赚钱小能手，这类产品的帮助文档已经被打磨的足够完善。\n* 可惜今天的例子[『媒体转码服务』](https://help.aliyun.com/document_detail/29226.htm?spm=a2c4g.11186623.2.21.708d5ee7dUeKfs#reference-ksb-vdt-x2b)可能还不在此列。当你点击入我提供的链接时，聪明的你可能很快就会发现一个问题：接口地址是什么？\n* 当然我们不能冤枉阿里云帮助文档，他们在媒体服务中还是提供了接口地址的，接口地址位于 >媒体处理 >API参考 >调用方式 >请求结构 >服务地域。如果要我们每个人都像这样去寻找每一个信息，那就要求我们每个人都要把整篇文档大致读一遍。这样就增加了很多的学习成本。\n* 回到[『媒体转码服务』](https://help.aliyun.com/document_detail/29226.htm?spm=a2c4g.11186623.2.21.708d5ee7dUeKfs#reference-ksb-vdt-x2b)的帮助文档继续往下读，你会发现接口还需要我们提供一个`管道ID`和`模板ID`。读到这里我们已经意识到了问题的严重性：不要逃课了，先把整篇文档通读一遍吧，求求你了。\n* 很抗拒，通读太累了。那就挑一些关键的信息看一看。比如`API概述`，`调用方式`之类的。这时候我们再顺手翻一翻控制台，能得到阿里云提供的一个固定的`管道ID`，使用控制台手动转码，能从他们的调用方式里获得公共的默认的`模板ID`。有点儿像是玩解密RPG？\n* OK，信息够了，但也没完全够，这些接口还要`验签`。看到验签我终于坚持不下去了，继续逃课，选择使用他们封装好的`SDK`做开发。\n\n## SDK：逃课好帮手\n* 文档中的`SDK 参考`要我们看[『安装』](https://help.aliyun.com/document_detail/55742.htm?spm=a2c4g.11186623.2.4.17e257b2tQX5uH#concept-k5b-322-z2b)，安装文档给了我们一个`github 仓库`,和一行`require_once`代码。\n* 感谢`composer`为我们养成了懒惰的引用习惯，看到`require_once`我不自觉要寻找`composer`版本的引用。但网上查到的都是抱怨阿里云自己没做`composer`，和个人自己做的`composer`版本。\n* 这还是在`2021年4月18日`的搜索结果，在4天后的22号，情况已经不同了。\n* 跳过自己改`composer`的步骤，后来我在查询资料的时候发现阿里云悄悄推出了新的`SDK平台`[『阿里云OpenApi』](https://next.api.aliyun.com/home)。这两天好像正在排查旧SDK的引用，准备全面引入新的平台上。\n* 但是不要高兴的太早，等真正细读下来才发现这个平台对我们的`冷门SDK`还是没有足够的支持。只告诉你要用哪个方法调用这一步，参数要怎么填，是什么格式，什么含义，依旧一头雾水。\n\n## SDK不完善，只能靠API文档来补课。\n* 某些SDK的相关示例中，有标识为社区提供，但明显不是社区写的输入参数示意，提到了参数格式，参数含义，参数详情。当我们点击[『参数详情』](https://help.aliyun.com/document_detail/29253.html?spm=api-workbench.CodeSample%20Detail%20Page.0.0.11b91e0fMEAi59)时，API 文档：没想到吧，我又回来啦！\n* SDK 初始化中要填写一个参数 `$config->endpoint`。一开始我在这里填了`oss`的`endpoint`，`SDK`直接报错404，内容大概是`it is not a map`，翻阅多层源代码才知道，这个`endpoint`就是接口调用地址，也就是之前我们在`API文档`中找到的`服务地域`。\n* 我充分利用以上多方面数据来源，终于将`SDK`跑了起来。这一步常常会遇到数据格式不正确的报错。这时候要结合文档，示例，将参数传递方式在以下多种格式中选择合适的格式使用。\n\n```php\n[\n    // 数组\n    \"input\" => [\n        'Bucket'    => config('aliyun.oss.bucket'),\n        'Location'    => config('aliyun.mts.location'),\n        'Object'    => urlencode($url),\n    ],\n    // json 对象\n    \"input\" => json_encode([\n        'Bucket'    => config('aliyun.oss.bucket'),\n        'Location'    => config('aliyun.mts.location'),\n        'Object'    => urlencode($url),\n    ]),\n    // json 数组\n    \"input\" => json_encode([\n        [\n            'Bucket'    => config('aliyun.oss.bucket'),\n            'Location'    => config('aliyun.mts.location'),\n            'Object'    => urlencode($url),\n        ],\n        [\n            'Bucket'    => config('aliyun.oss.bucket'),\n            'Location'    => config('aliyun.mts.location'),\n            'Object'    => urlencode($url),\n        ],\n    ]),\n]\n\n```","source":"_posts/three-party/AliyunSDK.md","raw":"---\ntitle: 阿里云冷门 API/SDK 对接心得\ndescription: 当我们需要使用那种网上缺少讨论，出现问题难以搜索到解决方案，难以获得讨论的 SDK ，如何依靠有限的经验解决当前问题。\nkeywords: 阿里云, SDK, API, 媒体转码服务\ntop_img: /images/three-party/ThreePartyCover1.jpg\ncover: /images/three-party/ThreePartyCover1.jpg\ntags:\n  - ThreeParty\n  - 探讨\ncategories:\n  - ThreeParty\ndate: 2021-08-13 13:51:17\nupdated: 2021-08-13 13:51:17\n---\n# 阿里云冷门 API/SDK 对接心得\n<p align=\"right\">以『媒体转码服务』为例</p>\n\n> 这里提到的`冷门`指的是网上缺少讨论，出现问题难以搜索到解决方案，难以获得讨论的`SDK`，如何依靠有限的经验解决当前问题。\n\n首先要树立一个信心：\n* `阿里爸爸`的产品这么香，肯定不是某个不负责任的小编用两张网图编出来了个`api`接口。\n* 就算是产品再不人性化，也是经过了严格的评定和测试流程才挂到`阿里云产品`中 ~~ㅤ骗钱ㅤ~~ 造福大众的的。\n* 获取制作这个产品的时候阿里云投入的产品力量不足，或许开发者由于某些思维惯性，没有在文档中写入一些细节，或者我们的知识、经验积累还不够，没办法第一时间理解某些参数的含义。\n* 但是只要挖掘到阿里云在编写文档时的盲点，理解了调用方式，最终总能完成对接，给自己的技能库添砖加瓦。\n\n## 与官方文档的第一步交锋\n* 当我们尝试从官方途径寻找文档的时候，第一步总是能找到阿里云的[『帮助文档』](https://help.aliyun.com/)，对于很多热门产品，尤其是如`OSS`般的当红炸子鸡，赚钱小能手，这类产品的帮助文档已经被打磨的足够完善。\n* 可惜今天的例子[『媒体转码服务』](https://help.aliyun.com/document_detail/29226.htm?spm=a2c4g.11186623.2.21.708d5ee7dUeKfs#reference-ksb-vdt-x2b)可能还不在此列。当你点击入我提供的链接时，聪明的你可能很快就会发现一个问题：接口地址是什么？\n* 当然我们不能冤枉阿里云帮助文档，他们在媒体服务中还是提供了接口地址的，接口地址位于 >媒体处理 >API参考 >调用方式 >请求结构 >服务地域。如果要我们每个人都像这样去寻找每一个信息，那就要求我们每个人都要把整篇文档大致读一遍。这样就增加了很多的学习成本。\n* 回到[『媒体转码服务』](https://help.aliyun.com/document_detail/29226.htm?spm=a2c4g.11186623.2.21.708d5ee7dUeKfs#reference-ksb-vdt-x2b)的帮助文档继续往下读，你会发现接口还需要我们提供一个`管道ID`和`模板ID`。读到这里我们已经意识到了问题的严重性：不要逃课了，先把整篇文档通读一遍吧，求求你了。\n* 很抗拒，通读太累了。那就挑一些关键的信息看一看。比如`API概述`，`调用方式`之类的。这时候我们再顺手翻一翻控制台，能得到阿里云提供的一个固定的`管道ID`，使用控制台手动转码，能从他们的调用方式里获得公共的默认的`模板ID`。有点儿像是玩解密RPG？\n* OK，信息够了，但也没完全够，这些接口还要`验签`。看到验签我终于坚持不下去了，继续逃课，选择使用他们封装好的`SDK`做开发。\n\n## SDK：逃课好帮手\n* 文档中的`SDK 参考`要我们看[『安装』](https://help.aliyun.com/document_detail/55742.htm?spm=a2c4g.11186623.2.4.17e257b2tQX5uH#concept-k5b-322-z2b)，安装文档给了我们一个`github 仓库`,和一行`require_once`代码。\n* 感谢`composer`为我们养成了懒惰的引用习惯，看到`require_once`我不自觉要寻找`composer`版本的引用。但网上查到的都是抱怨阿里云自己没做`composer`，和个人自己做的`composer`版本。\n* 这还是在`2021年4月18日`的搜索结果，在4天后的22号，情况已经不同了。\n* 跳过自己改`composer`的步骤，后来我在查询资料的时候发现阿里云悄悄推出了新的`SDK平台`[『阿里云OpenApi』](https://next.api.aliyun.com/home)。这两天好像正在排查旧SDK的引用，准备全面引入新的平台上。\n* 但是不要高兴的太早，等真正细读下来才发现这个平台对我们的`冷门SDK`还是没有足够的支持。只告诉你要用哪个方法调用这一步，参数要怎么填，是什么格式，什么含义，依旧一头雾水。\n\n## SDK不完善，只能靠API文档来补课。\n* 某些SDK的相关示例中，有标识为社区提供，但明显不是社区写的输入参数示意，提到了参数格式，参数含义，参数详情。当我们点击[『参数详情』](https://help.aliyun.com/document_detail/29253.html?spm=api-workbench.CodeSample%20Detail%20Page.0.0.11b91e0fMEAi59)时，API 文档：没想到吧，我又回来啦！\n* SDK 初始化中要填写一个参数 `$config->endpoint`。一开始我在这里填了`oss`的`endpoint`，`SDK`直接报错404，内容大概是`it is not a map`，翻阅多层源代码才知道，这个`endpoint`就是接口调用地址，也就是之前我们在`API文档`中找到的`服务地域`。\n* 我充分利用以上多方面数据来源，终于将`SDK`跑了起来。这一步常常会遇到数据格式不正确的报错。这时候要结合文档，示例，将参数传递方式在以下多种格式中选择合适的格式使用。\n\n```php\n[\n    // 数组\n    \"input\" => [\n        'Bucket'    => config('aliyun.oss.bucket'),\n        'Location'    => config('aliyun.mts.location'),\n        'Object'    => urlencode($url),\n    ],\n    // json 对象\n    \"input\" => json_encode([\n        'Bucket'    => config('aliyun.oss.bucket'),\n        'Location'    => config('aliyun.mts.location'),\n        'Object'    => urlencode($url),\n    ]),\n    // json 数组\n    \"input\" => json_encode([\n        [\n            'Bucket'    => config('aliyun.oss.bucket'),\n            'Location'    => config('aliyun.mts.location'),\n            'Object'    => urlencode($url),\n        ],\n        [\n            'Bucket'    => config('aliyun.oss.bucket'),\n            'Location'    => config('aliyun.mts.location'),\n            'Object'    => urlencode($url),\n        ],\n    ]),\n]\n\n```","slug":"three-party/AliyunSDK","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cksa1rbxs001wz4u46laj4dci","content":"<h1 id=\"阿里云冷门-API-SDK-对接心得\"><a href=\"#阿里云冷门-API-SDK-对接心得\" class=\"headerlink\" title=\"阿里云冷门 API/SDK 对接心得\"></a>阿里云冷门 API/SDK 对接心得</h1><p align=\"right\">以『媒体转码服务』为例</p>\n\n<blockquote>\n<p>这里提到的<code>冷门</code>指的是网上缺少讨论，出现问题难以搜索到解决方案，难以获得讨论的<code>SDK</code>，如何依靠有限的经验解决当前问题。</p>\n</blockquote>\n<p>首先要树立一个信心：</p>\n<ul>\n<li><code>阿里爸爸</code>的产品这么香，肯定不是某个不负责任的小编用两张网图编出来了个<code>api</code>接口。</li>\n<li>就算是产品再不人性化，也是经过了严格的评定和测试流程才挂到<code>阿里云产品</code>中 <del>ㅤ骗钱ㅤ</del> 造福大众的的。</li>\n<li>获取制作这个产品的时候阿里云投入的产品力量不足，或许开发者由于某些思维惯性，没有在文档中写入一些细节，或者我们的知识、经验积累还不够，没办法第一时间理解某些参数的含义。</li>\n<li>但是只要挖掘到阿里云在编写文档时的盲点，理解了调用方式，最终总能完成对接，给自己的技能库添砖加瓦。</li>\n</ul>\n<h2 id=\"与官方文档的第一步交锋\"><a href=\"#与官方文档的第一步交锋\" class=\"headerlink\" title=\"与官方文档的第一步交锋\"></a>与官方文档的第一步交锋</h2><ul>\n<li>当我们尝试从官方途径寻找文档的时候，第一步总是能找到阿里云的<a href=\"https://help.aliyun.com/\">『帮助文档』</a>，对于很多热门产品，尤其是如<code>OSS</code>般的当红炸子鸡，赚钱小能手，这类产品的帮助文档已经被打磨的足够完善。</li>\n<li>可惜今天的例子<a href=\"https://help.aliyun.com/document_detail/29226.htm?spm=a2c4g.11186623.2.21.708d5ee7dUeKfs#reference-ksb-vdt-x2b\">『媒体转码服务』</a>可能还不在此列。当你点击入我提供的链接时，聪明的你可能很快就会发现一个问题：接口地址是什么？</li>\n<li>当然我们不能冤枉阿里云帮助文档，他们在媒体服务中还是提供了接口地址的，接口地址位于 &gt;媒体处理 &gt;API参考 &gt;调用方式 &gt;请求结构 &gt;服务地域。如果要我们每个人都像这样去寻找每一个信息，那就要求我们每个人都要把整篇文档大致读一遍。这样就增加了很多的学习成本。</li>\n<li>回到<a href=\"https://help.aliyun.com/document_detail/29226.htm?spm=a2c4g.11186623.2.21.708d5ee7dUeKfs#reference-ksb-vdt-x2b\">『媒体转码服务』</a>的帮助文档继续往下读，你会发现接口还需要我们提供一个<code>管道ID</code>和<code>模板ID</code>。读到这里我们已经意识到了问题的严重性：不要逃课了，先把整篇文档通读一遍吧，求求你了。</li>\n<li>很抗拒，通读太累了。那就挑一些关键的信息看一看。比如<code>API概述</code>，<code>调用方式</code>之类的。这时候我们再顺手翻一翻控制台，能得到阿里云提供的一个固定的<code>管道ID</code>，使用控制台手动转码，能从他们的调用方式里获得公共的默认的<code>模板ID</code>。有点儿像是玩解密RPG？</li>\n<li>OK，信息够了，但也没完全够，这些接口还要<code>验签</code>。看到验签我终于坚持不下去了，继续逃课，选择使用他们封装好的<code>SDK</code>做开发。</li>\n</ul>\n<h2 id=\"SDK：逃课好帮手\"><a href=\"#SDK：逃课好帮手\" class=\"headerlink\" title=\"SDK：逃课好帮手\"></a>SDK：逃课好帮手</h2><ul>\n<li>文档中的<code>SDK 参考</code>要我们看<a href=\"https://help.aliyun.com/document_detail/55742.htm?spm=a2c4g.11186623.2.4.17e257b2tQX5uH#concept-k5b-322-z2b\">『安装』</a>，安装文档给了我们一个<code>github 仓库</code>,和一行<code>require_once</code>代码。</li>\n<li>感谢<code>composer</code>为我们养成了懒惰的引用习惯，看到<code>require_once</code>我不自觉要寻找<code>composer</code>版本的引用。但网上查到的都是抱怨阿里云自己没做<code>composer</code>，和个人自己做的<code>composer</code>版本。</li>\n<li>这还是在<code>2021年4月18日</code>的搜索结果，在4天后的22号，情况已经不同了。</li>\n<li>跳过自己改<code>composer</code>的步骤，后来我在查询资料的时候发现阿里云悄悄推出了新的<code>SDK平台</code><a href=\"https://next.api.aliyun.com/home\">『阿里云OpenApi』</a>。这两天好像正在排查旧SDK的引用，准备全面引入新的平台上。</li>\n<li>但是不要高兴的太早，等真正细读下来才发现这个平台对我们的<code>冷门SDK</code>还是没有足够的支持。只告诉你要用哪个方法调用这一步，参数要怎么填，是什么格式，什么含义，依旧一头雾水。</li>\n</ul>\n<h2 id=\"SDK不完善，只能靠API文档来补课。\"><a href=\"#SDK不完善，只能靠API文档来补课。\" class=\"headerlink\" title=\"SDK不完善，只能靠API文档来补课。\"></a>SDK不完善，只能靠API文档来补课。</h2><ul>\n<li>某些SDK的相关示例中，有标识为社区提供，但明显不是社区写的输入参数示意，提到了参数格式，参数含义，参数详情。当我们点击<a href=\"https://help.aliyun.com/document_detail/29253.html?spm=api-workbench.CodeSample%20Detail%20Page.0.0.11b91e0fMEAi59\">『参数详情』</a>时，API 文档：没想到吧，我又回来啦！</li>\n<li>SDK 初始化中要填写一个参数 <code>$config-&gt;endpoint</code>。一开始我在这里填了<code>oss</code>的<code>endpoint</code>，<code>SDK</code>直接报错404，内容大概是<code>it is not a map</code>，翻阅多层源代码才知道，这个<code>endpoint</code>就是接口调用地址，也就是之前我们在<code>API文档</code>中找到的<code>服务地域</code>。</li>\n<li>我充分利用以上多方面数据来源，终于将<code>SDK</code>跑了起来。这一步常常会遇到数据格式不正确的报错。这时候要结合文档，示例，将参数传递方式在以下多种格式中选择合适的格式使用。</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    <span class=\"comment\">// 数组</span></span><br><span class=\"line\">    <span class=\"string\">&quot;input&quot;</span> =&gt; [</span><br><span class=\"line\">        <span class=\"string\">&#x27;Bucket&#x27;</span>    =&gt; config(<span class=\"string\">&#x27;aliyun.oss.bucket&#x27;</span>),</span><br><span class=\"line\">        <span class=\"string\">&#x27;Location&#x27;</span>    =&gt; config(<span class=\"string\">&#x27;aliyun.mts.location&#x27;</span>),</span><br><span class=\"line\">        <span class=\"string\">&#x27;Object&#x27;</span>    =&gt; urlencode(<span class=\"variable\">$url</span>),</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"comment\">// json 对象</span></span><br><span class=\"line\">    <span class=\"string\">&quot;input&quot;</span> =&gt; json_encode([</span><br><span class=\"line\">        <span class=\"string\">&#x27;Bucket&#x27;</span>    =&gt; config(<span class=\"string\">&#x27;aliyun.oss.bucket&#x27;</span>),</span><br><span class=\"line\">        <span class=\"string\">&#x27;Location&#x27;</span>    =&gt; config(<span class=\"string\">&#x27;aliyun.mts.location&#x27;</span>),</span><br><span class=\"line\">        <span class=\"string\">&#x27;Object&#x27;</span>    =&gt; urlencode(<span class=\"variable\">$url</span>),</span><br><span class=\"line\">    ]),</span><br><span class=\"line\">    <span class=\"comment\">// json 数组</span></span><br><span class=\"line\">    <span class=\"string\">&quot;input&quot;</span> =&gt; json_encode([</span><br><span class=\"line\">        [</span><br><span class=\"line\">            <span class=\"string\">&#x27;Bucket&#x27;</span>    =&gt; config(<span class=\"string\">&#x27;aliyun.oss.bucket&#x27;</span>),</span><br><span class=\"line\">            <span class=\"string\">&#x27;Location&#x27;</span>    =&gt; config(<span class=\"string\">&#x27;aliyun.mts.location&#x27;</span>),</span><br><span class=\"line\">            <span class=\"string\">&#x27;Object&#x27;</span>    =&gt; urlencode(<span class=\"variable\">$url</span>),</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        [</span><br><span class=\"line\">            <span class=\"string\">&#x27;Bucket&#x27;</span>    =&gt; config(<span class=\"string\">&#x27;aliyun.oss.bucket&#x27;</span>),</span><br><span class=\"line\">            <span class=\"string\">&#x27;Location&#x27;</span>    =&gt; config(<span class=\"string\">&#x27;aliyun.mts.location&#x27;</span>),</span><br><span class=\"line\">            <span class=\"string\">&#x27;Object&#x27;</span>    =&gt; urlencode(<span class=\"variable\">$url</span>),</span><br><span class=\"line\">        ],</span><br><span class=\"line\">    ]),</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<h1 id=\"阿里云冷门-API-SDK-对接心得\"><a href=\"#阿里云冷门-API-SDK-对接心得\" class=\"headerlink\" title=\"阿里云冷门 API/SDK 对接心得\"></a>阿里云冷门 API/SDK 对接心得</h1><p align=\"right\">以『媒体转码服务』为例</p>\n\n<blockquote>\n<p>这里提到的<code>冷门</code>指的是网上缺少讨论，出现问题难以搜索到解决方案，难以获得讨论的<code>SDK</code>，如何依靠有限的经验解决当前问题。</p>\n</blockquote>\n<p>首先要树立一个信心：</p>\n<ul>\n<li><code>阿里爸爸</code>的产品这么香，肯定不是某个不负责任的小编用两张网图编出来了个<code>api</code>接口。</li>\n<li>就算是产品再不人性化，也是经过了严格的评定和测试流程才挂到<code>阿里云产品</code>中 <del>ㅤ骗钱ㅤ</del> 造福大众的的。</li>\n<li>获取制作这个产品的时候阿里云投入的产品力量不足，或许开发者由于某些思维惯性，没有在文档中写入一些细节，或者我们的知识、经验积累还不够，没办法第一时间理解某些参数的含义。</li>\n<li>但是只要挖掘到阿里云在编写文档时的盲点，理解了调用方式，最终总能完成对接，给自己的技能库添砖加瓦。</li>\n</ul>\n<h2 id=\"与官方文档的第一步交锋\"><a href=\"#与官方文档的第一步交锋\" class=\"headerlink\" title=\"与官方文档的第一步交锋\"></a>与官方文档的第一步交锋</h2><ul>\n<li>当我们尝试从官方途径寻找文档的时候，第一步总是能找到阿里云的<a href=\"https://help.aliyun.com/\">『帮助文档』</a>，对于很多热门产品，尤其是如<code>OSS</code>般的当红炸子鸡，赚钱小能手，这类产品的帮助文档已经被打磨的足够完善。</li>\n<li>可惜今天的例子<a href=\"https://help.aliyun.com/document_detail/29226.htm?spm=a2c4g.11186623.2.21.708d5ee7dUeKfs#reference-ksb-vdt-x2b\">『媒体转码服务』</a>可能还不在此列。当你点击入我提供的链接时，聪明的你可能很快就会发现一个问题：接口地址是什么？</li>\n<li>当然我们不能冤枉阿里云帮助文档，他们在媒体服务中还是提供了接口地址的，接口地址位于 &gt;媒体处理 &gt;API参考 &gt;调用方式 &gt;请求结构 &gt;服务地域。如果要我们每个人都像这样去寻找每一个信息，那就要求我们每个人都要把整篇文档大致读一遍。这样就增加了很多的学习成本。</li>\n<li>回到<a href=\"https://help.aliyun.com/document_detail/29226.htm?spm=a2c4g.11186623.2.21.708d5ee7dUeKfs#reference-ksb-vdt-x2b\">『媒体转码服务』</a>的帮助文档继续往下读，你会发现接口还需要我们提供一个<code>管道ID</code>和<code>模板ID</code>。读到这里我们已经意识到了问题的严重性：不要逃课了，先把整篇文档通读一遍吧，求求你了。</li>\n<li>很抗拒，通读太累了。那就挑一些关键的信息看一看。比如<code>API概述</code>，<code>调用方式</code>之类的。这时候我们再顺手翻一翻控制台，能得到阿里云提供的一个固定的<code>管道ID</code>，使用控制台手动转码，能从他们的调用方式里获得公共的默认的<code>模板ID</code>。有点儿像是玩解密RPG？</li>\n<li>OK，信息够了，但也没完全够，这些接口还要<code>验签</code>。看到验签我终于坚持不下去了，继续逃课，选择使用他们封装好的<code>SDK</code>做开发。</li>\n</ul>\n<h2 id=\"SDK：逃课好帮手\"><a href=\"#SDK：逃课好帮手\" class=\"headerlink\" title=\"SDK：逃课好帮手\"></a>SDK：逃课好帮手</h2><ul>\n<li>文档中的<code>SDK 参考</code>要我们看<a href=\"https://help.aliyun.com/document_detail/55742.htm?spm=a2c4g.11186623.2.4.17e257b2tQX5uH#concept-k5b-322-z2b\">『安装』</a>，安装文档给了我们一个<code>github 仓库</code>,和一行<code>require_once</code>代码。</li>\n<li>感谢<code>composer</code>为我们养成了懒惰的引用习惯，看到<code>require_once</code>我不自觉要寻找<code>composer</code>版本的引用。但网上查到的都是抱怨阿里云自己没做<code>composer</code>，和个人自己做的<code>composer</code>版本。</li>\n<li>这还是在<code>2021年4月18日</code>的搜索结果，在4天后的22号，情况已经不同了。</li>\n<li>跳过自己改<code>composer</code>的步骤，后来我在查询资料的时候发现阿里云悄悄推出了新的<code>SDK平台</code><a href=\"https://next.api.aliyun.com/home\">『阿里云OpenApi』</a>。这两天好像正在排查旧SDK的引用，准备全面引入新的平台上。</li>\n<li>但是不要高兴的太早，等真正细读下来才发现这个平台对我们的<code>冷门SDK</code>还是没有足够的支持。只告诉你要用哪个方法调用这一步，参数要怎么填，是什么格式，什么含义，依旧一头雾水。</li>\n</ul>\n<h2 id=\"SDK不完善，只能靠API文档来补课。\"><a href=\"#SDK不完善，只能靠API文档来补课。\" class=\"headerlink\" title=\"SDK不完善，只能靠API文档来补课。\"></a>SDK不完善，只能靠API文档来补课。</h2><ul>\n<li>某些SDK的相关示例中，有标识为社区提供，但明显不是社区写的输入参数示意，提到了参数格式，参数含义，参数详情。当我们点击<a href=\"https://help.aliyun.com/document_detail/29253.html?spm=api-workbench.CodeSample%20Detail%20Page.0.0.11b91e0fMEAi59\">『参数详情』</a>时，API 文档：没想到吧，我又回来啦！</li>\n<li>SDK 初始化中要填写一个参数 <code>$config-&gt;endpoint</code>。一开始我在这里填了<code>oss</code>的<code>endpoint</code>，<code>SDK</code>直接报错404，内容大概是<code>it is not a map</code>，翻阅多层源代码才知道，这个<code>endpoint</code>就是接口调用地址，也就是之前我们在<code>API文档</code>中找到的<code>服务地域</code>。</li>\n<li>我充分利用以上多方面数据来源，终于将<code>SDK</code>跑了起来。这一步常常会遇到数据格式不正确的报错。这时候要结合文档，示例，将参数传递方式在以下多种格式中选择合适的格式使用。</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    <span class=\"comment\">// 数组</span></span><br><span class=\"line\">    <span class=\"string\">&quot;input&quot;</span> =&gt; [</span><br><span class=\"line\">        <span class=\"string\">&#x27;Bucket&#x27;</span>    =&gt; config(<span class=\"string\">&#x27;aliyun.oss.bucket&#x27;</span>),</span><br><span class=\"line\">        <span class=\"string\">&#x27;Location&#x27;</span>    =&gt; config(<span class=\"string\">&#x27;aliyun.mts.location&#x27;</span>),</span><br><span class=\"line\">        <span class=\"string\">&#x27;Object&#x27;</span>    =&gt; urlencode(<span class=\"variable\">$url</span>),</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"comment\">// json 对象</span></span><br><span class=\"line\">    <span class=\"string\">&quot;input&quot;</span> =&gt; json_encode([</span><br><span class=\"line\">        <span class=\"string\">&#x27;Bucket&#x27;</span>    =&gt; config(<span class=\"string\">&#x27;aliyun.oss.bucket&#x27;</span>),</span><br><span class=\"line\">        <span class=\"string\">&#x27;Location&#x27;</span>    =&gt; config(<span class=\"string\">&#x27;aliyun.mts.location&#x27;</span>),</span><br><span class=\"line\">        <span class=\"string\">&#x27;Object&#x27;</span>    =&gt; urlencode(<span class=\"variable\">$url</span>),</span><br><span class=\"line\">    ]),</span><br><span class=\"line\">    <span class=\"comment\">// json 数组</span></span><br><span class=\"line\">    <span class=\"string\">&quot;input&quot;</span> =&gt; json_encode([</span><br><span class=\"line\">        [</span><br><span class=\"line\">            <span class=\"string\">&#x27;Bucket&#x27;</span>    =&gt; config(<span class=\"string\">&#x27;aliyun.oss.bucket&#x27;</span>),</span><br><span class=\"line\">            <span class=\"string\">&#x27;Location&#x27;</span>    =&gt; config(<span class=\"string\">&#x27;aliyun.mts.location&#x27;</span>),</span><br><span class=\"line\">            <span class=\"string\">&#x27;Object&#x27;</span>    =&gt; urlencode(<span class=\"variable\">$url</span>),</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        [</span><br><span class=\"line\">            <span class=\"string\">&#x27;Bucket&#x27;</span>    =&gt; config(<span class=\"string\">&#x27;aliyun.oss.bucket&#x27;</span>),</span><br><span class=\"line\">            <span class=\"string\">&#x27;Location&#x27;</span>    =&gt; config(<span class=\"string\">&#x27;aliyun.mts.location&#x27;</span>),</span><br><span class=\"line\">            <span class=\"string\">&#x27;Object&#x27;</span>    =&gt; urlencode(<span class=\"variable\">$url</span>),</span><br><span class=\"line\">        ],</span><br><span class=\"line\">    ]),</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"Sentry 部署","description":"简单来讲，Sentry 可以监控线上项目，将每一个报错上报，整理，主动推送给你的邮箱。如果你恰巧需要这样一个功能，那选 Sentry 准没错。","keywords":"Sentry, 部署, 接入, Docker, Python,","top_img":"/images/three-party/ThreePartyCover2.png","cover":"/images/three-party/ThreePartyCover2.png","date":"2021-08-13T06:46:17.000Z","updated":"2021-08-13T06:46:17.000Z","swiper_index":4,"swiper_desc":"果你恰巧需要一个将每个报错上报，整理，主动推送给你的功能，那选 Sentry 准没错。","swiper_cover":"/images/three-party/ThreePartyCover2.png","_content":"# Sentry 部署\n\n## 什么是 Sentry? 我为什么要使用它？\n简单来讲，`Sentry`可以监控线上项目，将每一个报错上报，整理，主动推送给你的邮箱。\n\n如果你恰巧需要这样一个功能，那选`Sentry`准没错。至于`Sentry`其他更高级的功能，可以等入门之后慢慢了解。\n\n## Sentry 使用途径\n`Sentry`可以自建服务，也可以采用官方提供的服务。官方提供的服务有免费的有收费的。以下是各个途径的功能对比。\n\n<table style=\"text-align:center;\">\n<thead>\n<tr>\n<td style=\"width:300px\">功能列表</td><td style=\"width:100px\">自建服务</td><td style=\"width:100px\">免费版</td><td style=\"width:100px\">团队版</td><td style=\"width:100px\">商业版</td>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>多个项目管理</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td>\n</tr>\n<tr>\n<td>监控报错</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td>\n</tr>\n<tr>\n<td>邮件通知</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td>\n</tr>\n<tr>\n<td>开通子账户</td><td style=\"color:green\">√</td><td style=\"color:red\">×</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td>\n</tr>\n<tr>\n<td>一个月以上数据保存</td><td style=\"color:green\">√</td><td style=\"color:red\">×</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td>\n</tr>\n<tr>\n<td>作为插件接入其他管理平台</td><td style=\"color:red\">×</td><td style=\"color:red\">×</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td>\n</tr>\n<tr>\n<td>更多花里胡哨的统计</td><td style=\"color:red\">×</td><td style=\"color:red\">×</td><td style=\"color:red\">×</td><td style=\"color:green\">√</td>\n</tr>\n</tbody>\n</table>\n\n### 官方服务\n官方服务到 [官网(https://sentry.io/signup)](https://sentry.io/signup) 注册一个账号即可使用。\n### 自建服务\n部署 Sentry 有两种方式。`Docker` 与 `Python`。\n* `Docker` 部署复杂程度低，但对硬件要求高。最新版最低需要`4核8G`，历史版本最低内存也需要`2400M`。\n* `Python` 部署复杂程度较高，对硬件要求低。\n\n可以视情况选择合适的自建方式。\n\n## 使用 Docker 部署 Sentry\n\n{% note warning flat %}\n自建 Sentry 服务吃力不讨好，Docker 需要太高的配置，Python 又存在学习门槛。如果仅仅为了使用 Sentry，我建议使用官方服务。\n如果官方的免费版无法满足使用需求，可以考虑使用我的另一个开源产品： GGT Sentry White ，结合钉钉机器人，提供报错信息的分发和报错信息日志功能。\n{% endnote %}\n\n### Docker 一键式部署\nSentry 官方提供一键式部署 Sentry，只需要克隆 github 上的脚本即可。\n```bash\ngit clone https://github.com/getsentry/onpremise\n```\n若需要部署 2400M 大小内存限制的 Sentry，可以克隆历史版本。\n```bash\ngit clone https://github.com/getsentry/onpremise/tree/20.12.1\n```\n克隆完成后进入目录，运行脚本 install.sh 即可使用。\n\n## 使用 Python 部署 Sentry\n\n### 必备环境\n* Python3\n* 关系型数据库（PostgreSQL）\n* 内存型数据库（Redis）\n* 进程守护（supervisor）\n\n### 更新 apt 源\n\n* 先复制备份原文件\n* 然后修改为国内的阿里云镜像源\n* 删除开头的 # 注释\n* 更新 apt 源\n```bash\ncp /etc/apt/sources.list /etc/apt/sources.list.bak\nsed -i \"s/archive.ubuntu.com/mirrors.aliyun.com/g\" /etc/apt/sources.list\nsed -i '/^#/d' /etc/apt/sources.list\napt update\n```\n\n\n### 安装 PostgreSQL\n#### 安装\n```bash\napt-get install postgresql\n```\n#### 配置\n```bash\nvim /etc/postgresql/12/main/pg_hba.conf\n```\n将配置文件翻到最后，这里保存着各自连接方式，授权和鉴权。将\n```\nhost    all   all   127.0.0.1/32    md5\n```\n一行最后的`md5`改为`trust`，意为`信任localhost所有指令`\n\n#### 创建数据库\n* 切换到 postgres 用户，以使用 PostgreSQL\n  ```bash\n  sudo -i -u postgres\n  ```\n* 创建数据\n  ```bash\n  createdb sentry\n  ```\n* 进入数据库\n\n{% note warning %}\n在 Sentry 部署中，我们并不需要进入 sentry 数据库，之后查看数据也有其他数据库查看工具。\n{% endnote %}\n\n  ```bash\n  psql sentry\n  ```\n\n### 安装 Redis\n\n```bash\napt-get install redis\n```\n\n### 安装 virtualenv\n`virtualenv` 是 `python` 用来部署独立环境的工具，类似于虚拟机，在`virtualenv`中部署的项目将独立于主服务。\n#### 安装\n```bash\npip3 install virtualenv\n```\n#### 使用\n* 创建文件夹\n  ```bash\n  mkdir /var/www\n  ````\n* 创建独立环境\n  ```bash\n  cd /var/www\n  virtualenv sentryEnv\n  ```\n* 进入环境\n  ```bash\n  cd sentryEnv\n  source bin/activate\n  ```\n* 更新\n  ```bash\n  bin/python -m pip install --upgrade pip\n  ```\n* 退出环境\n\n{% note warning %}\nPython 部署 Sentry 的接下来全部指令均在 virtualenv 中运行，如非必要，不用退出。\n{% endnote %}\n\n  ```bash\n  deactivate\n  ```\n\n### 安装 Sentry 前的基础环境\n\n#### libxml2-dev\n* 更新索引\n  ```bash\n  apt-get update\n  ```\n* 安装\n  ```bash\n  apt-get install libxml2-dev\n  ```\n\n#### libxmlsec1-dev\n* ubuntu 20.04 libxmlsec1-dev 暂时无法通过 apt-get 安装，需要先安装一个安装程序 `aptitude`\n  ```bash\n  apt-get install aptitude\n  ```\n* 安装\n\n{% note warning flat %}\n`aptitude` 提供多种子依赖的安装模式，但是模式1并不能将 `libxmlsec1-dev` 的全部依赖安装完毕。所以在执行下面命令时一定要记得：第一次选择 Y/n/... 时要选择 n，第二次和第三次选择 Y\n{% endnote %}\n\n  ```bash\n  aptitude install libxmlsec1-dev\n  ```\n\n#### libxmlsec1-openssl\n```bash\napt-get install libxmlsec1-openssl\n```  \n\n#### pkg-config\n```bash\napt-get install pkg-config\n```\n\n### 千呼万唤始出来，安装 Sentry\n#### 安装\n```bash\npip install -U sentry\n```\n\n#### 修改BUG\n\n* 在 Python 部署 21.6.3 版本的 Sentry 时存在一个类型错误需要修改。\n```bash\nvim /var/www/sentryEnv/lib/python3.8/site-packages/dataclasses.py\n```\n* 查找错误\n```vim\n/typing._ClassVar\n```\n* 按`i`，修改为`typing.ClassVar`\n\n#### 初始化\n```bash\nsentry init\nsentry upgrade\n```\n\n### 安装 supervisor\n#### 安装\n```bash\npip install supervisor\n```\n#### 配置\n```bash\nvim /etc/supervisor/conf.d/sentry.conf\n```\n写入如下内容\n```vim\n[program:sentry-web]\ndirectory=/usr/local/lib/python3.8/dist-packages/sentry/\nenvironment=SENTRY_CONF=\"~/.sentry\"\ncommand=sentry run web\nautostart=true\nautorestart=true\nredirect_stderr=true\nstdout_logfile=/var/log/sentry/sentry-web.log\nstderr_logfile=/var/log/sentry/sentry-web.log\n\n[program:sentry-worker]\ndirectory=/usr/local/lib/python3.8/dist-packages/sentry/\nenvironment=SENTRY_CONF=\"~/.sentry\"\ncommand=sentry run worker\nautostart=true\nautorestart=true\nredirect_stderr=true\nstdout_logfile=/var/log/sentry/sentry-worker.log\nstderr_logfile=/var/log/sentry/sentry-worker.log\n\n[program:sentry-cron]\ndirectory=/usr/local/lib/python3.8/dist-packages/sentry/\nenvironment=SENTRY_CONF=\"~/.sentry\"\ncommand=sentry run cron\nautostart=true\nautorestart=true\nredirect_stderr=true\nstdout_logfile=/var/log/sentry/sentry-cron.log\nstderr_logfile=/var/log/sentry/sentry-cron.log\n```\n\n#### 使用\n```bash\n# 查看所有进程的状态\nsupervisorctl status\n# 停止all\nsupervisorctl stop all\n# 启动all\nsupervisorctl start all\n# 重启\nsupervisorctl restart\n# 配置文件修改后使用该命令加载新的配置\nsupervisorctl update\n# 重新启动配置中的所有程序\nsupervisorctl reload\n```","source":"_posts/three-party/SentryBuild.md","raw":"---\ntitle: Sentry 部署\ndescription: 简单来讲，Sentry 可以监控线上项目，将每一个报错上报，整理，主动推送给你的邮箱。如果你恰巧需要这样一个功能，那选 Sentry 准没错。\nkeywords: Sentry, 部署, 接入, Docker, Python,\ntop_img: /images/three-party/ThreePartyCover2.png\ncover: /images/three-party/ThreePartyCover2.png\ntags:\n  - ThreeParty\n  - 入门\ncategories:\n  - ThreeParty\ndate: 2021-08-13 14:46:17\nupdated: 2021-08-13 14:46:17\nswiper_index: 4\nswiper_desc: 果你恰巧需要一个将每个报错上报，整理，主动推送给你的功能，那选 Sentry 准没错。\nswiper_cover: /images/three-party/ThreePartyCover2.png\n---\n# Sentry 部署\n\n## 什么是 Sentry? 我为什么要使用它？\n简单来讲，`Sentry`可以监控线上项目，将每一个报错上报，整理，主动推送给你的邮箱。\n\n如果你恰巧需要这样一个功能，那选`Sentry`准没错。至于`Sentry`其他更高级的功能，可以等入门之后慢慢了解。\n\n## Sentry 使用途径\n`Sentry`可以自建服务，也可以采用官方提供的服务。官方提供的服务有免费的有收费的。以下是各个途径的功能对比。\n\n<table style=\"text-align:center;\">\n<thead>\n<tr>\n<td style=\"width:300px\">功能列表</td><td style=\"width:100px\">自建服务</td><td style=\"width:100px\">免费版</td><td style=\"width:100px\">团队版</td><td style=\"width:100px\">商业版</td>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>多个项目管理</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td>\n</tr>\n<tr>\n<td>监控报错</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td>\n</tr>\n<tr>\n<td>邮件通知</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td>\n</tr>\n<tr>\n<td>开通子账户</td><td style=\"color:green\">√</td><td style=\"color:red\">×</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td>\n</tr>\n<tr>\n<td>一个月以上数据保存</td><td style=\"color:green\">√</td><td style=\"color:red\">×</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td>\n</tr>\n<tr>\n<td>作为插件接入其他管理平台</td><td style=\"color:red\">×</td><td style=\"color:red\">×</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td>\n</tr>\n<tr>\n<td>更多花里胡哨的统计</td><td style=\"color:red\">×</td><td style=\"color:red\">×</td><td style=\"color:red\">×</td><td style=\"color:green\">√</td>\n</tr>\n</tbody>\n</table>\n\n### 官方服务\n官方服务到 [官网(https://sentry.io/signup)](https://sentry.io/signup) 注册一个账号即可使用。\n### 自建服务\n部署 Sentry 有两种方式。`Docker` 与 `Python`。\n* `Docker` 部署复杂程度低，但对硬件要求高。最新版最低需要`4核8G`，历史版本最低内存也需要`2400M`。\n* `Python` 部署复杂程度较高，对硬件要求低。\n\n可以视情况选择合适的自建方式。\n\n## 使用 Docker 部署 Sentry\n\n{% note warning flat %}\n自建 Sentry 服务吃力不讨好，Docker 需要太高的配置，Python 又存在学习门槛。如果仅仅为了使用 Sentry，我建议使用官方服务。\n如果官方的免费版无法满足使用需求，可以考虑使用我的另一个开源产品： GGT Sentry White ，结合钉钉机器人，提供报错信息的分发和报错信息日志功能。\n{% endnote %}\n\n### Docker 一键式部署\nSentry 官方提供一键式部署 Sentry，只需要克隆 github 上的脚本即可。\n```bash\ngit clone https://github.com/getsentry/onpremise\n```\n若需要部署 2400M 大小内存限制的 Sentry，可以克隆历史版本。\n```bash\ngit clone https://github.com/getsentry/onpremise/tree/20.12.1\n```\n克隆完成后进入目录，运行脚本 install.sh 即可使用。\n\n## 使用 Python 部署 Sentry\n\n### 必备环境\n* Python3\n* 关系型数据库（PostgreSQL）\n* 内存型数据库（Redis）\n* 进程守护（supervisor）\n\n### 更新 apt 源\n\n* 先复制备份原文件\n* 然后修改为国内的阿里云镜像源\n* 删除开头的 # 注释\n* 更新 apt 源\n```bash\ncp /etc/apt/sources.list /etc/apt/sources.list.bak\nsed -i \"s/archive.ubuntu.com/mirrors.aliyun.com/g\" /etc/apt/sources.list\nsed -i '/^#/d' /etc/apt/sources.list\napt update\n```\n\n\n### 安装 PostgreSQL\n#### 安装\n```bash\napt-get install postgresql\n```\n#### 配置\n```bash\nvim /etc/postgresql/12/main/pg_hba.conf\n```\n将配置文件翻到最后，这里保存着各自连接方式，授权和鉴权。将\n```\nhost    all   all   127.0.0.1/32    md5\n```\n一行最后的`md5`改为`trust`，意为`信任localhost所有指令`\n\n#### 创建数据库\n* 切换到 postgres 用户，以使用 PostgreSQL\n  ```bash\n  sudo -i -u postgres\n  ```\n* 创建数据\n  ```bash\n  createdb sentry\n  ```\n* 进入数据库\n\n{% note warning %}\n在 Sentry 部署中，我们并不需要进入 sentry 数据库，之后查看数据也有其他数据库查看工具。\n{% endnote %}\n\n  ```bash\n  psql sentry\n  ```\n\n### 安装 Redis\n\n```bash\napt-get install redis\n```\n\n### 安装 virtualenv\n`virtualenv` 是 `python` 用来部署独立环境的工具，类似于虚拟机，在`virtualenv`中部署的项目将独立于主服务。\n#### 安装\n```bash\npip3 install virtualenv\n```\n#### 使用\n* 创建文件夹\n  ```bash\n  mkdir /var/www\n  ````\n* 创建独立环境\n  ```bash\n  cd /var/www\n  virtualenv sentryEnv\n  ```\n* 进入环境\n  ```bash\n  cd sentryEnv\n  source bin/activate\n  ```\n* 更新\n  ```bash\n  bin/python -m pip install --upgrade pip\n  ```\n* 退出环境\n\n{% note warning %}\nPython 部署 Sentry 的接下来全部指令均在 virtualenv 中运行，如非必要，不用退出。\n{% endnote %}\n\n  ```bash\n  deactivate\n  ```\n\n### 安装 Sentry 前的基础环境\n\n#### libxml2-dev\n* 更新索引\n  ```bash\n  apt-get update\n  ```\n* 安装\n  ```bash\n  apt-get install libxml2-dev\n  ```\n\n#### libxmlsec1-dev\n* ubuntu 20.04 libxmlsec1-dev 暂时无法通过 apt-get 安装，需要先安装一个安装程序 `aptitude`\n  ```bash\n  apt-get install aptitude\n  ```\n* 安装\n\n{% note warning flat %}\n`aptitude` 提供多种子依赖的安装模式，但是模式1并不能将 `libxmlsec1-dev` 的全部依赖安装完毕。所以在执行下面命令时一定要记得：第一次选择 Y/n/... 时要选择 n，第二次和第三次选择 Y\n{% endnote %}\n\n  ```bash\n  aptitude install libxmlsec1-dev\n  ```\n\n#### libxmlsec1-openssl\n```bash\napt-get install libxmlsec1-openssl\n```  \n\n#### pkg-config\n```bash\napt-get install pkg-config\n```\n\n### 千呼万唤始出来，安装 Sentry\n#### 安装\n```bash\npip install -U sentry\n```\n\n#### 修改BUG\n\n* 在 Python 部署 21.6.3 版本的 Sentry 时存在一个类型错误需要修改。\n```bash\nvim /var/www/sentryEnv/lib/python3.8/site-packages/dataclasses.py\n```\n* 查找错误\n```vim\n/typing._ClassVar\n```\n* 按`i`，修改为`typing.ClassVar`\n\n#### 初始化\n```bash\nsentry init\nsentry upgrade\n```\n\n### 安装 supervisor\n#### 安装\n```bash\npip install supervisor\n```\n#### 配置\n```bash\nvim /etc/supervisor/conf.d/sentry.conf\n```\n写入如下内容\n```vim\n[program:sentry-web]\ndirectory=/usr/local/lib/python3.8/dist-packages/sentry/\nenvironment=SENTRY_CONF=\"~/.sentry\"\ncommand=sentry run web\nautostart=true\nautorestart=true\nredirect_stderr=true\nstdout_logfile=/var/log/sentry/sentry-web.log\nstderr_logfile=/var/log/sentry/sentry-web.log\n\n[program:sentry-worker]\ndirectory=/usr/local/lib/python3.8/dist-packages/sentry/\nenvironment=SENTRY_CONF=\"~/.sentry\"\ncommand=sentry run worker\nautostart=true\nautorestart=true\nredirect_stderr=true\nstdout_logfile=/var/log/sentry/sentry-worker.log\nstderr_logfile=/var/log/sentry/sentry-worker.log\n\n[program:sentry-cron]\ndirectory=/usr/local/lib/python3.8/dist-packages/sentry/\nenvironment=SENTRY_CONF=\"~/.sentry\"\ncommand=sentry run cron\nautostart=true\nautorestart=true\nredirect_stderr=true\nstdout_logfile=/var/log/sentry/sentry-cron.log\nstderr_logfile=/var/log/sentry/sentry-cron.log\n```\n\n#### 使用\n```bash\n# 查看所有进程的状态\nsupervisorctl status\n# 停止all\nsupervisorctl stop all\n# 启动all\nsupervisorctl start all\n# 重启\nsupervisorctl restart\n# 配置文件修改后使用该命令加载新的配置\nsupervisorctl update\n# 重新启动配置中的所有程序\nsupervisorctl reload\n```","slug":"three-party/SentryBuild","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cksa1rbxt0020z4u4c9cj1tzq","content":"<h1 id=\"Sentry-部署\"><a href=\"#Sentry-部署\" class=\"headerlink\" title=\"Sentry 部署\"></a>Sentry 部署</h1><h2 id=\"什么是-Sentry-我为什么要使用它？\"><a href=\"#什么是-Sentry-我为什么要使用它？\" class=\"headerlink\" title=\"什么是 Sentry? 我为什么要使用它？\"></a>什么是 Sentry? 我为什么要使用它？</h2><p>简单来讲，<code>Sentry</code>可以监控线上项目，将每一个报错上报，整理，主动推送给你的邮箱。</p>\n<p>如果你恰巧需要这样一个功能，那选<code>Sentry</code>准没错。至于<code>Sentry</code>其他更高级的功能，可以等入门之后慢慢了解。</p>\n<h2 id=\"Sentry-使用途径\"><a href=\"#Sentry-使用途径\" class=\"headerlink\" title=\"Sentry 使用途径\"></a>Sentry 使用途径</h2><p><code>Sentry</code>可以自建服务，也可以采用官方提供的服务。官方提供的服务有免费的有收费的。以下是各个途径的功能对比。</p>\n<table style=\"text-align:center;\">\n<thead>\n<tr>\n<td style=\"width:300px\">功能列表</td><td style=\"width:100px\">自建服务</td><td style=\"width:100px\">免费版</td><td style=\"width:100px\">团队版</td><td style=\"width:100px\">商业版</td>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>多个项目管理</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td>\n</tr>\n<tr>\n<td>监控报错</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td>\n</tr>\n<tr>\n<td>邮件通知</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td>\n</tr>\n<tr>\n<td>开通子账户</td><td style=\"color:green\">√</td><td style=\"color:red\">×</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td>\n</tr>\n<tr>\n<td>一个月以上数据保存</td><td style=\"color:green\">√</td><td style=\"color:red\">×</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td>\n</tr>\n<tr>\n<td>作为插件接入其他管理平台</td><td style=\"color:red\">×</td><td style=\"color:red\">×</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td>\n</tr>\n<tr>\n<td>更多花里胡哨的统计</td><td style=\"color:red\">×</td><td style=\"color:red\">×</td><td style=\"color:red\">×</td><td style=\"color:green\">√</td>\n</tr>\n</tbody>\n</table>\n\n<h3 id=\"官方服务\"><a href=\"#官方服务\" class=\"headerlink\" title=\"官方服务\"></a>官方服务</h3><p>官方服务到 <a href=\"https://sentry.io/signup\">官网(https://sentry.io/signup)</a> 注册一个账号即可使用。</p>\n<h3 id=\"自建服务\"><a href=\"#自建服务\" class=\"headerlink\" title=\"自建服务\"></a>自建服务</h3><p>部署 Sentry 有两种方式。<code>Docker</code> 与 <code>Python</code>。</p>\n<ul>\n<li><code>Docker</code> 部署复杂程度低，但对硬件要求高。最新版最低需要<code>4核8G</code>，历史版本最低内存也需要<code>2400M</code>。</li>\n<li><code>Python</code> 部署复杂程度较高，对硬件要求低。</li>\n</ul>\n<p>可以视情况选择合适的自建方式。</p>\n<h2 id=\"使用-Docker-部署-Sentry\"><a href=\"#使用-Docker-部署-Sentry\" class=\"headerlink\" title=\"使用 Docker 部署 Sentry\"></a>使用 Docker 部署 Sentry</h2><div class=\"note warning flat\"><p>自建 Sentry 服务吃力不讨好，Docker 需要太高的配置，Python 又存在学习门槛。如果仅仅为了使用 Sentry，我建议使用官方服务。<br>如果官方的免费版无法满足使用需求，可以考虑使用我的另一个开源产品： GGT Sentry White ，结合钉钉机器人，提供报错信息的分发和报错信息日志功能。</p>\n</div>\n\n<h3 id=\"Docker-一键式部署\"><a href=\"#Docker-一键式部署\" class=\"headerlink\" title=\"Docker 一键式部署\"></a>Docker 一键式部署</h3><p>Sentry 官方提供一键式部署 Sentry，只需要克隆 github 上的脚本即可。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/getsentry/onpremise</span><br></pre></td></tr></table></figure>\n<p>若需要部署 2400M 大小内存限制的 Sentry，可以克隆历史版本。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/getsentry/onpremise/tree/20.12.1</span><br></pre></td></tr></table></figure>\n<p>克隆完成后进入目录，运行脚本 install.sh 即可使用。</p>\n<h2 id=\"使用-Python-部署-Sentry\"><a href=\"#使用-Python-部署-Sentry\" class=\"headerlink\" title=\"使用 Python 部署 Sentry\"></a>使用 Python 部署 Sentry</h2><h3 id=\"必备环境\"><a href=\"#必备环境\" class=\"headerlink\" title=\"必备环境\"></a>必备环境</h3><ul>\n<li>Python3</li>\n<li>关系型数据库（PostgreSQL）</li>\n<li>内存型数据库（Redis）</li>\n<li>进程守护（supervisor）</li>\n</ul>\n<h3 id=\"更新-apt-源\"><a href=\"#更新-apt-源\" class=\"headerlink\" title=\"更新 apt 源\"></a>更新 apt 源</h3><ul>\n<li>先复制备份原文件</li>\n<li>然后修改为国内的阿里云镜像源</li>\n<li>删除开头的 # 注释</li>\n<li>更新 apt 源<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br><span class=\"line\">sed -i <span class=\"string\">&quot;s/archive.ubuntu.com/mirrors.aliyun.com/g&quot;</span> /etc/apt/sources.list</span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;/^#/d&#x27;</span> /etc/apt/sources.list</span><br><span class=\"line\">apt update</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"安装-PostgreSQL\"><a href=\"#安装-PostgreSQL\" class=\"headerlink\" title=\"安装 PostgreSQL\"></a>安装 PostgreSQL</h3><h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">apt-get install postgresql</span><br></pre></td></tr></table></figure>\n<h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim /etc/postgresql/12/main/pg_hba.conf</span><br></pre></td></tr></table></figure>\n<p>将配置文件翻到最后，这里保存着各自连接方式，授权和鉴权。将</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">host    all   all   127.0.0.1/32    md5</span><br></pre></td></tr></table></figure>\n<p>一行最后的<code>md5</code>改为<code>trust</code>，意为<code>信任localhost所有指令</code></p>\n<h4 id=\"创建数据库\"><a href=\"#创建数据库\" class=\"headerlink\" title=\"创建数据库\"></a>创建数据库</h4><ul>\n<li>切换到 postgres 用户，以使用 PostgreSQL<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo -i -u postgres</span><br></pre></td></tr></table></figure></li>\n<li>创建数据<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">createdb sentry</span><br></pre></td></tr></table></figure></li>\n<li>进入数据库</li>\n</ul>\n<div class=\"note warning flat\"><p>在 Sentry 部署中，我们并不需要进入 sentry 数据库，之后查看数据也有其他数据库查看工具。</p>\n</div>\n\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">psql sentry</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装-Redis\"><a href=\"#安装-Redis\" class=\"headerlink\" title=\"安装 Redis\"></a>安装 Redis</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">apt-get install redis</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装-virtualenv\"><a href=\"#安装-virtualenv\" class=\"headerlink\" title=\"安装 virtualenv\"></a>安装 virtualenv</h3><p><code>virtualenv</code> 是 <code>python</code> 用来部署独立环境的工具，类似于虚拟机，在<code>virtualenv</code>中部署的项目将独立于主服务。</p>\n<h4 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip3 install virtualenv</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><ul>\n<li>创建文件夹<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">  mkdir /var/www</span><br><span class=\"line\">  ````</span><br><span class=\"line\">* 创建独立环境</span><br><span class=\"line\">  ```bash</span><br><span class=\"line\">  <span class=\"built_in\">cd</span> /var/www</span><br><span class=\"line\">  virtualenv sentryEnv</span><br></pre></td></tr></table></figure></li>\n<li>进入环境<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> sentryEnv</span><br><span class=\"line\"><span class=\"built_in\">source</span> bin/activate</span><br></pre></td></tr></table></figure></li>\n<li>更新<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">bin/python -m pip install --upgrade pip</span><br></pre></td></tr></table></figure></li>\n<li>退出环境</li>\n</ul>\n<div class=\"note warning flat\"><p>Python 部署 Sentry 的接下来全部指令均在 virtualenv 中运行，如非必要，不用退出。</p>\n</div>\n\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">deactivate</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装-Sentry-前的基础环境\"><a href=\"#安装-Sentry-前的基础环境\" class=\"headerlink\" title=\"安装 Sentry 前的基础环境\"></a>安装 Sentry 前的基础环境</h3><h4 id=\"libxml2-dev\"><a href=\"#libxml2-dev\" class=\"headerlink\" title=\"libxml2-dev\"></a>libxml2-dev</h4><ul>\n<li>更新索引<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">apt-get update</span><br></pre></td></tr></table></figure></li>\n<li>安装<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">apt-get install libxml2-dev</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"libxmlsec1-dev\"><a href=\"#libxmlsec1-dev\" class=\"headerlink\" title=\"libxmlsec1-dev\"></a>libxmlsec1-dev</h4><ul>\n<li>ubuntu 20.04 libxmlsec1-dev 暂时无法通过 apt-get 安装，需要先安装一个安装程序 <code>aptitude</code><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">apt-get install aptitude</span><br></pre></td></tr></table></figure></li>\n<li>安装</li>\n</ul>\n<div class=\"note warning flat\"><p><code>aptitude</code> 提供多种子依赖的安装模式，但是模式1并不能将 <code>libxmlsec1-dev</code> 的全部依赖安装完毕。所以在执行下面命令时一定要记得：第一次选择 Y/n/… 时要选择 n，第二次和第三次选择 Y</p>\n</div>\n\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">aptitude install libxmlsec1-dev</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"libxmlsec1-openssl\"><a href=\"#libxmlsec1-openssl\" class=\"headerlink\" title=\"libxmlsec1-openssl\"></a>libxmlsec1-openssl</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">apt-get install libxmlsec1-openssl</span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#### pkg-config</span></span><br><span class=\"line\">```bash</span><br><span class=\"line\">apt-get install pkg-config</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"千呼万唤始出来，安装-Sentry\"><a href=\"#千呼万唤始出来，安装-Sentry\" class=\"headerlink\" title=\"千呼万唤始出来，安装 Sentry\"></a>千呼万唤始出来，安装 Sentry</h3><h4 id=\"安装-2\"><a href=\"#安装-2\" class=\"headerlink\" title=\"安装\"></a>安装</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install -U sentry</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改BUG\"><a href=\"#修改BUG\" class=\"headerlink\" title=\"修改BUG\"></a>修改BUG</h4><ul>\n<li>在 Python 部署 21.6.3 版本的 Sentry 时存在一个类型错误需要修改。<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim /var/www/sentryEnv/lib/python3.8/site-packages/dataclasses.py</span><br></pre></td></tr></table></figure></li>\n<li>查找错误<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">/typing._ClassVar</span><br></pre></td></tr></table></figure></li>\n<li>按<code>i</code>，修改为<code>typing.ClassVar</code></li>\n</ul>\n<h4 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sentry init</span><br><span class=\"line\">sentry upgrade</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装-supervisor\"><a href=\"#安装-supervisor\" class=\"headerlink\" title=\"安装 supervisor\"></a>安装 supervisor</h3><h4 id=\"安装-3\"><a href=\"#安装-3\" class=\"headerlink\" title=\"安装\"></a>安装</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install supervisor</span><br></pre></td></tr></table></figure>\n<h4 id=\"配置-1\"><a href=\"#配置-1\" class=\"headerlink\" title=\"配置\"></a>配置</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim /etc/supervisor/conf.d/sentry.conf</span><br></pre></td></tr></table></figure>\n<p>写入如下内容</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">[program:sentry-web]</span><br><span class=\"line\">directory=/usr/local/lib/<span class=\"keyword\">python3</span>.<span class=\"number\">8</span>/dist-packages/sentry/</span><br><span class=\"line\">environment=SENTRY_CONF=<span class=\"string\">&quot;~/.sentry&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">command</span>=sentry run web</span><br><span class=\"line\">autostart=true</span><br><span class=\"line\">autorestart=true</span><br><span class=\"line\">redirect_stderr=true</span><br><span class=\"line\">stdout_logfile=/var/<span class=\"built_in\">log</span>/sentry/sentry-web.<span class=\"built_in\">log</span></span><br><span class=\"line\">stderr_logfile=/var/<span class=\"built_in\">log</span>/sentry/sentry-web.<span class=\"built_in\">log</span></span><br><span class=\"line\"></span><br><span class=\"line\">[program:sentry-worker]</span><br><span class=\"line\">directory=/usr/local/lib/<span class=\"keyword\">python3</span>.<span class=\"number\">8</span>/dist-packages/sentry/</span><br><span class=\"line\">environment=SENTRY_CONF=<span class=\"string\">&quot;~/.sentry&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">command</span>=sentry run worker</span><br><span class=\"line\">autostart=true</span><br><span class=\"line\">autorestart=true</span><br><span class=\"line\">redirect_stderr=true</span><br><span class=\"line\">stdout_logfile=/var/<span class=\"built_in\">log</span>/sentry/sentry-worker.<span class=\"built_in\">log</span></span><br><span class=\"line\">stderr_logfile=/var/<span class=\"built_in\">log</span>/sentry/sentry-worker.<span class=\"built_in\">log</span></span><br><span class=\"line\"></span><br><span class=\"line\">[program:sentry-cron]</span><br><span class=\"line\">directory=/usr/local/lib/<span class=\"keyword\">python3</span>.<span class=\"number\">8</span>/dist-packages/sentry/</span><br><span class=\"line\">environment=SENTRY_CONF=<span class=\"string\">&quot;~/.sentry&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">command</span>=sentry run cron</span><br><span class=\"line\">autostart=true</span><br><span class=\"line\">autorestart=true</span><br><span class=\"line\">redirect_stderr=true</span><br><span class=\"line\">stdout_logfile=/var/<span class=\"built_in\">log</span>/sentry/sentry-cron.<span class=\"built_in\">log</span></span><br><span class=\"line\">stderr_logfile=/var/<span class=\"built_in\">log</span>/sentry/sentry-cron.<span class=\"built_in\">log</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用-1\"><a href=\"#使用-1\" class=\"headerlink\" title=\"使用\"></a>使用</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看所有进程的状态</span></span><br><span class=\"line\">supervisorctl status</span><br><span class=\"line\"><span class=\"comment\"># 停止all</span></span><br><span class=\"line\">supervisorctl stop all</span><br><span class=\"line\"><span class=\"comment\"># 启动all</span></span><br><span class=\"line\">supervisorctl start all</span><br><span class=\"line\"><span class=\"comment\"># 重启</span></span><br><span class=\"line\">supervisorctl restart</span><br><span class=\"line\"><span class=\"comment\"># 配置文件修改后使用该命令加载新的配置</span></span><br><span class=\"line\">supervisorctl update</span><br><span class=\"line\"><span class=\"comment\"># 重新启动配置中的所有程序</span></span><br><span class=\"line\">supervisorctl reload</span><br></pre></td></tr></table></figure>","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<h1 id=\"Sentry-部署\"><a href=\"#Sentry-部署\" class=\"headerlink\" title=\"Sentry 部署\"></a>Sentry 部署</h1><h2 id=\"什么是-Sentry-我为什么要使用它？\"><a href=\"#什么是-Sentry-我为什么要使用它？\" class=\"headerlink\" title=\"什么是 Sentry? 我为什么要使用它？\"></a>什么是 Sentry? 我为什么要使用它？</h2><p>简单来讲，<code>Sentry</code>可以监控线上项目，将每一个报错上报，整理，主动推送给你的邮箱。</p>\n<p>如果你恰巧需要这样一个功能，那选<code>Sentry</code>准没错。至于<code>Sentry</code>其他更高级的功能，可以等入门之后慢慢了解。</p>\n<h2 id=\"Sentry-使用途径\"><a href=\"#Sentry-使用途径\" class=\"headerlink\" title=\"Sentry 使用途径\"></a>Sentry 使用途径</h2><p><code>Sentry</code>可以自建服务，也可以采用官方提供的服务。官方提供的服务有免费的有收费的。以下是各个途径的功能对比。</p>\n<table style=\"text-align:center;\">\n<thead>\n<tr>\n<td style=\"width:300px\">功能列表</td><td style=\"width:100px\">自建服务</td><td style=\"width:100px\">免费版</td><td style=\"width:100px\">团队版</td><td style=\"width:100px\">商业版</td>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>多个项目管理</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td>\n</tr>\n<tr>\n<td>监控报错</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td>\n</tr>\n<tr>\n<td>邮件通知</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td>\n</tr>\n<tr>\n<td>开通子账户</td><td style=\"color:green\">√</td><td style=\"color:red\">×</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td>\n</tr>\n<tr>\n<td>一个月以上数据保存</td><td style=\"color:green\">√</td><td style=\"color:red\">×</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td>\n</tr>\n<tr>\n<td>作为插件接入其他管理平台</td><td style=\"color:red\">×</td><td style=\"color:red\">×</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td>\n</tr>\n<tr>\n<td>更多花里胡哨的统计</td><td style=\"color:red\">×</td><td style=\"color:red\">×</td><td style=\"color:red\">×</td><td style=\"color:green\">√</td>\n</tr>\n</tbody>\n</table>\n\n<h3 id=\"官方服务\"><a href=\"#官方服务\" class=\"headerlink\" title=\"官方服务\"></a>官方服务</h3><p>官方服务到 <a href=\"https://sentry.io/signup\">官网(https://sentry.io/signup)</a> 注册一个账号即可使用。</p>\n<h3 id=\"自建服务\"><a href=\"#自建服务\" class=\"headerlink\" title=\"自建服务\"></a>自建服务</h3><p>部署 Sentry 有两种方式。<code>Docker</code> 与 <code>Python</code>。</p>\n<ul>\n<li><code>Docker</code> 部署复杂程度低，但对硬件要求高。最新版最低需要<code>4核8G</code>，历史版本最低内存也需要<code>2400M</code>。</li>\n<li><code>Python</code> 部署复杂程度较高，对硬件要求低。</li>\n</ul>\n<p>可以视情况选择合适的自建方式。</p>\n<h2 id=\"使用-Docker-部署-Sentry\"><a href=\"#使用-Docker-部署-Sentry\" class=\"headerlink\" title=\"使用 Docker 部署 Sentry\"></a>使用 Docker 部署 Sentry</h2><div class=\"note warning flat\"><p>自建 Sentry 服务吃力不讨好，Docker 需要太高的配置，Python 又存在学习门槛。如果仅仅为了使用 Sentry，我建议使用官方服务。<br>如果官方的免费版无法满足使用需求，可以考虑使用我的另一个开源产品： GGT Sentry White ，结合钉钉机器人，提供报错信息的分发和报错信息日志功能。</p>\n</div>\n\n<h3 id=\"Docker-一键式部署\"><a href=\"#Docker-一键式部署\" class=\"headerlink\" title=\"Docker 一键式部署\"></a>Docker 一键式部署</h3><p>Sentry 官方提供一键式部署 Sentry，只需要克隆 github 上的脚本即可。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/getsentry/onpremise</span><br></pre></td></tr></table></figure>\n<p>若需要部署 2400M 大小内存限制的 Sentry，可以克隆历史版本。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/getsentry/onpremise/tree/20.12.1</span><br></pre></td></tr></table></figure>\n<p>克隆完成后进入目录，运行脚本 install.sh 即可使用。</p>\n<h2 id=\"使用-Python-部署-Sentry\"><a href=\"#使用-Python-部署-Sentry\" class=\"headerlink\" title=\"使用 Python 部署 Sentry\"></a>使用 Python 部署 Sentry</h2><h3 id=\"必备环境\"><a href=\"#必备环境\" class=\"headerlink\" title=\"必备环境\"></a>必备环境</h3><ul>\n<li>Python3</li>\n<li>关系型数据库（PostgreSQL）</li>\n<li>内存型数据库（Redis）</li>\n<li>进程守护（supervisor）</li>\n</ul>\n<h3 id=\"更新-apt-源\"><a href=\"#更新-apt-源\" class=\"headerlink\" title=\"更新 apt 源\"></a>更新 apt 源</h3><ul>\n<li>先复制备份原文件</li>\n<li>然后修改为国内的阿里云镜像源</li>\n<li>删除开头的 # 注释</li>\n<li>更新 apt 源<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br><span class=\"line\">sed -i <span class=\"string\">&quot;s/archive.ubuntu.com/mirrors.aliyun.com/g&quot;</span> /etc/apt/sources.list</span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;/^#/d&#x27;</span> /etc/apt/sources.list</span><br><span class=\"line\">apt update</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"安装-PostgreSQL\"><a href=\"#安装-PostgreSQL\" class=\"headerlink\" title=\"安装 PostgreSQL\"></a>安装 PostgreSQL</h3><h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">apt-get install postgresql</span><br></pre></td></tr></table></figure>\n<h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim /etc/postgresql/12/main/pg_hba.conf</span><br></pre></td></tr></table></figure>\n<p>将配置文件翻到最后，这里保存着各自连接方式，授权和鉴权。将</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">host    all   all   127.0.0.1/32    md5</span><br></pre></td></tr></table></figure>\n<p>一行最后的<code>md5</code>改为<code>trust</code>，意为<code>信任localhost所有指令</code></p>\n<h4 id=\"创建数据库\"><a href=\"#创建数据库\" class=\"headerlink\" title=\"创建数据库\"></a>创建数据库</h4><ul>\n<li>切换到 postgres 用户，以使用 PostgreSQL<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo -i -u postgres</span><br></pre></td></tr></table></figure></li>\n<li>创建数据<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">createdb sentry</span><br></pre></td></tr></table></figure></li>\n<li>进入数据库</li>\n</ul>\n<div class=\"note warning flat\"><p>在 Sentry 部署中，我们并不需要进入 sentry 数据库，之后查看数据也有其他数据库查看工具。</p>\n</div>\n\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">psql sentry</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装-Redis\"><a href=\"#安装-Redis\" class=\"headerlink\" title=\"安装 Redis\"></a>安装 Redis</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">apt-get install redis</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装-virtualenv\"><a href=\"#安装-virtualenv\" class=\"headerlink\" title=\"安装 virtualenv\"></a>安装 virtualenv</h3><p><code>virtualenv</code> 是 <code>python</code> 用来部署独立环境的工具，类似于虚拟机，在<code>virtualenv</code>中部署的项目将独立于主服务。</p>\n<h4 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip3 install virtualenv</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><ul>\n<li>创建文件夹<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">  mkdir /var/www</span><br><span class=\"line\">  ````</span><br><span class=\"line\">* 创建独立环境</span><br><span class=\"line\">  ```bash</span><br><span class=\"line\">  <span class=\"built_in\">cd</span> /var/www</span><br><span class=\"line\">  virtualenv sentryEnv</span><br></pre></td></tr></table></figure></li>\n<li>进入环境<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> sentryEnv</span><br><span class=\"line\"><span class=\"built_in\">source</span> bin/activate</span><br></pre></td></tr></table></figure></li>\n<li>更新<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">bin/python -m pip install --upgrade pip</span><br></pre></td></tr></table></figure></li>\n<li>退出环境</li>\n</ul>\n<div class=\"note warning flat\"><p>Python 部署 Sentry 的接下来全部指令均在 virtualenv 中运行，如非必要，不用退出。</p>\n</div>\n\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">deactivate</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装-Sentry-前的基础环境\"><a href=\"#安装-Sentry-前的基础环境\" class=\"headerlink\" title=\"安装 Sentry 前的基础环境\"></a>安装 Sentry 前的基础环境</h3><h4 id=\"libxml2-dev\"><a href=\"#libxml2-dev\" class=\"headerlink\" title=\"libxml2-dev\"></a>libxml2-dev</h4><ul>\n<li>更新索引<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">apt-get update</span><br></pre></td></tr></table></figure></li>\n<li>安装<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">apt-get install libxml2-dev</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"libxmlsec1-dev\"><a href=\"#libxmlsec1-dev\" class=\"headerlink\" title=\"libxmlsec1-dev\"></a>libxmlsec1-dev</h4><ul>\n<li>ubuntu 20.04 libxmlsec1-dev 暂时无法通过 apt-get 安装，需要先安装一个安装程序 <code>aptitude</code><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">apt-get install aptitude</span><br></pre></td></tr></table></figure></li>\n<li>安装</li>\n</ul>\n<div class=\"note warning flat\"><p><code>aptitude</code> 提供多种子依赖的安装模式，但是模式1并不能将 <code>libxmlsec1-dev</code> 的全部依赖安装完毕。所以在执行下面命令时一定要记得：第一次选择 Y/n/… 时要选择 n，第二次和第三次选择 Y</p>\n</div>\n\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">aptitude install libxmlsec1-dev</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"libxmlsec1-openssl\"><a href=\"#libxmlsec1-openssl\" class=\"headerlink\" title=\"libxmlsec1-openssl\"></a>libxmlsec1-openssl</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">apt-get install libxmlsec1-openssl</span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#### pkg-config</span></span><br><span class=\"line\">```bash</span><br><span class=\"line\">apt-get install pkg-config</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"千呼万唤始出来，安装-Sentry\"><a href=\"#千呼万唤始出来，安装-Sentry\" class=\"headerlink\" title=\"千呼万唤始出来，安装 Sentry\"></a>千呼万唤始出来，安装 Sentry</h3><h4 id=\"安装-2\"><a href=\"#安装-2\" class=\"headerlink\" title=\"安装\"></a>安装</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install -U sentry</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改BUG\"><a href=\"#修改BUG\" class=\"headerlink\" title=\"修改BUG\"></a>修改BUG</h4><ul>\n<li>在 Python 部署 21.6.3 版本的 Sentry 时存在一个类型错误需要修改。<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim /var/www/sentryEnv/lib/python3.8/site-packages/dataclasses.py</span><br></pre></td></tr></table></figure></li>\n<li>查找错误<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">/typing._ClassVar</span><br></pre></td></tr></table></figure></li>\n<li>按<code>i</code>，修改为<code>typing.ClassVar</code></li>\n</ul>\n<h4 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sentry init</span><br><span class=\"line\">sentry upgrade</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装-supervisor\"><a href=\"#安装-supervisor\" class=\"headerlink\" title=\"安装 supervisor\"></a>安装 supervisor</h3><h4 id=\"安装-3\"><a href=\"#安装-3\" class=\"headerlink\" title=\"安装\"></a>安装</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install supervisor</span><br></pre></td></tr></table></figure>\n<h4 id=\"配置-1\"><a href=\"#配置-1\" class=\"headerlink\" title=\"配置\"></a>配置</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim /etc/supervisor/conf.d/sentry.conf</span><br></pre></td></tr></table></figure>\n<p>写入如下内容</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">[program:sentry-web]</span><br><span class=\"line\">directory=/usr/local/lib/<span class=\"keyword\">python3</span>.<span class=\"number\">8</span>/dist-packages/sentry/</span><br><span class=\"line\">environment=SENTRY_CONF=<span class=\"string\">&quot;~/.sentry&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">command</span>=sentry run web</span><br><span class=\"line\">autostart=true</span><br><span class=\"line\">autorestart=true</span><br><span class=\"line\">redirect_stderr=true</span><br><span class=\"line\">stdout_logfile=/var/<span class=\"built_in\">log</span>/sentry/sentry-web.<span class=\"built_in\">log</span></span><br><span class=\"line\">stderr_logfile=/var/<span class=\"built_in\">log</span>/sentry/sentry-web.<span class=\"built_in\">log</span></span><br><span class=\"line\"></span><br><span class=\"line\">[program:sentry-worker]</span><br><span class=\"line\">directory=/usr/local/lib/<span class=\"keyword\">python3</span>.<span class=\"number\">8</span>/dist-packages/sentry/</span><br><span class=\"line\">environment=SENTRY_CONF=<span class=\"string\">&quot;~/.sentry&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">command</span>=sentry run worker</span><br><span class=\"line\">autostart=true</span><br><span class=\"line\">autorestart=true</span><br><span class=\"line\">redirect_stderr=true</span><br><span class=\"line\">stdout_logfile=/var/<span class=\"built_in\">log</span>/sentry/sentry-worker.<span class=\"built_in\">log</span></span><br><span class=\"line\">stderr_logfile=/var/<span class=\"built_in\">log</span>/sentry/sentry-worker.<span class=\"built_in\">log</span></span><br><span class=\"line\"></span><br><span class=\"line\">[program:sentry-cron]</span><br><span class=\"line\">directory=/usr/local/lib/<span class=\"keyword\">python3</span>.<span class=\"number\">8</span>/dist-packages/sentry/</span><br><span class=\"line\">environment=SENTRY_CONF=<span class=\"string\">&quot;~/.sentry&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">command</span>=sentry run cron</span><br><span class=\"line\">autostart=true</span><br><span class=\"line\">autorestart=true</span><br><span class=\"line\">redirect_stderr=true</span><br><span class=\"line\">stdout_logfile=/var/<span class=\"built_in\">log</span>/sentry/sentry-cron.<span class=\"built_in\">log</span></span><br><span class=\"line\">stderr_logfile=/var/<span class=\"built_in\">log</span>/sentry/sentry-cron.<span class=\"built_in\">log</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用-1\"><a href=\"#使用-1\" class=\"headerlink\" title=\"使用\"></a>使用</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看所有进程的状态</span></span><br><span class=\"line\">supervisorctl status</span><br><span class=\"line\"><span class=\"comment\"># 停止all</span></span><br><span class=\"line\">supervisorctl stop all</span><br><span class=\"line\"><span class=\"comment\"># 启动all</span></span><br><span class=\"line\">supervisorctl start all</span><br><span class=\"line\"><span class=\"comment\"># 重启</span></span><br><span class=\"line\">supervisorctl restart</span><br><span class=\"line\"><span class=\"comment\"># 配置文件修改后使用该命令加载新的配置</span></span><br><span class=\"line\">supervisorctl update</span><br><span class=\"line\"><span class=\"comment\"># 重新启动配置中的所有程序</span></span><br><span class=\"line\">supervisorctl reload</span><br></pre></td></tr></table></figure>"},{"title":"Sentry 接入","description":"Vue/Laravel 接入 Sentry","keywords":"Vue, Laravel, Sentry","top_img":"/images/three-party/ThreePartyCover2.png","cover":"/images/three-party/ThreePartyCover2.png","date":"2021-08-13T06:38:38.000Z","updated":"2021-08-13T06:38:38.000Z","_content":"\n# Sentry 接入\n\n## 使用方式对比\n\nSentry 提供网页版应用。监控服务直接部署在他们的服务器上。提供免费使用和两种升级。我们使用 Sentry 有四种方案。\n\n* 方案一：自建服务器部署 Sentry\n* 方案二：Sentry 提供的免费版本，各自管理各自的项目\n* 方案三：Sentry 团队版，基本满足团队开发所需\n* 方案四：Sentry 商业版，提供更高级的图表和跨项目联动\n\n因为Sentry提供14天的最高版本试用，我把几种方案都试了试。下面是功能对比\n\n<table style=\"text-align:center;\">\n<thead>\n<tr>\n<td style=\"width:300px\">功能列表</td><td style=\"width:100px\">自建服务</td><td style=\"width:100px\">免费版</td><td style=\"width:100px\">团队版</td><td style=\"width:100px\">商业版</td>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>多个项目管理</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td>\n</tr>\n<tr>\n<td>监控报错</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td>\n</tr>\n<tr>\n<td>邮件通知</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td>\n</tr>\n<tr>\n<td>开通子账户</td><td style=\"color:green\">√</td><td style=\"color:red\">×</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td>\n</tr>\n<tr>\n<td>一个月以上数据保存</td><td style=\"color:green\">√</td><td style=\"color:red\">×</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td>\n</tr>\n<tr>\n<td>作为插件接入其他管理平台</td><td style=\"color:red\">×</td><td style=\"color:red\">×</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td>\n</tr>\n<tr>\n<td>更多花里胡哨的统计</td><td style=\"color:red\">×</td><td style=\"color:red\">×</td><td style=\"color:red\">×</td><td style=\"color:green\">√</td>\n</tr>\n</tbody>\n</table>\n\n{% note info flat %}\n最终我们选择了团队版。不过有条件的也可以选择自建服务。登录地址 [https://sentry.io/signup](https://sentry.io/signup)\n{% endnote %}\n\n## Laravel 项目接入步骤\n\n### 1.使用 composer 安装插件\n\n```bash\ncomposer require sentry/sentry-laravel\n```\n\n### 2.重写 report 方法\n\n在文件`App/Exceptions/Handler.php`中加入以下方法\n\n```php\npublic function report(Throwable $e)\n{\n    if (app()->bound('sentry') && $this->shouldReport($e)) {\n        $_SERVER['SENTRY_ENVIRONMENT'] = config('app.env');\n        app('sentry')->captureException($e);\n    }\n\n    parent::report($e);\n}\n```\n\n### 3.发布配置文件\n\n{% note warning flat %}\n注意替换下方的 {DSN_ADDRESS}，发布过程中需要输入两次`yes`\n{% endnote %}\n\n```bash\nphp artisan sentry:publish --dsn={DSN_ADDRESS}\n```\n\n### 4.配置环境变量\n\n在不同环境的`.env`文件中加入以下代码，初始的`.env`文件末尾已经在发布配置文件的时候写入了DSN地址，如有需要，注意替换。\n\n{% note warning flat %}\n注意替换下方的 {DSN_ADDRESS}，正式服的采样率可以设置为0.2，即每5个人中只有一个人进行报错监测\n{% endnote %}\n\n```\n# Sentry DSN 地址\nSENTRY_LARAVEL_DSN={DSN_ADDRESS}\n# 采样率\nSENTRY_TRACES_SAMPLE_RATE=1\n```\n\n## Vue 项目接入方法\n\n### 1. 使用 yarn 或者 npm 安装插件\n\n* yarn\n  ```bash\n  yarn add @sentry/vue @sentry/tracing\n  ```\n* npm\n  ```bash\n  npm install --save @sentry/vue @sentry/tracing\n  ```\n\n### 2. 配置环境变量\n\n在不同环境的`.env.js`文件中加入以下代码。\n\n{% note warning flat %}\n注意替换下方的 {DSN_ADDRESS}，正式服的采样率可以设置为0.2，即每5个人中只有一个人进行报错监测\n{% endnote %}\n\n```javascript\n// Sentry DSN 地址\nSENTRY_LARAVEL_DSN = {DSN_ADDRESS}\n// 采样率\nSENTRY_TRACES_SAMPLE_RATE = 1\n```\n\n### 3. 在入口文件中初始化 Sentry\n\n* 引入\n\n  ```javascript\n  import Vue from \"vue\";\n  import * as Sentry from \"@sentry/vue\";\n  import {Integrations} from \"@sentry/tracing\";\n  ```\n\n* 初始化\n\n  <!-- tabs:start -->\n\n#### **JavaScript**\n\n  ```javascript\n  Sentry.init({\n    Vue,\n    dsn: process.env.SENTRY_LARAVEL_DSN,\n    integrations: [new Integrations.BrowserTracing()],\n\n    // Set tracesSampleRate to 1.0 to capture 100%\n    // of transactions for performance monitoring.\n    // We recommend adjusting this value in production\n    tracesSampleRate: parseInt(process.env.SENTRY_TRACES_SAMPLE_RATE ?? '0.2'),\n    environment: process.env.ENV,\n  });\n  ```\n\n#### **TypeScript**\n\n{% note warning flat %}\n `TypeScript`存在类型报错，但不影响`Sentry`的正常工作。使用注释`// @ts-ignore`让`ts`忽略此问题即可\n{% endnote %}\n\n  ```typescript\n    // @ts-ignore\nSentry.init({\n    Vue,\n    dsn: process.env.SENTRY_LARAVEL_DSN,\n    integrations: [new Integrations.BrowserTracing()],\n\n    // Set tracesSampleRate to 1.0 to capture 100%\n    // of transactions for performance monitoring.\n    // We recommend adjusting this value in production\n    tracesSampleRate: parseInt(process.env.SENTRY_TRACES_SAMPLE_RATE ?? '0.2', 10),\n    environment: process.env.ENV,\n})\n  ```\n\n  <!-- tabs:end -->\n\n\n","source":"_posts/three-party/SentryUse.md","raw":"---\ntitle: Sentry 接入\ndescription: Vue/Laravel 接入 Sentry\nkeywords: Vue, Laravel, Sentry\ntop_img: /images/three-party/ThreePartyCover2.png\ncover: /images/three-party/ThreePartyCover2.png\ntags:\n  - ThreeParty\n  - 进阶\ncategories:\n  - ThreeParty\ndate: 2021-08-13 14:38:38\nupdated: 2021-08-13 14:38:38\n---\n\n# Sentry 接入\n\n## 使用方式对比\n\nSentry 提供网页版应用。监控服务直接部署在他们的服务器上。提供免费使用和两种升级。我们使用 Sentry 有四种方案。\n\n* 方案一：自建服务器部署 Sentry\n* 方案二：Sentry 提供的免费版本，各自管理各自的项目\n* 方案三：Sentry 团队版，基本满足团队开发所需\n* 方案四：Sentry 商业版，提供更高级的图表和跨项目联动\n\n因为Sentry提供14天的最高版本试用，我把几种方案都试了试。下面是功能对比\n\n<table style=\"text-align:center;\">\n<thead>\n<tr>\n<td style=\"width:300px\">功能列表</td><td style=\"width:100px\">自建服务</td><td style=\"width:100px\">免费版</td><td style=\"width:100px\">团队版</td><td style=\"width:100px\">商业版</td>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>多个项目管理</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td>\n</tr>\n<tr>\n<td>监控报错</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td>\n</tr>\n<tr>\n<td>邮件通知</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td>\n</tr>\n<tr>\n<td>开通子账户</td><td style=\"color:green\">√</td><td style=\"color:red\">×</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td>\n</tr>\n<tr>\n<td>一个月以上数据保存</td><td style=\"color:green\">√</td><td style=\"color:red\">×</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td>\n</tr>\n<tr>\n<td>作为插件接入其他管理平台</td><td style=\"color:red\">×</td><td style=\"color:red\">×</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td>\n</tr>\n<tr>\n<td>更多花里胡哨的统计</td><td style=\"color:red\">×</td><td style=\"color:red\">×</td><td style=\"color:red\">×</td><td style=\"color:green\">√</td>\n</tr>\n</tbody>\n</table>\n\n{% note info flat %}\n最终我们选择了团队版。不过有条件的也可以选择自建服务。登录地址 [https://sentry.io/signup](https://sentry.io/signup)\n{% endnote %}\n\n## Laravel 项目接入步骤\n\n### 1.使用 composer 安装插件\n\n```bash\ncomposer require sentry/sentry-laravel\n```\n\n### 2.重写 report 方法\n\n在文件`App/Exceptions/Handler.php`中加入以下方法\n\n```php\npublic function report(Throwable $e)\n{\n    if (app()->bound('sentry') && $this->shouldReport($e)) {\n        $_SERVER['SENTRY_ENVIRONMENT'] = config('app.env');\n        app('sentry')->captureException($e);\n    }\n\n    parent::report($e);\n}\n```\n\n### 3.发布配置文件\n\n{% note warning flat %}\n注意替换下方的 {DSN_ADDRESS}，发布过程中需要输入两次`yes`\n{% endnote %}\n\n```bash\nphp artisan sentry:publish --dsn={DSN_ADDRESS}\n```\n\n### 4.配置环境变量\n\n在不同环境的`.env`文件中加入以下代码，初始的`.env`文件末尾已经在发布配置文件的时候写入了DSN地址，如有需要，注意替换。\n\n{% note warning flat %}\n注意替换下方的 {DSN_ADDRESS}，正式服的采样率可以设置为0.2，即每5个人中只有一个人进行报错监测\n{% endnote %}\n\n```\n# Sentry DSN 地址\nSENTRY_LARAVEL_DSN={DSN_ADDRESS}\n# 采样率\nSENTRY_TRACES_SAMPLE_RATE=1\n```\n\n## Vue 项目接入方法\n\n### 1. 使用 yarn 或者 npm 安装插件\n\n* yarn\n  ```bash\n  yarn add @sentry/vue @sentry/tracing\n  ```\n* npm\n  ```bash\n  npm install --save @sentry/vue @sentry/tracing\n  ```\n\n### 2. 配置环境变量\n\n在不同环境的`.env.js`文件中加入以下代码。\n\n{% note warning flat %}\n注意替换下方的 {DSN_ADDRESS}，正式服的采样率可以设置为0.2，即每5个人中只有一个人进行报错监测\n{% endnote %}\n\n```javascript\n// Sentry DSN 地址\nSENTRY_LARAVEL_DSN = {DSN_ADDRESS}\n// 采样率\nSENTRY_TRACES_SAMPLE_RATE = 1\n```\n\n### 3. 在入口文件中初始化 Sentry\n\n* 引入\n\n  ```javascript\n  import Vue from \"vue\";\n  import * as Sentry from \"@sentry/vue\";\n  import {Integrations} from \"@sentry/tracing\";\n  ```\n\n* 初始化\n\n  <!-- tabs:start -->\n\n#### **JavaScript**\n\n  ```javascript\n  Sentry.init({\n    Vue,\n    dsn: process.env.SENTRY_LARAVEL_DSN,\n    integrations: [new Integrations.BrowserTracing()],\n\n    // Set tracesSampleRate to 1.0 to capture 100%\n    // of transactions for performance monitoring.\n    // We recommend adjusting this value in production\n    tracesSampleRate: parseInt(process.env.SENTRY_TRACES_SAMPLE_RATE ?? '0.2'),\n    environment: process.env.ENV,\n  });\n  ```\n\n#### **TypeScript**\n\n{% note warning flat %}\n `TypeScript`存在类型报错，但不影响`Sentry`的正常工作。使用注释`// @ts-ignore`让`ts`忽略此问题即可\n{% endnote %}\n\n  ```typescript\n    // @ts-ignore\nSentry.init({\n    Vue,\n    dsn: process.env.SENTRY_LARAVEL_DSN,\n    integrations: [new Integrations.BrowserTracing()],\n\n    // Set tracesSampleRate to 1.0 to capture 100%\n    // of transactions for performance monitoring.\n    // We recommend adjusting this value in production\n    tracesSampleRate: parseInt(process.env.SENTRY_TRACES_SAMPLE_RATE ?? '0.2', 10),\n    environment: process.env.ENV,\n})\n  ```\n\n  <!-- tabs:end -->\n\n\n","slug":"three-party/SentryUse","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cksa1rbxu0022z4u4h9jwhqwj","content":"<h1 id=\"Sentry-接入\"><a href=\"#Sentry-接入\" class=\"headerlink\" title=\"Sentry 接入\"></a>Sentry 接入</h1><h2 id=\"使用方式对比\"><a href=\"#使用方式对比\" class=\"headerlink\" title=\"使用方式对比\"></a>使用方式对比</h2><p>Sentry 提供网页版应用。监控服务直接部署在他们的服务器上。提供免费使用和两种升级。我们使用 Sentry 有四种方案。</p>\n<ul>\n<li>方案一：自建服务器部署 Sentry</li>\n<li>方案二：Sentry 提供的免费版本，各自管理各自的项目</li>\n<li>方案三：Sentry 团队版，基本满足团队开发所需</li>\n<li>方案四：Sentry 商业版，提供更高级的图表和跨项目联动</li>\n</ul>\n<p>因为Sentry提供14天的最高版本试用，我把几种方案都试了试。下面是功能对比</p>\n<table style=\"text-align:center;\">\n<thead>\n<tr>\n<td style=\"width:300px\">功能列表</td><td style=\"width:100px\">自建服务</td><td style=\"width:100px\">免费版</td><td style=\"width:100px\">团队版</td><td style=\"width:100px\">商业版</td>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>多个项目管理</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td>\n</tr>\n<tr>\n<td>监控报错</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td>\n</tr>\n<tr>\n<td>邮件通知</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td>\n</tr>\n<tr>\n<td>开通子账户</td><td style=\"color:green\">√</td><td style=\"color:red\">×</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td>\n</tr>\n<tr>\n<td>一个月以上数据保存</td><td style=\"color:green\">√</td><td style=\"color:red\">×</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td>\n</tr>\n<tr>\n<td>作为插件接入其他管理平台</td><td style=\"color:red\">×</td><td style=\"color:red\">×</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td>\n</tr>\n<tr>\n<td>更多花里胡哨的统计</td><td style=\"color:red\">×</td><td style=\"color:red\">×</td><td style=\"color:red\">×</td><td style=\"color:green\">√</td>\n</tr>\n</tbody>\n</table>\n\n<div class=\"note info flat\"><p>最终我们选择了团队版。不过有条件的也可以选择自建服务。登录地址 <a href=\"https://sentry.io/signup\">https://sentry.io/signup</a></p>\n</div>\n\n<h2 id=\"Laravel-项目接入步骤\"><a href=\"#Laravel-项目接入步骤\" class=\"headerlink\" title=\"Laravel 项目接入步骤\"></a>Laravel 项目接入步骤</h2><h3 id=\"1-使用-composer-安装插件\"><a href=\"#1-使用-composer-安装插件\" class=\"headerlink\" title=\"1.使用 composer 安装插件\"></a>1.使用 composer 安装插件</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">composer require sentry/sentry-laravel</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-重写-report-方法\"><a href=\"#2-重写-report-方法\" class=\"headerlink\" title=\"2.重写 report 方法\"></a>2.重写 report 方法</h3><p>在文件<code>App/Exceptions/Handler.php</code>中加入以下方法</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">report</span>(<span class=\"params\"><span class=\"built_in\">Throwable</span> <span class=\"variable\">$e</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (app()-&gt;bound(<span class=\"string\">&#x27;sentry&#x27;</span>) &amp;&amp; <span class=\"keyword\">$this</span>-&gt;shouldReport(<span class=\"variable\">$e</span>)) &#123;</span><br><span class=\"line\">        <span class=\"variable\">$_SERVER</span>[<span class=\"string\">&#x27;SENTRY_ENVIRONMENT&#x27;</span>] = config(<span class=\"string\">&#x27;app.env&#x27;</span>);</span><br><span class=\"line\">        app(<span class=\"string\">&#x27;sentry&#x27;</span>)-&gt;captureException(<span class=\"variable\">$e</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">parent</span>::report(<span class=\"variable\">$e</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-发布配置文件\"><a href=\"#3-发布配置文件\" class=\"headerlink\" title=\"3.发布配置文件\"></a>3.发布配置文件</h3><div class=\"note warning flat\"><p>注意替换下方的 {DSN_ADDRESS}，发布过程中需要输入两次<code>yes</code></p>\n</div>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">php artisan sentry:publish --dsn=&#123;DSN_ADDRESS&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-配置环境变量\"><a href=\"#4-配置环境变量\" class=\"headerlink\" title=\"4.配置环境变量\"></a>4.配置环境变量</h3><p>在不同环境的<code>.env</code>文件中加入以下代码，初始的<code>.env</code>文件末尾已经在发布配置文件的时候写入了DSN地址，如有需要，注意替换。</p>\n<div class=\"note warning flat\"><p>注意替换下方的 {DSN_ADDRESS}，正式服的采样率可以设置为0.2，即每5个人中只有一个人进行报错监测</p>\n</div>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Sentry DSN 地址</span><br><span class=\"line\">SENTRY_LARAVEL_DSN=&#123;DSN_ADDRESS&#125;</span><br><span class=\"line\"># 采样率</span><br><span class=\"line\">SENTRY_TRACES_SAMPLE_RATE=1</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Vue-项目接入方法\"><a href=\"#Vue-项目接入方法\" class=\"headerlink\" title=\"Vue 项目接入方法\"></a>Vue 项目接入方法</h2><h3 id=\"1-使用-yarn-或者-npm-安装插件\"><a href=\"#1-使用-yarn-或者-npm-安装插件\" class=\"headerlink\" title=\"1. 使用 yarn 或者 npm 安装插件\"></a>1. 使用 yarn 或者 npm 安装插件</h3><ul>\n<li>yarn<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yarn add @sentry/vue @sentry/tracing</span><br></pre></td></tr></table></figure></li>\n<li>npm<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install --save @sentry/vue @sentry/tracing</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"2-配置环境变量\"><a href=\"#2-配置环境变量\" class=\"headerlink\" title=\"2. 配置环境变量\"></a>2. 配置环境变量</h3><p>在不同环境的<code>.env.js</code>文件中加入以下代码。</p>\n<div class=\"note warning flat\"><p>注意替换下方的 {DSN_ADDRESS}，正式服的采样率可以设置为0.2，即每5个人中只有一个人进行报错监测</p>\n</div>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Sentry DSN 地址</span></span><br><span class=\"line\">SENTRY_LARAVEL_DSN = &#123;DSN_ADDRESS&#125;</span><br><span class=\"line\"><span class=\"comment\">// 采样率</span></span><br><span class=\"line\">SENTRY_TRACES_SAMPLE_RATE = <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-在入口文件中初始化-Sentry\"><a href=\"#3-在入口文件中初始化-Sentry\" class=\"headerlink\" title=\"3. 在入口文件中初始化 Sentry\"></a>3. 在入口文件中初始化 Sentry</h3><ul>\n<li><p>引入</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> Sentry <span class=\"keyword\">from</span> <span class=\"string\">&quot;@sentry/vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;Integrations&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@sentry/tracing&quot;</span>;</span><br></pre></td></tr></table></figure></li>\n<li><p>初始化</p>\n<!-- tabs:start --></li>\n</ul>\n<h4 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a><strong>JavaScript</strong></h4>  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">Sentry.init(&#123;</span><br><span class=\"line\">  Vue,</span><br><span class=\"line\">  <span class=\"attr\">dsn</span>: process.env.SENTRY_LARAVEL_DSN,</span><br><span class=\"line\">  <span class=\"attr\">integrations</span>: [<span class=\"keyword\">new</span> Integrations.BrowserTracing()],</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Set tracesSampleRate to 1.0 to capture 100%</span></span><br><span class=\"line\">  <span class=\"comment\">// of transactions for performance monitoring.</span></span><br><span class=\"line\">  <span class=\"comment\">// We recommend adjusting this value in production</span></span><br><span class=\"line\">  <span class=\"attr\">tracesSampleRate</span>: <span class=\"built_in\">parseInt</span>(process.env.SENTRY_TRACES_SAMPLE_RATE ?? <span class=\"string\">&#x27;0.2&#x27;</span>),</span><br><span class=\"line\">  <span class=\"attr\">environment</span>: process.env.ENV,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"TypeScript\"><a href=\"#TypeScript\" class=\"headerlink\" title=\"TypeScript\"></a><strong>TypeScript</strong></h4><div class=\"note warning flat\"><p><code>TypeScript</code>存在类型报错，但不影响<code>Sentry</code>的正常工作。使用注释<code>// @ts-ignore</code>让<code>ts</code>忽略此问题即可</p>\n</div>\n\n  <figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">// @ts-ignore</span></span><br><span class=\"line\">Sentry.init(&#123;</span><br><span class=\"line\">    Vue,</span><br><span class=\"line\">    <span class=\"attr\">dsn</span>: process.env.SENTRY_LARAVEL_DSN,</span><br><span class=\"line\">    <span class=\"attr\">integrations</span>: [<span class=\"keyword\">new</span> Integrations.BrowserTracing()],</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Set tracesSampleRate to 1.0 to capture 100%</span></span><br><span class=\"line\">    <span class=\"comment\">// of transactions for performance monitoring.</span></span><br><span class=\"line\">    <span class=\"comment\">// We recommend adjusting this value in production</span></span><br><span class=\"line\">    <span class=\"attr\">tracesSampleRate</span>: <span class=\"built_in\">parseInt</span>(process.env.SENTRY_TRACES_SAMPLE_RATE ?? <span class=\"string\">&#x27;0.2&#x27;</span>, <span class=\"number\">10</span>),</span><br><span class=\"line\">    <span class=\"attr\">environment</span>: process.env.ENV,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n  <!-- tabs:end -->\n\n\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<h1 id=\"Sentry-接入\"><a href=\"#Sentry-接入\" class=\"headerlink\" title=\"Sentry 接入\"></a>Sentry 接入</h1><h2 id=\"使用方式对比\"><a href=\"#使用方式对比\" class=\"headerlink\" title=\"使用方式对比\"></a>使用方式对比</h2><p>Sentry 提供网页版应用。监控服务直接部署在他们的服务器上。提供免费使用和两种升级。我们使用 Sentry 有四种方案。</p>\n<ul>\n<li>方案一：自建服务器部署 Sentry</li>\n<li>方案二：Sentry 提供的免费版本，各自管理各自的项目</li>\n<li>方案三：Sentry 团队版，基本满足团队开发所需</li>\n<li>方案四：Sentry 商业版，提供更高级的图表和跨项目联动</li>\n</ul>\n<p>因为Sentry提供14天的最高版本试用，我把几种方案都试了试。下面是功能对比</p>\n<table style=\"text-align:center;\">\n<thead>\n<tr>\n<td style=\"width:300px\">功能列表</td><td style=\"width:100px\">自建服务</td><td style=\"width:100px\">免费版</td><td style=\"width:100px\">团队版</td><td style=\"width:100px\">商业版</td>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>多个项目管理</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td>\n</tr>\n<tr>\n<td>监控报错</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td>\n</tr>\n<tr>\n<td>邮件通知</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td>\n</tr>\n<tr>\n<td>开通子账户</td><td style=\"color:green\">√</td><td style=\"color:red\">×</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td>\n</tr>\n<tr>\n<td>一个月以上数据保存</td><td style=\"color:green\">√</td><td style=\"color:red\">×</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td>\n</tr>\n<tr>\n<td>作为插件接入其他管理平台</td><td style=\"color:red\">×</td><td style=\"color:red\">×</td><td style=\"color:green\">√</td><td style=\"color:green\">√</td>\n</tr>\n<tr>\n<td>更多花里胡哨的统计</td><td style=\"color:red\">×</td><td style=\"color:red\">×</td><td style=\"color:red\">×</td><td style=\"color:green\">√</td>\n</tr>\n</tbody>\n</table>\n\n<div class=\"note info flat\"><p>最终我们选择了团队版。不过有条件的也可以选择自建服务。登录地址 <a href=\"https://sentry.io/signup\">https://sentry.io/signup</a></p>\n</div>\n\n<h2 id=\"Laravel-项目接入步骤\"><a href=\"#Laravel-项目接入步骤\" class=\"headerlink\" title=\"Laravel 项目接入步骤\"></a>Laravel 项目接入步骤</h2><h3 id=\"1-使用-composer-安装插件\"><a href=\"#1-使用-composer-安装插件\" class=\"headerlink\" title=\"1.使用 composer 安装插件\"></a>1.使用 composer 安装插件</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">composer require sentry/sentry-laravel</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-重写-report-方法\"><a href=\"#2-重写-report-方法\" class=\"headerlink\" title=\"2.重写 report 方法\"></a>2.重写 report 方法</h3><p>在文件<code>App/Exceptions/Handler.php</code>中加入以下方法</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">report</span>(<span class=\"params\"><span class=\"built_in\">Throwable</span> <span class=\"variable\">$e</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (app()-&gt;bound(<span class=\"string\">&#x27;sentry&#x27;</span>) &amp;&amp; <span class=\"keyword\">$this</span>-&gt;shouldReport(<span class=\"variable\">$e</span>)) &#123;</span><br><span class=\"line\">        <span class=\"variable\">$_SERVER</span>[<span class=\"string\">&#x27;SENTRY_ENVIRONMENT&#x27;</span>] = config(<span class=\"string\">&#x27;app.env&#x27;</span>);</span><br><span class=\"line\">        app(<span class=\"string\">&#x27;sentry&#x27;</span>)-&gt;captureException(<span class=\"variable\">$e</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">parent</span>::report(<span class=\"variable\">$e</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-发布配置文件\"><a href=\"#3-发布配置文件\" class=\"headerlink\" title=\"3.发布配置文件\"></a>3.发布配置文件</h3><div class=\"note warning flat\"><p>注意替换下方的 {DSN_ADDRESS}，发布过程中需要输入两次<code>yes</code></p>\n</div>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">php artisan sentry:publish --dsn=&#123;DSN_ADDRESS&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-配置环境变量\"><a href=\"#4-配置环境变量\" class=\"headerlink\" title=\"4.配置环境变量\"></a>4.配置环境变量</h3><p>在不同环境的<code>.env</code>文件中加入以下代码，初始的<code>.env</code>文件末尾已经在发布配置文件的时候写入了DSN地址，如有需要，注意替换。</p>\n<div class=\"note warning flat\"><p>注意替换下方的 {DSN_ADDRESS}，正式服的采样率可以设置为0.2，即每5个人中只有一个人进行报错监测</p>\n</div>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Sentry DSN 地址</span><br><span class=\"line\">SENTRY_LARAVEL_DSN=&#123;DSN_ADDRESS&#125;</span><br><span class=\"line\"># 采样率</span><br><span class=\"line\">SENTRY_TRACES_SAMPLE_RATE=1</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Vue-项目接入方法\"><a href=\"#Vue-项目接入方法\" class=\"headerlink\" title=\"Vue 项目接入方法\"></a>Vue 项目接入方法</h2><h3 id=\"1-使用-yarn-或者-npm-安装插件\"><a href=\"#1-使用-yarn-或者-npm-安装插件\" class=\"headerlink\" title=\"1. 使用 yarn 或者 npm 安装插件\"></a>1. 使用 yarn 或者 npm 安装插件</h3><ul>\n<li>yarn<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yarn add @sentry/vue @sentry/tracing</span><br></pre></td></tr></table></figure></li>\n<li>npm<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install --save @sentry/vue @sentry/tracing</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"2-配置环境变量\"><a href=\"#2-配置环境变量\" class=\"headerlink\" title=\"2. 配置环境变量\"></a>2. 配置环境变量</h3><p>在不同环境的<code>.env.js</code>文件中加入以下代码。</p>\n<div class=\"note warning flat\"><p>注意替换下方的 {DSN_ADDRESS}，正式服的采样率可以设置为0.2，即每5个人中只有一个人进行报错监测</p>\n</div>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Sentry DSN 地址</span></span><br><span class=\"line\">SENTRY_LARAVEL_DSN = &#123;DSN_ADDRESS&#125;</span><br><span class=\"line\"><span class=\"comment\">// 采样率</span></span><br><span class=\"line\">SENTRY_TRACES_SAMPLE_RATE = <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-在入口文件中初始化-Sentry\"><a href=\"#3-在入口文件中初始化-Sentry\" class=\"headerlink\" title=\"3. 在入口文件中初始化 Sentry\"></a>3. 在入口文件中初始化 Sentry</h3><ul>\n<li><p>引入</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> Sentry <span class=\"keyword\">from</span> <span class=\"string\">&quot;@sentry/vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;Integrations&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@sentry/tracing&quot;</span>;</span><br></pre></td></tr></table></figure></li>\n<li><p>初始化</p>\n<!-- tabs:start --></li>\n</ul>\n<h4 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a><strong>JavaScript</strong></h4>  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">Sentry.init(&#123;</span><br><span class=\"line\">  Vue,</span><br><span class=\"line\">  <span class=\"attr\">dsn</span>: process.env.SENTRY_LARAVEL_DSN,</span><br><span class=\"line\">  <span class=\"attr\">integrations</span>: [<span class=\"keyword\">new</span> Integrations.BrowserTracing()],</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Set tracesSampleRate to 1.0 to capture 100%</span></span><br><span class=\"line\">  <span class=\"comment\">// of transactions for performance monitoring.</span></span><br><span class=\"line\">  <span class=\"comment\">// We recommend adjusting this value in production</span></span><br><span class=\"line\">  <span class=\"attr\">tracesSampleRate</span>: <span class=\"built_in\">parseInt</span>(process.env.SENTRY_TRACES_SAMPLE_RATE ?? <span class=\"string\">&#x27;0.2&#x27;</span>),</span><br><span class=\"line\">  <span class=\"attr\">environment</span>: process.env.ENV,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"TypeScript\"><a href=\"#TypeScript\" class=\"headerlink\" title=\"TypeScript\"></a><strong>TypeScript</strong></h4><div class=\"note warning flat\"><p><code>TypeScript</code>存在类型报错，但不影响<code>Sentry</code>的正常工作。使用注释<code>// @ts-ignore</code>让<code>ts</code>忽略此问题即可</p>\n</div>\n\n  <figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">// @ts-ignore</span></span><br><span class=\"line\">Sentry.init(&#123;</span><br><span class=\"line\">    Vue,</span><br><span class=\"line\">    <span class=\"attr\">dsn</span>: process.env.SENTRY_LARAVEL_DSN,</span><br><span class=\"line\">    <span class=\"attr\">integrations</span>: [<span class=\"keyword\">new</span> Integrations.BrowserTracing()],</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Set tracesSampleRate to 1.0 to capture 100%</span></span><br><span class=\"line\">    <span class=\"comment\">// of transactions for performance monitoring.</span></span><br><span class=\"line\">    <span class=\"comment\">// We recommend adjusting this value in production</span></span><br><span class=\"line\">    <span class=\"attr\">tracesSampleRate</span>: <span class=\"built_in\">parseInt</span>(process.env.SENTRY_TRACES_SAMPLE_RATE ?? <span class=\"string\">&#x27;0.2&#x27;</span>, <span class=\"number\">10</span>),</span><br><span class=\"line\">    <span class=\"attr\">environment</span>: process.env.ENV,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n  <!-- tabs:end -->\n\n\n"},{"title":"PHP 如何最高效率的将数组去重","description":"偶然间听到“将数组的 key 和 value 对调再对调是去重的最快方案。”觉得很有趣，那事实真的是这样嘛","keywords":"PHP, 数组去重","top_img":"/images/php/PhpCover.png","cover":"/images/php/PhpCover.png","date":"2021-08-16T03:53:45.000Z","updated":"2021-08-16T03:53:45.000Z","swiper_index":null,"swiper_desc":null,"swiper_cover":null,"_content":"","source":"_posts/php/RemoveDuplicate.md","raw":"---\ntitle: PHP 如何最高效率的将数组去重\ndescription: 偶然间听到“将数组的 key 和 value 对调再对调是去重的最快方案。”觉得很有趣，那事实真的是这样嘛\nkeywords: PHP, 数组去重\ntop_img: /images/php/PhpCover.png\ncover: /images/php/PhpCover.png\ntags:\n  - 1111\ncategories:\n  - Golang\ndate: 2021-08-16 11:53:45\nupdated: 2021-08-16 11:53:45\nswiper_index:\nswiper_desc:\nswiper_cover:\n---\n","slug":"php/RemoveDuplicate","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckx5kj0zf0000ocu4145h54h8","content":"","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":""},{"title":"ESSO 用户接入文档-前端手册","description":"前端上架浙里办，需要接入 ESSO 用户体系完成验证。这个用户体系","keywords":"ESSO, 浙里办","top_img":"/images/php/PhpCover.png","cover":"/images/php/PhpCover.png","date":"2021-12-14T03:59:13.000Z","updated":"2021-12-14T03:59:13.000Z","_content":"### 登录状态判断规则\n* 与`IDaaS`相同，当用户通过单点登录地址完成登录操作后，地址栏中会携带一个参数作为登录`token`。\n* 此参数的参数名为`access_token`，值为`string`格式的`Bearer`类型`token`字符串\n* 若存在此参数，说明用户已完成登录，调用后台接口时在`header`中携带`Authorization`字段，对应的值为`Bearer `拼接`access_token`\n  ```javascript\n  headers = {\n    'Authorization': 'Bearer ' + access_token\n  }\n  ```\n* 若不存在此参数，在需要用户登录的时候令用户跳转至单点登录地址即可。\n\n### 单点登录地址生成规则\n* 获取当前url，并将其进行url编码\n  ```javascript\n  let url_encode = encodeURIComponent(location.href);\n  ```\n* 在url编码前拼接登录指定地址。\n  * 测试服地址：`http://essotest.zjzwfw.gov.cn/opensso/spsaehandler/metaAlias/sp?spappurl=https://gdte-api.cloudvhall.com:8443/ban/api/v1/login/esso?goto=`\n  * 正式服地址：`https://esso.zjzwfw.gov.cn/opensso/spsaehandler/metaAlias/sp?spappurl=https://dea-api.idtshow.com:8443/ban/api/v1/login/esso?goto=`\n  ```javascript\n  // 正式服地址\n  // const ESSO_PREFIX = 'https://esso.zjzwfw.gov.cn/opensso/spsaehandler/metaAlias/sp?spappurl=https://dea-api.idtshow.com:8443/ban/api/v1/login/esso?goto=';\n  // 测试服地址\n  const ESSO_PREFIX = 'http://essotest.zjzwfw.gov.cn/opensso/spsaehandler/metaAlias/sp?spappurl=https://gdte-api.cloudvhall.com:8443/ban/api/v1/login/esso?goto=';\n  let esso_url = ESSO_PREFIX + url_encode;\n  ```\n  * 将跳转至拼接出来的单点登录地址。\n  ```javascript\n  location.href = esso_url;\n  ```\n### 错误处理\n* 401错误：\n  * \n","source":"_posts/three-party/ESSOUserJoinUp.md","raw":"---\ntitle: ESSO 用户接入文档-前端手册\ndescription: 前端上架浙里办，需要接入 ESSO 用户体系完成验证。这个用户体系\nkeywords: ESSO, 浙里办\ntop_img: /images/php/PhpCover.png\ncover: /images/php/PhpCover.png\ntags:\n  - ESSO\n  - 浙里办\ncategories:\n  - ThreeParty\ndate: 2021-12-14 11:59:13\nupdated: 2021-12-14 11:59:13\n---\n### 登录状态判断规则\n* 与`IDaaS`相同，当用户通过单点登录地址完成登录操作后，地址栏中会携带一个参数作为登录`token`。\n* 此参数的参数名为`access_token`，值为`string`格式的`Bearer`类型`token`字符串\n* 若存在此参数，说明用户已完成登录，调用后台接口时在`header`中携带`Authorization`字段，对应的值为`Bearer `拼接`access_token`\n  ```javascript\n  headers = {\n    'Authorization': 'Bearer ' + access_token\n  }\n  ```\n* 若不存在此参数，在需要用户登录的时候令用户跳转至单点登录地址即可。\n\n### 单点登录地址生成规则\n* 获取当前url，并将其进行url编码\n  ```javascript\n  let url_encode = encodeURIComponent(location.href);\n  ```\n* 在url编码前拼接登录指定地址。\n  * 测试服地址：`http://essotest.zjzwfw.gov.cn/opensso/spsaehandler/metaAlias/sp?spappurl=https://gdte-api.cloudvhall.com:8443/ban/api/v1/login/esso?goto=`\n  * 正式服地址：`https://esso.zjzwfw.gov.cn/opensso/spsaehandler/metaAlias/sp?spappurl=https://dea-api.idtshow.com:8443/ban/api/v1/login/esso?goto=`\n  ```javascript\n  // 正式服地址\n  // const ESSO_PREFIX = 'https://esso.zjzwfw.gov.cn/opensso/spsaehandler/metaAlias/sp?spappurl=https://dea-api.idtshow.com:8443/ban/api/v1/login/esso?goto=';\n  // 测试服地址\n  const ESSO_PREFIX = 'http://essotest.zjzwfw.gov.cn/opensso/spsaehandler/metaAlias/sp?spappurl=https://gdte-api.cloudvhall.com:8443/ban/api/v1/login/esso?goto=';\n  let esso_url = ESSO_PREFIX + url_encode;\n  ```\n  * 将跳转至拼接出来的单点登录地址。\n  ```javascript\n  location.href = esso_url;\n  ```\n### 错误处理\n* 401错误：\n  * \n","slug":"three-party/ESSOUserJoinUp","published":1,"_id":"ckx5ku939000ix0u4cggo46ir","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"登录状态判断规则\"><a href=\"#登录状态判断规则\" class=\"headerlink\" title=\"登录状态判断规则\"></a>登录状态判断规则</h3><ul>\n<li>与<code>IDaaS</code>相同，当用户通过单点登录地址完成登录操作后，地址栏中会携带一个参数作为登录<code>token</code>。</li>\n<li>此参数的参数名为<code>access_token</code>，值为<code>string</code>格式的<code>Bearer</code>类型<code>token</code>字符串</li>\n<li>若存在此参数，说明用户已完成登录，调用后台接口时在<code>header</code>中携带<code>Authorization</code>字段，对应的值为<code>Bearer </code>拼接<code>access_token</code><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">headers = &#123;</span><br><span class=\"line\">  <span class=\"string\">&#x27;Authorization&#x27;</span>: <span class=\"string\">&#x27;Bearer &#x27;</span> + access_token</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>若不存在此参数，在需要用户登录的时候令用户跳转至单点登录地址即可。</li>\n</ul>\n<h3 id=\"单点登录地址生成规则\"><a href=\"#单点登录地址生成规则\" class=\"headerlink\" title=\"单点登录地址生成规则\"></a>单点登录地址生成规则</h3><ul>\n<li>获取当前url，并将其进行url编码<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> url_encode = <span class=\"built_in\">encodeURIComponent</span>(location.href);</span><br></pre></td></tr></table></figure></li>\n<li>在url编码前拼接登录指定地址。<ul>\n<li>测试服地址：<code>http://essotest.zjzwfw.gov.cn/opensso/spsaehandler/metaAlias/sp?spappurl=https://gdte-api.cloudvhall.com:8443/ban/api/v1/login/esso?goto=</code></li>\n<li>正式服地址：<code>https://esso.zjzwfw.gov.cn/opensso/spsaehandler/metaAlias/sp?spappurl=https://dea-api.idtshow.com:8443/ban/api/v1/login/esso?goto=</code><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 正式服地址</span></span><br><span class=\"line\"><span class=\"comment\">// const ESSO_PREFIX = &#x27;https://esso.zjzwfw.gov.cn/opensso/spsaehandler/metaAlias/sp?spappurl=https://dea-api.idtshow.com:8443/ban/api/v1/login/esso?goto=&#x27;;</span></span><br><span class=\"line\"><span class=\"comment\">// 测试服地址</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> ESSO_PREFIX = <span class=\"string\">&#x27;http://essotest.zjzwfw.gov.cn/opensso/spsaehandler/metaAlias/sp?spappurl=https://gdte-api.cloudvhall.com:8443/ban/api/v1/login/esso?goto=&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> esso_url = ESSO_PREFIX + url_encode;</span><br></pre></td></tr></table></figure></li>\n<li>将跳转至拼接出来的单点登录地址。<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">location.href = esso_url;</span><br></pre></td></tr></table></figure>\n<h3 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h3></li>\n</ul>\n</li>\n<li>401错误：<br>* </li>\n</ul>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网誌框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"excerpt":"","more":"<h3 id=\"登录状态判断规则\"><a href=\"#登录状态判断规则\" class=\"headerlink\" title=\"登录状态判断规则\"></a>登录状态判断规则</h3><ul>\n<li>与<code>IDaaS</code>相同，当用户通过单点登录地址完成登录操作后，地址栏中会携带一个参数作为登录<code>token</code>。</li>\n<li>此参数的参数名为<code>access_token</code>，值为<code>string</code>格式的<code>Bearer</code>类型<code>token</code>字符串</li>\n<li>若存在此参数，说明用户已完成登录，调用后台接口时在<code>header</code>中携带<code>Authorization</code>字段，对应的值为<code>Bearer </code>拼接<code>access_token</code><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">headers = &#123;</span><br><span class=\"line\">  <span class=\"string\">&#x27;Authorization&#x27;</span>: <span class=\"string\">&#x27;Bearer &#x27;</span> + access_token</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>若不存在此参数，在需要用户登录的时候令用户跳转至单点登录地址即可。</li>\n</ul>\n<h3 id=\"单点登录地址生成规则\"><a href=\"#单点登录地址生成规则\" class=\"headerlink\" title=\"单点登录地址生成规则\"></a>单点登录地址生成规则</h3><ul>\n<li>获取当前url，并将其进行url编码<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> url_encode = <span class=\"built_in\">encodeURIComponent</span>(location.href);</span><br></pre></td></tr></table></figure></li>\n<li>在url编码前拼接登录指定地址。<ul>\n<li>测试服地址：<code>http://essotest.zjzwfw.gov.cn/opensso/spsaehandler/metaAlias/sp?spappurl=https://gdte-api.cloudvhall.com:8443/ban/api/v1/login/esso?goto=</code></li>\n<li>正式服地址：<code>https://esso.zjzwfw.gov.cn/opensso/spsaehandler/metaAlias/sp?spappurl=https://dea-api.idtshow.com:8443/ban/api/v1/login/esso?goto=</code><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 正式服地址</span></span><br><span class=\"line\"><span class=\"comment\">// const ESSO_PREFIX = &#x27;https://esso.zjzwfw.gov.cn/opensso/spsaehandler/metaAlias/sp?spappurl=https://dea-api.idtshow.com:8443/ban/api/v1/login/esso?goto=&#x27;;</span></span><br><span class=\"line\"><span class=\"comment\">// 测试服地址</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> ESSO_PREFIX = <span class=\"string\">&#x27;http://essotest.zjzwfw.gov.cn/opensso/spsaehandler/metaAlias/sp?spappurl=https://gdte-api.cloudvhall.com:8443/ban/api/v1/login/esso?goto=&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> esso_url = ESSO_PREFIX + url_encode;</span><br></pre></td></tr></table></figure></li>\n<li>将跳转至拼接出来的单点登录地址。<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">location.href = esso_url;</span><br></pre></td></tr></table></figure>\n<h3 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h3></li>\n</ul>\n</li>\n<li>401错误：<br>* </li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cksa1rbwz0001z4u4b6qmbbzx","category_id":"cksa1rbx40004z4u42a9n0apl","_id":"cksa1rbxd000gz4u4gwht0k77"},{"post_id":"cksa1rbx30003z4u4cp99cdiq","category_id":"cksa1rbx40004z4u42a9n0apl","_id":"cksa1rbxg000lz4u42em83mef"},{"post_id":"cksa1rbx60007z4u4827t617b","category_id":"cksa1rbxd000fz4u49taw5g05","_id":"cksa1rbxh000qz4u42p0i5h81"},{"post_id":"cksa1rbx80009z4u45w0qg30z","category_id":"cksa1rbxd000fz4u49taw5g05","_id":"cksa1rbxi000uz4u4gtmebju4"},{"post_id":"cksa1rbx8000az4u46qtob5x7","category_id":"cksa1rbxh000pz4u4ccih5tbl","_id":"cksa1rbxj000yz4u4fs5w9i2n"},{"post_id":"cksa1rbxb000dz4u4fnd022ky","category_id":"cksa1rbxd000fz4u49taw5g05","_id":"cksa1rbxk0013z4u424y64mq1"},{"post_id":"cksa1rbxc000ez4u41z0ydrf4","category_id":"cksa1rbxd000fz4u49taw5g05","_id":"cksa1rbxk0015z4u4ak3jbiat"},{"post_id":"cksa1rbxe000iz4u41d7n241x","category_id":"cksa1rbxj0012z4u4an2l09f5","_id":"cksa1rbxl001az4u44rqm7iud"},{"post_id":"cksa1rbxg000kz4u45l2vfq65","category_id":"cksa1rbxk0016z4u44t8k4jfc","_id":"cksa1rbxl001cz4u4daep6etz"},{"post_id":"cksa1rbxr001tz4u42evl32xf","category_id":"cksa1rbxj0012z4u4an2l09f5","_id":"cksa1rbxt0021z4u42d9h41zt"},{"post_id":"cksa1rbxr001uz4u44sxx98vv","category_id":"cksa1rbxs001xz4u4hozaf0ti","_id":"cksa1rbxy0027z4u471lb7u2b"},{"post_id":"cksa1rbxs001wz4u46laj4dci","category_id":"cksa1rbxx0023z4u493abgvk6","_id":"cksa1rbxz002dz4u4eudh108s"},{"post_id":"cksa1rbxt0020z4u4c9cj1tzq","category_id":"cksa1rbxx0023z4u493abgvk6","_id":"cksa1rby0002hz4u45wbd6rxn"},{"post_id":"cksa1rbxu0022z4u4h9jwhqwj","category_id":"cksa1rbxx0023z4u493abgvk6","_id":"cksa1rby0002kz4u47am0e0w3"},{"post_id":"ckx5kj0zf0000ocu4145h54h8","category_id":"cksa1rbxd000fz4u49taw5g05","_id":"ckx5kj0zt0002ocu46na60bju"},{"post_id":"ckx5ku939000ix0u4cggo46ir","category_id":"cksa1rbxx0023z4u493abgvk6","_id":"ckx5l1vhj000px0u4d50u8u1a"}],"PostTag":[{"post_id":"cksa1rbwz0001z4u4b6qmbbzx","tag_id":"cksa1rbx50005z4u411vg60k3","_id":"cksa1rbxf000jz4u4cj5kecxa"},{"post_id":"cksa1rbwz0001z4u4b6qmbbzx","tag_id":"cksa1rbx9000cz4u44kfm8i0q","_id":"cksa1rbxg000mz4u40kvr3ea5"},{"post_id":"cksa1rbx30003z4u4cp99cdiq","tag_id":"cksa1rbx50005z4u411vg60k3","_id":"cksa1rbxi000sz4u45emobg5k"},{"post_id":"cksa1rbx30003z4u4cp99cdiq","tag_id":"cksa1rbx9000cz4u44kfm8i0q","_id":"cksa1rbxi000tz4u4ccl48jly"},{"post_id":"cksa1rbx60007z4u4827t617b","tag_id":"cksa1rbxh000rz4u4b0q4765n","_id":"cksa1rbxj0010z4u49izpg17z"},{"post_id":"cksa1rbx60007z4u4827t617b","tag_id":"cksa1rbx9000cz4u44kfm8i0q","_id":"cksa1rbxj0011z4u48jgicpsc"},{"post_id":"cksa1rbx80009z4u45w0qg30z","tag_id":"cksa1rbxh000rz4u4b0q4765n","_id":"cksa1rbxl0018z4u4b6q2hxz4"},{"post_id":"cksa1rbx80009z4u45w0qg30z","tag_id":"cksa1rbxk0014z4u45peh78k4","_id":"cksa1rbxl0019z4u48jwcgai5"},{"post_id":"cksa1rbx8000az4u46qtob5x7","tag_id":"cksa1rbxk0017z4u4az03dsui","_id":"cksa1rbxm001ez4u496xw5ypn"},{"post_id":"cksa1rbx8000az4u46qtob5x7","tag_id":"cksa1rbx9000cz4u44kfm8i0q","_id":"cksa1rbxm001fz4u42rqoaw3r"},{"post_id":"cksa1rbxb000dz4u4fnd022ky","tag_id":"cksa1rbxh000rz4u4b0q4765n","_id":"cksa1rbxm001hz4u4gm88gejz"},{"post_id":"cksa1rbxb000dz4u4fnd022ky","tag_id":"cksa1rbx9000cz4u44kfm8i0q","_id":"cksa1rbxm001iz4u47kqm34af"},{"post_id":"cksa1rbxc000ez4u41z0ydrf4","tag_id":"cksa1rbxh000rz4u4b0q4765n","_id":"cksa1rbxn001kz4u40lvl7s76"},{"post_id":"cksa1rbxc000ez4u41z0ydrf4","tag_id":"cksa1rbx9000cz4u44kfm8i0q","_id":"cksa1rbxn001lz4u4ahc5fe5k"},{"post_id":"cksa1rbxe000iz4u41d7n241x","tag_id":"cksa1rbxm001jz4u45xf49dpc","_id":"cksa1rbxn001oz4u4c3mtg01y"},{"post_id":"cksa1rbxe000iz4u41d7n241x","tag_id":"cksa1rbxk0014z4u45peh78k4","_id":"cksa1rbxn001pz4u47jus87tz"},{"post_id":"cksa1rbxg000kz4u45l2vfq65","tag_id":"cksa1rbxn001nz4u4adzm3917","_id":"cksa1rbxo001rz4u4h0ip45cz"},{"post_id":"cksa1rbxg000kz4u45l2vfq65","tag_id":"cksa1rbxn001qz4u41e1l448o","_id":"cksa1rbxo001sz4u496gjhf2m"},{"post_id":"cksa1rbxr001tz4u42evl32xf","tag_id":"cksa1rbxm001jz4u45xf49dpc","_id":"cksa1rbxs001vz4u4ck8j1yss"},{"post_id":"cksa1rbxr001tz4u42evl32xf","tag_id":"cksa1rbxk0014z4u45peh78k4","_id":"cksa1rbxt001zz4u4gs8r3nkx"},{"post_id":"cksa1rbxr001uz4u44sxx98vv","tag_id":"cksa1rbxt001yz4u4d5ol74gu","_id":"cksa1rbxy0025z4u4f9ivfhd9"},{"post_id":"cksa1rbxr001uz4u44sxx98vv","tag_id":"cksa1rbx9000cz4u44kfm8i0q","_id":"cksa1rbxy0026z4u4hfgv70y2"},{"post_id":"cksa1rbxs001wz4u46laj4dci","tag_id":"cksa1rbxx0024z4u4e4199frz","_id":"cksa1rbxz002az4u49wdz2rfl"},{"post_id":"cksa1rbxs001wz4u46laj4dci","tag_id":"cksa1rbxk0014z4u45peh78k4","_id":"cksa1rbxz002bz4u46bmje773"},{"post_id":"cksa1rbxt0020z4u4c9cj1tzq","tag_id":"cksa1rbxx0024z4u4e4199frz","_id":"cksa1rby0002fz4u42hdj5q99"},{"post_id":"cksa1rbxt0020z4u4c9cj1tzq","tag_id":"cksa1rbx9000cz4u44kfm8i0q","_id":"cksa1rby0002gz4u4h6s55kye"},{"post_id":"cksa1rbxu0022z4u4h9jwhqwj","tag_id":"cksa1rbxx0024z4u4e4199frz","_id":"cksa1rby0002iz4u4d63ieagw"},{"post_id":"cksa1rbxu0022z4u4h9jwhqwj","tag_id":"cksa1rbxn001qz4u41e1l448o","_id":"cksa1rby0002jz4u41c6c95tu"},{"post_id":"ckx5kj0zf0000ocu4145h54h8","tag_id":"ckx5kj0zl0001ocu4cb4b5fxb","_id":"ckx5kj0zt0003ocu4g183gf4q"},{"post_id":"ckx5ku939000ix0u4cggo46ir","tag_id":"ckx5l1i1d000lx0u4fzll29sh","_id":"ckx5l1i1e000nx0u43zas0vja"},{"post_id":"ckx5ku939000ix0u4cggo46ir","tag_id":"ckx5l1i1d000mx0u447zh6law","_id":"ckx5l1i1e000ox0u4h93hfica"}],"Tag":[{"name":"ggt-coder","_id":"cksa1rbx50005z4u411vg60k3"},{"name":"入门","_id":"cksa1rbx9000cz4u44kfm8i0q"},{"name":"Golang","_id":"cksa1rbxh000rz4u4b0q4765n"},{"name":"探讨","_id":"cksa1rbxk0014z4u45peh78k4"},{"name":"MySQL","_id":"cksa1rbxk0017z4u4az03dsui"},{"name":"PHP","_id":"cksa1rbxm001jz4u45xf49dpc"},{"name":"Web","_id":"cksa1rbxn001nz4u4adzm3917"},{"name":"进阶","_id":"cksa1rbxn001qz4u41e1l448o"},{"name":"Ubuntu","_id":"cksa1rbxt001yz4u4d5ol74gu"},{"name":"ThreeParty","_id":"cksa1rbxx0024z4u4e4199frz"},{"name":"1111","_id":"ckx5kj0zl0001ocu4cb4b5fxb"},{"name":"ESSO","_id":"ckx5l1i1d000lx0u4fzll29sh"},{"name":"浙里办","_id":"ckx5l1i1d000mx0u447zh6law"}]}}